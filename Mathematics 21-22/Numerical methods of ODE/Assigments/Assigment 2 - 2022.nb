(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    208389,       4590]
NotebookOptionsPosition[    190309,       4333]
NotebookOutlinePosition[    190915,       4354]
CellTagsIndexPosition[    190872,       4351]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
Corso di Laboratorio Computazionale, Corso di Laurea in Matematica,  \
Universit\[AGrave] di Padova.        
A.A. 2021-2022\
\>", "Text",
 CellFrame->{{0, 0}, {0.5, 0}},
 CellChangeTimes->{{3.6030403380477047`*^9, 3.6030403496377206`*^9}, {
  3.6042342921245947`*^9, 3.604234293844597*^9}, {3.6659842250605717`*^9, 
  3.665984234810585*^9}, {3.665988776604652*^9, 3.6659887774046535`*^9}, {
  3.666106805730517*^9, 3.666106807983646*^9}, {3.686715090311494*^9, 
  3.68671511399888*^9}, {3.6973875672817383`*^9, 3.6973875784126663`*^9}, {
  3.697434883527854*^9, 3.697434886700633*^9}, {3.697998051529482*^9, 
  3.697998057171163*^9}, {3.6987578361186147`*^9, 3.6987578804703298`*^9}, {
  3.7303756463057995`*^9, 3.7303756495463*^9}, {3.7617178271179724`*^9, 
  3.761717830630767*^9}, {3.794982450902438*^9, 3.794982454111483*^9}, {
  3.825238741739152*^9, 3.825238747980524*^9}, {3.857100396796105*^9, 
  3.8571003987684298`*^9}},
 FontSize->12,
 Background->None,ExpressionUUID->"5d4dcf10-34f9-4c33-8fc6-a92503dd0718"],

Cell[CellGroupData[{

Cell["Esercizi 2: Crittografia", "Title",
 CellChangeTimes->{{3.6051594074986267`*^9, 3.6051594078186274`*^9}, {
  3.6672381732378488`*^9, 3.667238184687865*^9}, {3.6987578071655054`*^9, 
  3.6987578251533327`*^9}, {3.7303816918773403`*^9, 3.7303817015789948`*^9}, {
  3.7303818411418023`*^9, 3.7303818536137104`*^9}, {3.7303818840836196`*^9, 
  3.7303819027351675`*^9}, {3.730381935238287*^9, 3.730381942859914*^9}, {
  3.730979833785277*^9, 3.7309798348262067`*^9}, {3.8252355487510977`*^9, 
  3.8252355509525504`*^9}, {3.8263334103814187`*^9, 
  3.8263334280089273`*^9}},ExpressionUUID->"7b2098f2-09d9-417a-a241-\
25aa2d0aa38c"],

Cell["Notebook del gruppo: Pinguini tattici nucleari", "Text",
 CellChangeTimes->{{3.6051654520044003`*^9, 3.6051654548044043`*^9}, {
  3.8581582793070354`*^9, 3.858158295248669*^9}},
 FontSize->14,ExpressionUUID->"05de0121-3d84-41a7-9b60-c7b0c4d67c73"],

Cell["\<\
Componenti del gruppo: Nicole Mietto e Lorena Escribano Huesca\
\>", "Text",
 CellChangeTimes->{{3.6051654520044003`*^9, 3.6051654548044043`*^9}, {
  3.667324612567563*^9, 3.667324615177567*^9}, {3.857836190096836*^9, 
  3.8578362077665997`*^9}},
 FontSize->14,ExpressionUUID->"cd5afc3f-80ce-428c-89f4-a8b7c4e29249"],

Cell["\<\
Se ci sono state collaborazioni e/o aiuti al di fuori del gruppo, dichiararli:
In collaborazione con: 
Aiutato da: \
\>", "Text",
 CellChangeTimes->{{3.6051654600844116`*^9, 3.6051654836344447`*^9}, {
  3.794982522075444*^9, 3.79498252778261*^9}},
 FontSize->14,ExpressionUUID->"983a8daa-e68a-4ac6-b3f3-d5bad2fbe222"],

Cell["Consegna entro: 7/4/22", "Text",
 CellChangeTimes->{{3.794982459599351*^9, 3.794982493114044*^9}, {
   3.825235101452421*^9, 3.825235130527963*^9}, {3.825237956791202*^9, 
   3.825237957232108*^9}, 3.8263334328016343`*^9, {3.826348493627718*^9, 
   3.826348495788848*^9}, {3.857100412574314*^9, 3.8571004158920116`*^9}, {
   3.8575391434315233`*^9, 3.857539143490016*^9}},
 FontSize->14,ExpressionUUID->"1a7e8a7e-cc5e-4d34-8c16-a590db3bfd14"],

Cell[BoxData[
 RowBox[{"SetOptions", "[", 
  RowBox[{
   RowBox[{"EvaluationNotebook", "[", "]"}], ",", 
   RowBox[{"Background", "->", "LightCyan"}]}], "]"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"743eb0ff-8420-45f5-864f-668802c187e9"],

Cell[CellGroupData[{

Cell["Esercizio 2.1: Decrittazione di messaggio (Hill)", "Chapter",
 CellChangeTimes->{{3.667188822640417*^9, 3.6671888235704184`*^9}, {
  3.6671889229405575`*^9, 3.6671889300105677`*^9}, {3.667320808064062*^9, 
  3.667320808264063*^9}, {3.6673268974717627`*^9, 3.667326897831763*^9}, {
  3.7618105027242365`*^9, 3.7618105039827375`*^9}, {3.8263415264787917`*^9, 
  3.826341529000018*^9}},ExpressionUUID->"5a75014c-3adc-4182-82c3-\
f3cd577408b0"],

Cell[CellGroupData[{

Cell["Testo dell\[CloseCurlyQuote]esercizio", "Section",
 CellChangeTimes->{{3.667324682717662*^9, 
  3.6673246884576693`*^9}},ExpressionUUID->"7971920d-dc7e-4236-9ffb-\
877ec956e631"],

Cell[CellGroupData[{

Cell["Testo dell\[CloseCurlyQuote]esercizio", "Subsection",
 CellChangeTimes->{{3.667324682717662*^9, 
  3.6673246884576693`*^9}},ExpressionUUID->"ae908165-ab5c-4107-98f6-\
3972c44f7fd1"],

Cell["La seguente stringa", "Text",
 CellChangeTimes->{{3.6060476199093447`*^9, 3.6060476273293552`*^9}, {
  3.8263474214269953`*^9, 3.82634742454858*^9}},
 FontSize->14,
 Background->RGBColor[
  0., 1., 0.],ExpressionUUID->"84277386-c2c4-4856-ba8c-0de68d9d4957"],

Cell[BoxData["\"\<adEkLCWJAnBAy@AvyuX,nDT';BULnNtgTJI;OCBEXj.URwXdYABKt';\
kczBKimrhBEnNtgTJI;OCBEXj.URwFOFui.I;tMZxYARwiyJZ,zFel,yuLNFO \
MUqXEz,ebt';kczRwLCadvmi.ImOCBWImeARwChjaiyohImeAmZu.MX'@ztnN@NRwLCUb.\
zFWxkebBKxkRwLCUbHgRKhMRDJbULhMczT'WJxL;kCzSNUbJbuWjH;cjaiyxbxbBKimrhBExL;\
kCzSN.zFWxkebh.eIlFgYLCEkLCUbEkI;ohMxY,jabVBACzI;j@rOu@@F'@\
rOhMRDClRwrOBKDQBARwnRSNp; \
ieIJjjmhMTgT';BULCzI;j@rOBKI;ClBESwu@luqSjmSNj@rOLCohnNtgTJI;OCBEBKt';kczT'k \
sYnN@NXjbwSNh'jaRwnRSNp;iOJD;JBE`SXEgikrlugUXvqjiy\>\""], "Input",
 CellChangeTimes->{{3.763092936125108*^9, 3.7630929554867287`*^9}, 
   3.763458823228118*^9, 3.8263415749125423`*^9},
 Background->RGBColor[
  0., 1., 0.],ExpressionUUID->"d44c021d-6ff5-4c8c-bfc2-97bde9d50f7f"],

Cell["\<\
\[EGrave] stato prodotta codificando un messaggio in una lista di numeri, \
crittando tale lista con un algoritmo Hill ed infine ritrasformando la lista \
crittata in una stringa. \
\>", "Text",
 CellChangeTimes->{{3.668440485013707*^9, 3.6684404882937117`*^9}, {
  3.7956115092907515`*^9, 3.795611510058707*^9}, {3.826347403787404*^9, 
  3.826347515172042*^9}},
 FontSize->14,
 Background->RGBColor[
  0., 1., 0.],ExpressionUUID->"239a9b25-2c42-4185-8a96-45a5b7a72494"],

Cell[TextData[{
 "La codifica/decodifica iniziale e finale utilizza i seguenti codici \
numerici per i seguenti 58 caratteri, che includono tutte le lettere \
minuscole e maiuscole ed 6 altri caratteri:\[LineSeparator]\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzt3U2OdE1zl/FqkBBDtuBdMGWImBmxAFsYi4mRbCTE5lgbfu7ursrPyDzn
ZGZEZF6/AXRXVdfJ/EecjP6438d/8/f/62//x795vV7/8u//9f/527/7P//p
n//57/7vf/0P//rJf/unf/mf//hP//Df//M//e9/+Md/+Of/+Pd/vey//NvX
6//9u9frCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwjNe/0l4D
AOBQLyu0gwAA2KU9o27QjgwAsJ727BlPO1EAwBza82Ut7bQBAPf5Pv6HjTIb
2wEASPY/3RlmALCLk89vphkAeMMZnWOYAYBRHMQXMM0AQBmn7XOPhxnZA0An
zs155k4zKgTgQJyJ602eYFQOwL44+wyZO8CoJQD/OOi8Y4YBOAdH2xmoM4At
cJgdjrIDcKR3ZnF6ifYKiC4AYFH3wOK46rVlUjQFAE2XZhXH0y0bZ0aPAIhM
u/1vDSsOpGe2D49+AYx7dPRfmhGP7v0ZC8J9p6RI4+C+0afWtt03PKjdaBdo
L2dlShs5o3LCKNDOuZ92Uq5oF2tzJ4Z84p590DtmjNEuxBe1uEO7Zoc5NfUT
92yF5vHi1QklmbzHUZucvUz0oiKYYNA5YYvRfOzVZmBQUzhY4li7bthJv81x
7MZH83MaXnm3hTfG5ACHWxTLJO43cNWmG96jG+86duPPnXAy6i1mYrrX6Gx/
tm03VrFpJTfv0pZjN37PaceinXWOTN51ScY4arNflhp5pAMbN3LuzrudfBg6
2MWxtXnktAT2LPnp3XzuzkUciN/23BWOK+yW9+fWR0+Pc3eeY15lTtjjkQ4r
7JY360HnUMXZW+cnrIbT9nuMwwq74437cxztuLVe526didXh5L1v7bCu3nG7
nE8HH09MrA7ksKnDOnzD7fKj18nHk52RZbgGhpeGJ876Dm3Dvf4WcMOt9Tt3
72bKbmYhBZbXhgc2mF4XvuF0v9fMe+/7be2Cc/dupuzhQpJFqR8x2tfPWFuP
W+qt9dClX5c432vuFU4v7cXoOXfzVjr6VZ5eBn6j+WUnpDdr63HL9/S6eGu4
3mtBNLy22tk1527eSt2z6VViYW0WmFuQW66TvHprFF7mePfh70w9V/G5czdv
pO7hLVibXUyvX+YW5JbnJC/fGuXp5Xz774+Vl6Po4M3b2Pp3I9bnlv70spDS
D900NuM2yOu3RmV6ud7/52Pd1Wg6ePMmtt4zspheP5Rn+Wa8BvnbBAOml/TF
Izut9U6XLsXw+nXw7m1s3dSPWhmLqxm/IENbXMnrtn97oL8ZSi9rfPHQTmu9
06VLRQuzdHuud+7ujZzLdifXX2ytaNH0MrTjqZzu890Cl370yl8nfvXYTpPf
qX6p0hPxQWHp9lzv3N3bOJfjqWViSSFT02vagGd6ORKf3H07KL9Q+PLBnSa+
U/VaxX4PDgyTJ8ZS5+7exrkcd6eJJYUMTq8Jhy7Ty4+gI59Or3oAo79Pit6p
Oo6qi3hlDxafHLtmD47abMREnZN+M7GmkKX1hDfu0/fIHk1fdPcCnnjc5r0D
uvUV6XvOnF7lcZRf61V65v154cnqO+3roK0mOqs8tyHiN7fXeZbWE964PS+t
vUPxoEhf9nCtLnjc5r2bsfEllRkxdHrFb55dWp5er+TVTK9vB2010VflyR1R
6L8p17nJ0nreZZAXVb+HC6fB55n0hYMWbZrDbVZuxdYtKu80a4qZ06s4cQpL
jOdU+urSGpleB+mqcv3EG7aGpJcnXOU+QwuK7vPmH9vzgglPMb3cEIeX2BeN
96xMr4fLza9fnDelJf48URhY6RrDpw1+BzzTQVtNdO186fSy13iGFhTfpvVX
lAsWPtqcXqfcFP62WbxDajUPhoO008LXDr/lX8Xplc6ebFnxQpI1Zb0evGzU
uq07aKuJnp0H3T8jqOQmmXORJ+wsSLrRwxeUT7L4sezrCyfH2NXb5G+bpTuk
VnPxp+3sZcW3HLnu6J0LV6mtIT6Cyk39ednohRt30FYTHVWODrxDp5f2En5I
N/pXcidnB1JyhGVfXzg5hi7eKHfbLN4gzaLHT6RvUTju80ExYOHZO+c3f3ER
8ViqT+fiZnd30FYT7SonJ97woPL+tVYMMwtKp0/9G/DPZ5WvLr+7+Pmm3G2z
VMWk7OnjyYGeN0L5gcG34iseWKUfpYRZlO0i+hL5tw57O2iriXaV07afsYLg
fdO+M9CH6gv4lQVVfL6SZPOOLhwLD9frgn5/XVMsY1L3+PF0TOSHe/HzZAw8
nwmv3z9MFVfVO7oKvzJI3vjxQp05aa+xZpnjThgfVNpsSeNZaET1BfzIgyq/
oPyHsWaQ6dNWtj2Zfn9dU6xj5R6NuyGbHpX3vDI7Lq5c+susfNn69YuLv79K
fw7bbqi19ay/xl8/7LeXwV5UX8C3JItCLtJd3s4xfd7ItmfT769r6id4/gfN
/MYqN8iVGfJo5cnf57KGbutN5CAHb7/jTIsbe/jlX+F/tC+5Rtyyz2+gu2tc
fMWi6r2evqR4q7eDS583su3ZvJ19xfWG5U6aJH5JvTmy11TmybOVZ29deFr6
6vtX39fBsTS2ng+P4ZcPp1fSv0k/1/p7cl/b6I7iUZLtvPpcO6L0BTa2PZ+z
fZaWG1Y7vX/S15TaRmqqSqPdW/n7feqLeHiRAx0cWmPref93vPDS1X++Ewsv
0Zxe2TE7te1tdEfhhClvvPxsO6FCrMMWb5mzfUoF//0sfCZ/1St7k1ZLDVv5
580LF5l8G2/r4NAaW8/7v/669p9kal/2iqdX8lWl38lnb7379MoOGPGoyZ9t
R5Q+b2LbCzjbZ7bcuNbZjZj9SvArfVXaXBNXLr/93Nt4W9MPQLsauy7eC5XX
vT4f1e6w8lfVvja5nz4vvvDr8gFMNMarrOMros/yV4SfZc+OWr1lzraZLDfp
hsoNlDZM2gtdDQWD+s6CXbVPwOiTxvSqRSk9enF6Vb9vbGz0PguNURs+HV8U
vUHtOPtiejlRvEFe8v+lxuyZuTcMJmvcyeeQd50NCumF9SgrAf8+9H6mdI99
Pv/9MFvU5OJZaAwpvr4vKnd8ctRdevtNONvlpyxxEYv3Xu2ePKW2O6ndwPMP
QLvkXXeHIkcpPfoVj6XwVfHn0W1buHDXOu+w0BilLdZ3XaxEq+fTS5xyRzjb
Za2G5Rthwe2B4Sq3qkh7zSrkfffHIoX580DxxgrX8OfzV3beZmt5JWfu5IPW
QGuUG7S87Xol5J5vP7AnZ3us1fDsY8yvwk15nfYmtMhbrz2bRxYGWT4Fk5yD
T1/Bd4/V6RW9vPCzV3OntxnojvIOCxt/0NjZyw+5NbztsFbeI4q1icYw6hC/
mdpGlMlbLz9bifBV+vg9gtIvCT59idMr/KT69ntPr9oOi+dXrcn7rpJfVnvz
s7nb4c3yWtB3Mtdpr/+Zp7uvbN99LvfJWy8+Wwy08nG1AOFnr8+fncNLRl8Q
vzyfXr37vUG/O2o7fBWjaHX7tcuqb362/Xe4zpWjeCDtbUvmb8l4ADPJW8+e
fb1eXdPr82C5KuknX/n0ir4g+Di77OwG1u+O6g6jxx/cAJcvvJH9dzjYhTNY
lbhyS+E8v+SQpTskbz19tpp8VIRXOGeqL0+m3e8jyRfnr0++cm4zhtvRU9/h
qzK9Fi1sB6RVdfkc9kM9nQEL+Kxj3Jv5Im89fTbMPixCXI/XexpVapYU8JVM
r1dwpfz16aM/Tw1uCSGE9fpWMPy2OAOR/eXi2XufkSUqXff+7sX1zXhbD+St
J8/GRQjKEVemUb2skq9X8I/e61/wFV1rWXOc3B0nOK28XafsfU72M/bd7l1r
XACTr2CWvPWXML2CyiRFiiv3+TD+XHxboQeW98nB3XGC/corHqVDaO+wbX4G
ZsJxUY855K0nxQjrE1YqKVpcyc+HtRpHD4UvKb4+7ZXpjXNwd5zAYXm7DtFB
tPc6xs7hWFmHAnnrcYXCogXlywqZ1Db9mqzu8WPBS8qvzx6d3EsHd8cJ1Mp7
47ScSieFNXaOxvr6JpK3HlcuqGX+Yd+1ii9OHvx8VvmCxT11cHec4El5Hx6K
Wgam58TO6Thc8ijy1qNqPi957cX1d7DQT+oLGOrKfTzCrvuybVXq0HdwuRtb
D+6EEbeLyxvL05onH4qwQrvRYMbB3dDY+udO+blpDryXzO5vxSmJmbQ7CBs4
uI8aW3/fY7+3W3jrHXITmtngoiMVV2g3BU53cBO2tv5zh35u1fC2PePu1drk
BgfutC0M3NfSQIDRDm7g1tbz42H5Eaht1WZVz/BzERlcO7iBm1v3di6OP+uH
73zQmHJTEttIEa4d3MDNraudlAPPeAWTtrC4BicgVXh28rHQ3vrTg3P8EX6O
u5mjHzHDs5PPiatb1z3NdzepyBAQOzw7+dxobl33OL/nwuaNrxDTUQ14dvJx
Eh6namd5jXY4364vxNwWUEeR4NnJ/XvSGLrJ+/ohorzw7OT+PW0U3XDglk9y
YktjHye3L+OqiQS2RofDs5Pb9xX/X4HUXo5FxLI12h6endy+J++9ExFtjekF
z05u35P33omI9kZ94djJ7Xvy3jsR0d6oLxw7uX1P3nsnItob9YVjJ7fvyXvv
RER7o75w7OT2PXnvnYhob9QXfh39j46O3nwfItob5YVfR59OR2++DxHtjfLC
r6NPp6M334eI9kZ54dfRp9PRm+9DRHujvEsdGves/5jRoXH+OHv3XYhoa5R3
pY2+F7z0H9ib9R/j2yfOO87efRci2hrlXWif/5rqxf+S+az/6vkucd5z9u67
ENHWKO862/y3wF+ZC18weCEj386Zs3ffhYi2RnnX2WV65cNL67eHW8R529m7
7zI3oj1uZ8fIf53dhlfwyZUvHLuUge/mzdm77zIzojl/ysUF5+a/vPc26fX0
R6gr2xqd+RaB3nb27rswvbZ2bP7re69+OU93QSG3C4sfHLqf2GbYdvfjemRi
RDN+E45rTo1fofWWTa+pG3sYG9NrnG1372F6vYfXpjVw4dD4FVqvfrkJv0+b
fNO2X/Pk6y+tZtRbObTt7r9b5FV35Z0mrvF16vFpxpHxa3zj1BheY38imXzT
PnjJyMUdfnZsunthat2ZXnMyerWnl8IZc5wT0319em/tRaXVPFlK/PUTb5me
t27sZuDqDj8aNt29n+n1Va/BrdXiqqfpGixPq3FUmqp6yRFNbm96PXuLC6sZ
804utb5HWLiUkTxMr/cqSu9/e7XzGFvOMA+3Yy+PdueoFLE5vIZOrwfv1X8d
4TXSi5hegwi793xQSTewuelVe87WuDC3oFEGHJum0mgXSm14rZpe83Rcp72X
odNrzBv5tOn0im/h0jPX3mvs4j4LqT9jbVBk89TGsgZ4shWDWXSUSWXJ8ih9
HuO66dV+RetFw/K31XrLbTy9fv//eAs3djUnhPoyTE4Iplf5S81lEa6ovDSd
Fdcu6qulugYT02uR+vYdtVRBYzIMea9nOobXhKveFizI4OqeuL8Vk5WK1lNa
mtKKKxd9J2gsxore4cX0WuGw6XVrSzrTa8Iln/hdkskT+5G7WzH6Q0O0nOr0
Wrmi91Vrj9eml7lsm2OnsyOYXmNUt2/z1uwmfqM35L0eqi/EZuavTPVli1f2
1M0VGx1eUQVKa1NaceWiUltdTnf+vhrL6W4JptcQjTPU3L3Zq7jum2fNtOlV
f8Ze5h3Dy+hx3nJvue+dWttumH91ei1eU2UppeH1yp8qfkXlGleXdDGN96ul
tfX9044rK53+Pk41ppe5e7NXqSvvnqwa08tc6O3pJT9r163VfvZpbbdB/MVK
KK336vQq91L+YPIlzTUUXd1F+Svfj7TfclQNjPXearWgw3vTY0CFdd8+V2ck
ICzF6ABo3vH3zgN9d1Yb7NLaboP4i5VQWm/xqvVJUm6m/LH049Yayi7uoviV
l1piVA2M9d5qtaDfpbB2c3bKm/L+sTojAWkpdkeAeHveOw/03VhtuElzmw1X
Vi7T6hV9tX70yl7yeaL0aDKxVv/sVfzKdCfNlXRfc8X7eFXZ/7sAzo6it3Td
D07VGQmIazE/BEpLu3sgqLux2MqZa0u5DkrrLV42n0TxE8kXfl7+fiz8+q6Z
kXfp7elVGqzphYT36b5mazknK+8/7h6PCSXLfnKmzkhAfk/rQ6A+vN4fL1/T
bXen1+fD0SsaotI/BqdX9ppKLxV2lI6Mm0u78trPP2VLBmeyeqbXAq3ptUdC
j2bBpOnVvKbZ8VVYV7Raq+suuzm98g9NqbWPoemVtvjvx/HDyYiov+2KnYW3
ZT6v8p/uhPcZtZwR7+OWML2yD916NgkmBNDxlobHV3V61Z837N70Cj60uNdq
8+hNr+JSwsfDqRAFHLy88Balj6cpTa90ZDVnF9NrlGqLbzS9Hs4Bnen1eNnz
5KvKz6HFS3rg0WJtFqj6e8O+32vNWU9tKfHn1V8npr+oSx5b9Ov2zyXiRVwZ
XV8jp9eIt/GrOb3M3qDdHve00vQyO74q00t43rIdp1e9cfpP2NELqqykvLbo
oc+HX+H8SD5ZO70Ki3hFT7beZdBqRryNX/XpVfzEoectrTW9jI6vwpLihwyu
WeBlevW3gtQ21qZXeW35Z9mQiB4rvX7WPrL8yo+03mXQaka8jV+lAJIe8HUY
pQZ09JTp1fs6e+nnK0oWaW/JkieLnVid8iF54SvLk6r02AKFi+VLiNYlDomX
pen1/Xj6qta7DFrNiLfxqxRAUhqDB2i/EQ09fvvdN9rqU6ZHvqL0Tja3ZMmT
xQ7cadoQ5dO7/41S0dPL+6pwscIKSoNJnrt5QpM3VVpE8UWt9xi0mBFv41cp
gCRdZ6dRpHNINN9kzGrCd2zeAsErB1/9ofKpE31ibMWiu6vtLKD0xdl7PZ9e
r5rSC24t/ZbCxQoLyEdRMZGZC23pSq+xyGF78HWjTVDtIbe/CQqV++zq7Tt8
+1dOEHPhVwKNPrG1Ytnl1TYHROnlxS8uvGXpKkMXd6X3xum92Od169fYp2dd
8vPjtmUwnrUqZ1HU4ya7qIN0Iny21vU+U9bVd3tay77cMdHTxlYsu7za6oCo
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
6l87bhFffqfX7wflZ9u/TzSnd3VirTTGgEBsrOjAXb9qeXjdm175r3MXTa/P
paRLzknZUL+p2z6LV+zGl89Zh6/pFX+QPFlaq61jvaBzdVLr3D96J5H7/N13
KovOL/lZyM0bc/L06hleTC9V22eRTI2ru50zvRpvbOlEjKdX6TnhqDTs+vQq
Hpa2tik3+pP7YMjShOW88seLL44fSF/Ss4juBKqvCb9cfKMpOZtqOGXbZ/FK
XP/y4etovrG5IzH5IHyqvFRrx3quc3mV5tGcAyKp11XXLC4nXFJxkZUSNK5Q
uVJfBtXXRF8tvtGUpK11nKbts4gHhoHp9fm0/LzFM/Fb7QAqvtLmFj4619c6
Ye3ttL4u1fXWmiddU3H56WN/PijcQaWrVrUXLPwAG34qv0fjMpcZazdV22fR
32q1Lx+8oMpSLt9do1fTvl7lOLz9fqouLrB+xCqUq6W8KNWVFq5bDLAYafpY
/y5KheqLofKS9GvlN5qRtq1W07V/FsmZc/urx8qWongedl6usuTqG45a3hyX
Fxju6c5xuFRpTarrLFz3ZzHRst4fFtL+vEn/ALlfpPKLszeR33JG2rYaTddB
Wdy6dWflUxkFGqdh7+XS11S/ytxZXnKrFeTptWLL/VcpnbN6lcmvGywmGk+v
bEJFD35lO5O2dH/P5cJmbya/94y07d9a61Sz8HACXXKviyeFUL6ZPx+tTL/3
coX7tvxVLlrn+hJru5o8vrpP6vK6kk+1alObXuEn8WPJDZF+pfTWoxacJZZH
2Lg402uq1h25ej3zGJ9e8XMjs8/vvtL1Lr1P8mWF4+TegbvQ2F6YdrcURtC1
r02+1Mz0KkyBfFJ8nhLeS2V6/T7K9NJUTD8vm383d6Q0vQZepnD33bteYUS9
irm+cg/3MUHvoj7rl/cxZJvpm2TxXbtI6UuVypFdtbCx4KH0Y+G9Ju2n3L+F
1v6ssvwuExY2+i3dKtXe9rFzw4OjdFIEwjKaS6y/INteuuVHRc0PjUqqtRvc
lM5FBetv7KP2dHX/tWJJD3VkGS/Yy/SKthq3ze/H74fyjCYtuFj3QnfXu3zC
2kzeTUoKoVs/d67obDLxDSYt685zv8/nrylvL33sUU3Lp03hsg8jX6NzUe/1
N/dRebr4dWJqpat3C94k+drfT5TqkV601qrhx9H0ijaWfOGc9dbzKnR4OdYJ
azN5NynJM0/6X2VVw/T1mPwGk5Z157nf5+PX1LeXPfTo6Oq86I7Tq7mP6tOF
J8pvWK1fzzLzN6m8v9npFQYVR5FVIA7qvas5663XvafLJ0Rt8m7SkoWR9I3C
kgbKO+z6cTBpWXee+32+cu7l25tYQSFPpQPyks4V9nWO8HzhifI73mjO1nLr
XfLsKjdXln6eHzzBc6/809/H4qcn7en7HZvvLWc6I2r7t9ZC5Vvr87HCkgZ6
fMdOSaB1Era/uHouDVvj7jqzqs2C/Ln+A6z8+iHVkxak2yalc0Z4bXnt0Sfz
p1dHXvKFZ0TNTR4otsnnY40lDfaouadE0Lpzb7zdHqVaqDew+hHWNbyqb3lp
sd2kBalPr/Sg6X5t4eml06vxsrvP3l7Y6Lf0qzS9sg8t62qw2xsZl8FnFdJ6
nITu3/OYb86uqeQFaS51/sSe866NN2Z6qYrDCOpl55as6+mwZ/sYlEG0TKaX
AaOn15BFDWBtPb9MLkrSF6T4iilbdhbjXMXp9fnbqNaywhVJzzV77OE2Jkwv
cUE2Qj/AwOk1ZD272zQqppeqKIzPDTnzxizf9pXDoPmDirzQ/Nlr2xo/vdrr
HXA9tJDzYnuOr/XfiW4Y4n3l6TXs28rSOw2fXs3L939B6R0uvLqxjnauO97h
JpHzYkOPFTOap9OMKw5/T7eihLPpVRglxXeQptHc6dXeXfhnPPPTC4tQhMX2
bP/W9JpyxfFv6lVjeuU/mBXfQWd69e1O3FTPO9y+enUhI94Rj1CF5Xbs//pu
Zu10q/ieSqdX5beHQuddnl4LPR5ew5pFPwuEKMN6+90A9e1M2+hO8T2WTa/P
H4c6j/7W9Jq+BcGzyfXzDmMXM+rd8AiVwHPVW3revU7jhpLpFR7zXcPL9L80
eDS4ft9h8JpgAXXFc7WDZeI37jRuqDK90s+d/tzweOEud40m6ornKqfLzOOS
xg1J06vvfxC8tWM3vjnqigGKJ+PUA5PGDRWnl+J6jCGMPVFXjLD4Jy8aN5ak
wfCKkcaeqCsmmfsDAI0bIg0R8eyJumKSuT8A0Lgh0hARz56oKyaZ+9srGjdE
GiJ+kbonc2VN/33vfNo73tXcaClciDREe97m649K7Eu7m49C3iHSEE29O3UP
HWCJaffPicgzRBqi3rtP93wAnJp9A++GyEKkIYvyUb7TsbXFbe3AykScIJYQ
YUSUb9eFtJPWdXwAo9DBax278aLj0lC83Qq00zgV0S+ifYP10M7oCm/rnWvP
NLgHIKJeFmjcpvdoJ/VmajHqHKdxdhvjCSppnsrtPcrUWOa9uTdzo35Ou/GM
x4N7KKtz688FFcWNr0/bLBNpqPeEtLJpu4Yayopvi4+eEbQjM2RpGv5KTLNs
ibKi28JTq592KDbMCWKbEtInW6KsmGaTo8+DEUFsXCft62MKygrz7J6KZtwI
Yr8ZVWd3ZXiAssIj8+flEp/9F4KYMp2cpu5vxehAWeGRz0N0tKkDaqeEt9kI
QpQVPtG5E6aX9oZm2XhrJ6Os8InOfT69tNe/zEl7PQhlhU907ldzfGkvzwyy
2BJlhU90bohZJSKdLVFW+ETnhpheItLZEmWFT3RuhDgkpLMlygqf6NwIcUhI
Z0uUFT7RuRHikJDOligrfKJzI8QhIZ0tUVb4ROdGiENCOluirPCJzo3wjw4l
hLMlygqf6NwI00tCOFuirPCJzo0wvSSEsyXKCp/o3AjTS0I4W6Ks8InOjZGH
gHC2RFnhE50bIw8B4WyJssInOjdGHgLC2RJlhU90bow8BISzJcoKn+jcGHkI
CGdLlBU+0bkx8hAQzpYoK3yic2PkISCcLVFW+ETnxshDwP8abktUFT7RuTHy
EDC9tkRV4ROdGyMPAdNrS1QVPtG5MfIQML22RFXhE50bIw+Jt3QYtz02DOn1
Q3sdmIoKx8hD4iwdTrAuG2b0+tBeCuahvDHykPhKh+Orz4YZvV7MrwNQ3Bh5
CHwdBZxenTaM6MX4OgG1jZGHwN5JIC2Iw6uT74iKNf7zEA2wO2obIw+BuZNA
WhDfevdyHFHrBywaYGvUNkYeAmsngXg2vd7ffy9dk0NuI+r59SANsDFqGyMP
gbFwxGOLb7q7uQ2q649bbneHJmobIw+BrXDkY4vp1c1rUC+m19m4xRPkITAV
TuPYorO7eU0qKD/T60Tc4wnyEFgKp+fP9YuX5JXXpIISM71OxD2eIA+BoXBa
vzGisft5jSr60Yt/tXEeapsgD4GdcJp/76Cx+3mN6lN/pteRKG2CQAR2wvk5
uPjF4Qhuo/qtslRtGmFflDZBIAIz4fx+182PXiO4zYrpdTZKmyAQgZVwXsGx
VX/F0iV55jer9/cw+Q5eMY3VYTLqmiAQgZFwor931F+xdE2eOc6qOr1eOZUF
YiKKmiAQgY1wPoeR+GevtYvyzHlYPT960RA7oqgJAhGYCCc4i5heQzgPi+l1
KoqaIBCBhXDCo4jpNYTvsMqTKfrpnOm1J4qaIBCBgXCi76Or5xbfb1/hOyex
zuE3OstWhEUoaoJABAbCiYbS5xeI2SsYX/1cxyRXmRbYGcVNEIhAP5x4JL1e
r/y3Qvy14yrXKTWn18K1YC2qmyAQgX446fAqzCim11WeU+JHr4NR3QSBCPTD
+T2OXvKMejX/Ewz48JzSK+yI4rPLl4RVqG6CQAT64aRTS5xejK8+nkN6Bd+o
ML0OQ3UTBCLQD6dndH19Fsrp1cNzSH8qXG0E6r81qpsgEIF+OB2T6/dl4f8P
ieeQ5Gag/lujugkCERgIJzqqxOlV+OeIKPIcUvNncL9bQwvVTRCIwFo41cOp
/dMZPjyHJNeZ+m+N6iYIRGAtnJ7ptXhJHnlOqVFmz1tDC9VNEIjAWjjyH76Y
Xp1ICS7RuAkCEVgLR5hPzK5+5ASXaNwEgQjMhcOMGoEE4RKNmyAQgblwmF4j
kCBconETBCIwFw7TawQShEs0boJABAbDYXo9R4JwicZNEIiAcLZEWeESjZsY
Esiuqe66r8NRVrhE4yaeB7Lx32I23dbpKCtconETTwPZ+n8mu+eujkdZ4RKN
m3gYSPCfKNow2D13dTyqCpdo3ATTS7Dnro5HVeESjZt4FsiL6QV3qCpconET
TC/Bnrs6HlWFSzRugukl2XNXp6OqcInGTTC9JHvu6nCb9iq2R+MmmF6SPXd1
uE17FdujcRPjptewJRmy6bYiLyP876DXuNrhKPRO4mEgm9+Qe+xM7ZjGDNrt
BC0UP0EgEmfpKB+rsEi7KTEM1UzQ3xKz4egeiNiJdi+jF8VK0L4S/XAOOb9W
7kB3wwPKZYrjna4r+nXFpRpf83rWq6hrdThH3qiruY5jWoegyUJdZ67BHxKR
TA/H1R22iZNSGt5fMEC7q+wgDMHwcGhhfWQXGNiQWEa7a8wgC8HjcGhVe4h0
GMetO+LOnEtYqmJutpCF4Ho443oWkxAyrnt8Yz+/8zkkMmQhkMJZ1rQYi8zh
E2dGiiwEP+GMGlR0ngXUAD5xhKQ6wxh6gKue7yt3Mn83uIyawCcOlF/5+br6
WN+ValnRRIngE537Q/uI34J2EXEHhYNPdO4P7YPfG+16YRiqCZ/o3B9mD/DB
U+fhTpZtG8tQU/hE5/74PsR1BpQjZLIfagqf6NwUQ0tCOPuhpvCJzk0xvSSE
sx9qCp/o3BTTS0I4+6Gm8InOTTG9JISzH2oKn+jcDJEICGc/1BQ+0bkZIhEQ
zn6oKXyiczNEIiCc/VBT+ETnZohEQDj7oabwic7NEImAcPZDTeETnZshEgHh
7Ieawic6N0MkAsLZDzWFT3RuhkgEhLMfagqf6NwM/3NlAdnsh5rCJzo3w/QS
kM1+qCl8onMzTC8B4eyHksInOjfDAS0gnP1QUvhE52Y4oAWEsx9KCp/o3AyR
CKxMr+r/5WsrC3SExOATnZshEomNdF5Mr3H8JvYKCM+uXxiWoLYZIpHYSKd4
Kv15iNPqMq+JvRLC0yrrw2xUNkMkEhPp1I8rptd1PhNLZ5c4vTxuEC0UNkck
EhPplE8kTqp7fEZ2bXp53CEaqGuOSCQW0pGHl/76nHEZWVzs6o/itZ/TsQHq
miMSiYF0KscR0+sml5ElpS5Pr+Cl61aGVahrjkgk+ulUZtT3gzT0dS4jiwtd
+dmr+FrsgrLmyESino74Vw795TnkMrOu6RWMr1XrwjqUNUcmEu10ar8e/HlQ
e3keucws+72hML342WtPlDVHJhLldGp/3HoxvW5zmVnYA/XvZz5PL1waFqGs
OTKR6Kbzqkyv92MU7zqfmcV/1qr9K57603CPsubIRKKazu/kKk+vnw+iz9Hm
M6ro94LFLTC9NkdZc2Qi0UznfU6li3iF06v2y0VU+I6qXux3r/jeIGqoa4Ze
Fymm8zmnitMrfA0n1gWuoxJqTStsjsJmaHaRXjrBQZQsIv4LB0fWRZ6jEktN
K+yNwmZodpFaOuE5lIyoV4nOKj1yHJZca5phbxQ2Q7OLlKdX8KEwvXRW6JXf
wDqH19I1YRlKmyESke70Kg8qRtcjbjMTC05DbI/aZohEpPyzF9NrPK+Z8ZPX
4ShuhkhEaudBeXBFT31RvTu8ZhZ1QdoUfDezP4qbIRKRlelVf9XSVW3A6wn/
2wfFvuCH8QNQ2wyRiPSn15dUI6p3mdcDPv9hPJ1e/DdX9kZtM0QiMnEcML0G
MlHRG3qml9vNoQPFTZFIg4V8mF4Dee342uB6P/l+kc76MBu1TZFIg4V8mF4D
eY1M/MvW+1Hu531R2xSJNFjIh+k10JaRhX8i3XB7+Au1TZFIg4V8mF4DbRlZ
9VeK2Ai1TRBIg4WAmF4D7RkZ0+sA1DZBIA0WAmJ6DbRnZEyvA1DbBIE0WAiI
6TXQrpExvbZHbRME0mAhIHF66S/Pl30TY3RtjvImCKTBQkBMr4FIDE7RugkC
abAQENNrIBKDU7RujNOvxUJA9T9nUL/LSAxO0boxTr8WCwEJf4yngFcRGJyi
dWNjDr+dU7WwN6bXQAQGp2jd2MPD74B/pWthb0yvgQgMTtG6sVHDa99UTeyt
nvDW2U9BYHCK1o0xvVqM723r7KcgMDhF68aYXi077+1IFBRO0boxplfLznvr
98IQ2nWEZzRQ7FkeJ9yWRvamc9jCEu0ehDJ6IPYsjxPurLl70zkGcZaJDYyF
KGXsWR4n3B+PN6d0YgFTjLmtcAPpxx7m8d3NW4fasznNw2SZBVkvobYV7QIa
pVMMl0grNiKPvVsw3xy3uWtOk9TqOhO0wzeCJCJDOmPv9uLW3Mxpic9vYHXa
Ea9y0FZ7jCj9Vv3D3bU96vHAnPtjHu28xtpuQ8+MKLDjLuE2ORDFMmTgHXjA
Det02bMMKKOjVji79fGN8jkz7rb1fnsbXpqG53EYLvf2zYw7KOheht3m9k8D
WjfyOA71ggbmdKeZ7WEMCnqKQQfC3ZNjyoamX8ORx3EsKptw7dkdR8dshoJi
yNEx8JDpX/aot9rB0zjGFqf3ekv7iI7ZDAWF5PEZM+9EonUjz+K4PRGuX2NB
a9QXMOBdYAYFxW3PjqOn5xetG7kdx19fOG5CpG89qtqDljPhXaGGgmKCZ2NK
84Rz624cg/O0XEs6ZjMUFCs9m1aKJ595d2MYEKOXstEpm6GgsILp9cTj6XX3
6/wUSn0BGIuCwgXDh6INT6fXlde6mVcxY8vBUxQUHtk9IrU8m16t570OrIjl
teEGCgqn7J+WS40L4sZPWD5q4GWd6ERB4RStG3o0Qu7MK4fxO1wyJBQUTtG6
oYvT5Oa88h258+UjRUHhFK0bak6W2/Nqn5h32gu+OALgFq0bKpzMzKvEvjs7
FPWEU7Ru6MGo2nhexU7Z5zGoJ5yidQPMqw5n7npj1BNO0boB5lUPMtgL9YRT
tG6AedWDRPZCPeEUrRtgVPUgpL04rWfvN5dOt4cO1DZEGh0IaS8e69n5uxF+
gbI36hoijQ6EtBeH9ez8zT6//98cZQ2RRgelkDiKJvEXZ9/fpfnr9fYoa4g0
OigcBfxTmon8hRn0QL0V6Jj9UdUQaXRYfhIUZldlBRxUN/jLK6xxa3plX4B9
UNUQaXQwO734PvsWf3GFFW5Mr8JXYBtUNUQaHfSmV/i59DqqeIW/uMIVi9Mr
/NjbJtFGVUOk0UNleqUP1F7H9LrKX1zJXKq+KPy9obtNoo2qhkijx/KUkrNH
/NmL3xJd5S+u9o/hX9H3MgyvTVHWEGn0UE5J/rvXl/r6vPEXF9MLf1DWEGn0
UE1JOIt+n6GKlziOS5pLTK/9UdYQafRQTEk8i5het/iNqzGWmF67o6wh0uih
llLrKPp+iqPqGr9xdUyl17sn1iwJK1HWEGn0UBoPHd9HM71u8BrXlZ+pvO4R
IsoaspuGpSNZZS3dvwXi10QXOY3r0i8Ene4RMsoaspuGpSNZf3pJ12d6XeQz
rqvDy+Me0UBZQ3bTsHT/WZhejb99oZ/LvHp+Co9fPXc90EBZQ3bTMHX/2Zhe
4r87RDePeV2aXXxHsyvKGrKbhqn7T3ct4vjioLrMYWDXhhdNsSvKGlL7oaLr
ZfPX0kl7LfXpxY9e1/kLjOGFP6hryPD0ssTAgsupMbxu8JfY9V8butsielDX
ENOri4UFl1LjnLrDX2QML/xBYUNMry4WVixPr1dg/dp88RfRq6r6UoVVYjoK
G1KbXr6qoLfe95VLmXUfaQj5S6g9vWiBI1DZgEqfO7zDlFb7zqmSGNPrDocJ
XZ1emmvFRNQ2oDu9/JRCPSem1zgeE7o2vTRXipkobmBdq9futDVXf8zG9JJf
8Xls9Up92TIhh/cUrqO6gVW9nt1X3m41E9Or+orlS3Ntz8RohRNQ4cCcMNLb
qHj+lk7e2iP6NdOfXssvvy3ChFf0buB5GIWTtfsHreih8ousnN4qC7Cx9e2Q
KLyidwNPw5AHzqvyQPTS5BXRi+z87KG/AoxCKeEVvRt4GEZxtmQjRxhBr5Ly
k0/W+Zz+CjAKpYRX9G5gxfQqjqDi2KqOPP3Zob8CjEIp4RXnUOBZFsWfjIKB
8/14//T6+q1O8nA6HxXorwCjUEp4xTkUGDC90n+4Ef/09NU7vWqPF+ajCv0V
YBBKCa8MnIR2PMriPVTK0+v3o+aUyt4z/bGL6YWBKGW/+neTD2lvzCmiCzzK
4t2FUaTx0Pmq/Jj1/f/ntSi9zkS7668AgxxeynETaA7tfGwjoI9H3fL+4uhd
/nwStmLyQfo3svw9wxeZaWkLa8AQ25Zy0jgxQTtbK4ji41FffL74JU2v6JlX
+tLG5c30rolFYASPpVwwHzzSLst6R2664lEHfL44fJs/H1e6K3mwpwGt9KiV
deAxrUouOtFH85fEhBWbsfn2LnlU60+3hG9z4S09dZqntaJi8qnphnYd6g7c
8jUbbeW5J2F8OiNsjwut4qmrPK3VvWln2Pa0KzcHWb15XfcUz8L4bYOwFy70
hacW8rRWu+YcQ2fQrp05R2bsYpGrPAujVPcrTeCpFJ7WqmvCqbIN7drsb/N6
WVyTmmdhlMpssuYDbLqtp8YeFvN9UcnzjOwe/a1oL8GOZ2GU6mqjyONtuq1L
hp0CqucElcSYVtZZt8JVjXoYRqmQm+a76bbqhtzfJu74fGPaS4BBLnqb5g08
DiOv26b52jh5Z3l+5y6/j28zvjxYYfEeoHkDE8LYNF/rZ3LNw1tQ6y6dyOOa
oc/ETULvBiaEsWm+ts68pxNH/S5UtMk2oEvnLqJ3A4TRa9mZ93zCDLNkv8vt
uzMoWnOb0bsBwug2IqohM2WSARH5cNRmoWPWjUjvBgijW2dUIwbJYLOT8YZI
sNTAu5feDRBGt09UAwbKCKppeEZ2UMR9PwphNDwfMvSnNSQMMzgj7iOG2LgJ
RNeZRRVgFefIBYfHwIA6ESWCExwykrNiYEDh67SmxzY4gWJbxzB2VNEyu6CQ
8IrZFdgoiLGzqvz+K/eDWSgkvOIUCrjNYtSsurB9t1khRiHhFb0b8BHGsFH1
9P+a2bAdQRGFhFf0bsBgGANH1djNGcwKd1BIeEXvBvTDsDqriiudewGsQSHh
Fb0b0AjDx6wqrnv1JTGDr0LqNTzsoQ0Ca24Kh6OqwMYq8JijQtq7C6CKJghM
uyW8j6oCswvDNY4K6eLGwDo0QeDpvfFoSDm7J/2sFCJHhfR5p2AamiAwZPpc
p73tW7yuGwlHhfzcLn7vGwxEEwSYV/322AWcFrJ+F212n0FAiQMMrH5Wt7Rl
2DO5jKte5b3vOkSocOidBkOqxeheTyvDcw7TEop87g15IuobIo1uNqPizLrM
XVpijZleJ6G+IdLoZjMqzqzLnKUlz6XwGVphe5Q3RBrdTEbFd9zXOUqr/UNV
9AytsDvKGyKNbopRVQ+wn0ep4hWO0mr/RjB5hum1N8obotu7qSUlnGA/D1LE
Kxyl1f6LFtPrKJQ3RLd3U0pKOr9+H6SIVzhKK55er8qTyWNLV4ilKG+Ibu+m
k5T43Td/5rjDVWZC/QuP0xCbo7whur2bSlLtb77Xr8k7j6E1ppf0LQ42Qnkj
xNFLIyn5YOKsusVnaEwveO3daYijl970qvwveTiq7vGZWqXaDK+jUN8IcfRS
m161fzDPWXWPn9TeVRcnE8PrHBQ48jCOg+4XA785zJ9cvqIN+ImNn6sQowci
TK9e1qYXx9lNfmJjeCFGE0QGTK9D8rQ4vZYvaAd+cmN4IUYXRB7eFQfdVqrT
q1CoY4IfzU9ujC7EaIQI06uX8j6ZXqOQG7yidyNPz0Cm17rLZ9NLaSnOERy8
oncjTK9eTK9NEBy8ondjT/Ngei27PNNrCIKDV/RubMT0OiJR/emVPXBK9GMR
Gryid2NMr05Gp9cZ4Y9EZvCK1o09zuOUw8DY9OIfU99FZPCK1o0NmV4nRKq7
y+I/mGd63UFk8IrWjT2/lw85DZhemyAyeEXrxsZMrwMytTi9jgl/KBKDU7Ru
jOnVSXWThYx/Hjkj/KFIDE7RurEBp98Z40t9ehUeeh2S/VgkBqdo3QTTq8/q
PUah1qYXf/i6gcTgFK2bGBDIEUeoxvT6vWQxYIbXTUQGp2jdBL867KMzvV7v
D2sv2D/50YgMTtG6iRHn3wlnqNL0EmYUw+seMoNTtG6C6dXH3vQ6IvYJelJL
059pwZaxB7olMeT+OSDV9VvkiHtk5QCyQTvxewirn9d1z0MiXTRicn6vzaR0
5uEg2j2eM7koVSTSRSumU8uje3ABDUo3hcZlDdOqhDOkNIvuIVR19OZxw5Ju
mX8RV9bk7h4pDWDiONmzkoujHWrbrCYsfPRbOqfRPg6R0iWGjwYqiTaTzUvr
pp4cBAchpTJzd3jPiie9M04xsetrd8CKW8MhwuhxfEqr7tIVG1l6PZxg5u2h
fMOYRhg9zklp9/vOxCKwvb3vIisIo8eGKc28vQzHZXhpOMK+99Z6pNHDf0jP
75k9biV/K8aJtrjZpiOTHt5CYkzVbLMRnIbWzexzLs1kOyTGVL/tN4hd0bkZ
7uYelkJiTD1x6r7hHp2bI5M2zSOPYTUUQcApOjdHJm0rjzxm1VREA6fo3By3
c9vEjJhVixEWfKJzc5x9bQMzYlYpIz74ROfmOA3bHkTEsDKGPOETnZvjeGzr
j2jEsKIcM5EvfKJzCwilqR4Rw8obAodPdG4BoTS9IxoxrEhbFQWAT3RuAQdq
HdNqOxQEPtG5BRywbwyr/VEh+ETnFpx54g4ZVEwrf6gYfKJzC7Y/gccNqu2j
OgAlhE90bsk+qYydU59ptU9CoJbwic4tcZnKjEH1O6xKF1u8PcxCLeETnVtS
PbRtmDWnLuzZdkC4YptabrMR9KHgJXaml4FBVVvXkP1Bn6NaSt07oq3hCgUv
mXMfTJtEsvEb+aJvduKnlmJbz2t2GEXBc41Df+3suWRpRusuhqn81FJs9sV3
APRR8Fxyh6waPZcYyEh7CRjETy3Fe8DEfYGVKHhu9SRq0I6jyOq6cJ2fWn7f
DpUbw+7NgkkoeO60SXTHTns5nZ9avm+h8s3kZyMYgoIXnDOEbiOEffip5efe
Y3qBglf8uTmYVnUGQ6FYNzkKjZ+9EKDgRY5uaB3W8uEH4/v8hVYptLt94BkK
XuTvhl5sdT7yaOLXuk+4C61WaG/7wEMUvIxcZIvzkacTf5R8xFloYh+sXw70
UPAycpGtzUceTy/5abQ4Ck0ss6N9YAQKXqaSi6NiaE6vl/ikmwjt8BOaXGU/
+8AQFLxMIxdPR6/C9Kr8zuj3McbXbX4yk2vsZx8YgoKXKeTi6uRdP70+H5Wm
V+vbcgj8ZMbPXghQ8LL1ufg6eZWWWv/Zi18d3ucnM7nKfvaBISh42fJT0NnJ
q7JU6TeHTK/7XGXG9MIvCl6mNL2WXvKJ5WutjqdkcnkK0QpnmVXHl7N94CkK
XrZ6lDgbXqrTS3zCVYpGuMuM6YW/UPCyxbPE2/Ay9LNX8q24rxht8JcZ0wtf
FLxqaTDuhpfu9JKu7SxHE3xkFtad6YUvCl7F9BKtXy7TaxoPmYV15+9e+IOC
V6yfXusuN4DSepvjy12QFjjILCx7tQMc7AMjUfCK5dNr3dVG0Fsw02s4B5m9
p5f0/QvFPwz1rlg9vdZdbAjNFQuHlL8fYi1wkNkrU3nR8pVBD/WuIBiR0Z+9
mF53OMisY3YxvY5DvSsIRmTz714Mr1schNYzvJhep6HeFQQjWhZP/iuj6PiK
1iH+WIYqF6G1RtfPa9YtCOqodwXnoEh5eiVP5x/jgm1i22Uf6EO9K7a5o+dQ
nV7i02uWtZVtYttlH+hDvSu2uaPn0Jtel55GD3KDS/RtBXe0yEo6DK8BCA4u
0bc1JCMxlA7D6zGSg0f0bQ3JSEhnJ1RztdKfc/k27CqCqiEZCenshGpO0BpQ
tmmn18PLOhWQjIR0dkI1b1IdMBaop6+6ALtIRkI6O6GadarDYRvTSjPljf0j
GQnp7OTwalo70HXWY8H1uj2r/LZIRkLj7GTjYmqexW5DVQ1Nki1TJx/78rDw
QTo78VdMzSM0pp2EIu3ov2mnYBLBSEhnJ3rFVD33eillsw2qsxzBSEhnJ61i
zj1+TFiUNOqo3DgEIyKdBcYdzifTriLGoLwXEIyEdD4WnsR40646tNEEdWQj
OSgd5VN6d9rlhVc0Tx3ZSPZJR/nwdkK7SkCKtqwjG4mbdJRP/adWZbTkOsBA
tG0d2UispKM7W960Y3jG/w5wILq2jmwka9JRnUiBBVvVdMAWsR+6to5sJCPS
UR1IoQF5uEYGcIiureOWljTD0ZxGiTWJOEZIcIiureOWlkTpKE4mijQCKcIf
uraOg7GM2bQfcoY/dG0dR+dfmE0noBLwh64VnBsOo+kwFAv+0LWCw8JhUp2L
AsIfulZwQjj3R9UJ6RyDYsIfulawbzgjfqzaN50DUUz4Q9cKdgtnwMiK323B
mrEExYQ/dK1gj3CGjqz4fWctGatRTPhD1wo8hzNpZMVXGLpiKKKY8IeuFTgK
58oPWI9mVnTJAQuHCRQT/tC1ArPhXJ9Vw2ZWtIiB7wZVFBP+0LUCE+Hcn1RT
Zla0sCnvCwW2izmvieEZXSFYG86IMTV/ZsXrnXwJrGK5lmJTL2x4WEPNBXPC
GT6llO5dzouNWK6l1Oe6twB0UfKC31DuhzNrQlm6UW2sAkNYrqXQ+vbuCqxD
xUt+74RqODPHUsHa3feyuzJcZrmWwu3g407BHFS8ZPo4qtHe+DXuFowqH7VM
75Lwc4c3EJ6h4iVMqS7bbARealmaXuEnGmuCFipewoTqcsQmD+GiltmdlQ4v
B3vAOBS8guHUZjQFqnOD/cxKd17wKXfleSi4iHgkBtPh24ubrAdWLmz6o5ft
PWAwCi4iHolqOqUZxU/Ht1nOq6eslPxAVFxEPBK1dCpnGb/bvc9wXj1FpeIn
ouQi4pGopFMfUa/6U2gxnFfv7DK7AUxCzUXEI9FIRxhR4SMcZhcZzqv5LQnf
rhyKmouIR6I9vUpPBS9avjbPDOfV+oma4XUqii4iHonq9BKe4jS7znpe9apS
7mNRdRHxSDTODOGkSqcXpbvAQVzlolLrc1F3EfFI1KaX9BzT6xYXcdV+Xexh
7RiPwouIR6I1vaTnmF63uIirUFQqfTIqLyIeibHfHH6FK+JMu8RuXL8FL35L
wvA6GqUXLYjH8/2nNr06rus2VBVWezD9cbo4vZTWBm3UXjQ/HtffPSpOr+al
3YaqwmoPMrxQR/FFy6aXzzJoLFs4zNLXrVuUe1bTEodX4Q9hbm+lU+Q/TF8W
vZneTuybHk/XQWyWzqrFAy161dJluWY1LLnS7fMNagbMqQazXWvE9Hh833Ja
q+45q5xGqsRqWHKRq8caphs3hB7RjsGy6fH4roPiqpsd7DRSJT7D4kibYcaQ
mUg7Lrumh+O7CsqrFpNzGqkSr2FxoN01b5y0DF72oDw2ND0c31XQX3U9OaeR
KtkorI22MsDsUSRas7GZV3Fteja+a2Bg2dXoDKzNEdJyaeUoymnvnv/FhGx6
NoZa4Qb9ZVej8xqpklf4n7OwSjuktUi6ydVi15uejbd+iamvu5qd30zHWHvY
wSXtJn1sk23MMj8b1wVQXrlwF3pOtdPiow5eaTcqlFB7kWY84t25x22rcdTB
Ge0mhVl0h0gnnvbt6+u+XnzcibSzqNNORoN25nCNDhKtjqdxh/9+bvfWX3Tq
Xd+/0bwA3DX/prZ6znZZvXb5iH5yek8wezoN3aKBvACMNP+mNnHQ3rV67fLh
Petkv7wuk/OpuYNVlwKwAtNLpDgl5GdX/c/8vQ0pAKeYfrD4Pr1sLX3mOGBQ
AXBl1fRyeqZZW/nILJlUABxjesn8rryAQQVgG0wvmd+V/8GwArApppfM38oZ
WABOsGp6zb3IPB6WzrwCcB6ml8zm0plXAE634EBzfWpaWTrzCgBC848330eo
3trvzyu/aQNAr+lnnfPzdOHaH4wrv/kCwD2zTz7vh+vUxTOvAOCmyeeg+6N2
8OKZVwAwxNxT0f+5+3j1zCsAmGDqGbnBKXxj9YwrAJhu5pG5w5nctXzmFQAs
NvEA3eKELi//wbhynQYAWDHvON3juP5dP/MKACxhetUwrwDArnlnrb+TnHkF
AF7MnV5z3nkYxhUAODV1es154weejCt7uwGAc21+Lj8aV68vmzMYAODhF3wX
PJtWhSS2SgcA9uF8eg0fVwAAD5wd4U+nlae9AgCqjB7oj6cU4woAdqZ8wI+b
UkwrADjEugN//JBiXAHAqcaPgJlTimkFAPjLillzn3Y6AACbtOfTN+0UAADO
MKQAAG4xpQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHC2/w+L89SC
     "], {{0, 843}, {1726, 0}}, {0, 1},
     ColorFunction->GrayLevel],
    BoxForm`ImageTag["Bit", ColorSpace -> Automatic, Interleaving -> None],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->{713.7599999999999, Automatic},
   ImageSizeRaw->{1726, 843},
   PlotRange->{{0, 1726}, {0, 843}}]], "Input",
  CellChangeTimes->{{3.669379521391713*^9, 3.669379521398713*^9}},
  Background->RGBColor[0., 1., 0.],ExpressionUUID->
  "29376771-9358-4b43-a86a-fb718e6ee55f"]
}], "Text",
 CellChangeTimes->{{3.668440485013707*^9, 3.6684404882937117`*^9}, {
  3.7956115092907515`*^9, 3.795611510058707*^9}, {3.826347403787404*^9, 
  3.8263475369634514`*^9}},
 FontSize->14,
 Background->RGBColor[
  0., 1., 0.],ExpressionUUID->"a30828a6-7578-4626-bb72-58cb0bda777f"],

Cell[TextData[{
 "La crittazione alla Hill \[EGrave] stata fatta usando una matrice intera \
2x2 invertibile in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Z", "59"], TraditionalForm]],ExpressionUUID->
  "45e0d999-c30f-43a7-80f9-08d78edd86b7"],
 ". Ci sono oltre 12 milioni di tali matrici (scritte a coefficienti in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Z", "59"], TraditionalForm]],ExpressionUUID->
  "17d51ff7-8a8a-4442-88af-f3c21177d418"],
 ") e di esse quasi 12 milioni  sono invertibili in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Z", "59"], TraditionalForm]],ExpressionUUID->
  "4e0257ae-6d24-45d3-adef-44cb9e7cf85c"],
 ". Per\[OGrave] si sa che il messaggio \[EGrave] stato crittato usando una \
matrice invertibile in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Z", "59"], TraditionalForm]],ExpressionUUID->
  "7dedb548-493f-431c-9110-d5be71fd5b15"],
 " il cui determinante \[EGrave] = 1 (mod 59) e tal matrici sono poco pi\
\[UGrave] di 200 mila."
}], "Text",
 CellChangeTimes->{{3.6060432292641287`*^9, 3.606043353855303*^9}, {
   3.6060433852913527`*^9, 3.606043710645811*^9}, {3.6060440283202763`*^9, 
   3.6060440353622875`*^9}, {3.6060440955723715`*^9, 3.60604414402244*^9}, {
   3.6060442457425823`*^9, 3.6060442523525915`*^9}, {3.6060447603833027`*^9, 
   3.606044761523304*^9}, {3.606047633289364*^9, 3.6060477241194906`*^9}, {
   3.606047758499539*^9, 3.606047816819621*^9}, 3.6060487133548784`*^9, {
   3.606048992391279*^9, 3.6060490156013117`*^9}, {3.606049060371374*^9, 
   3.606049060371374*^9}, {3.60604909284142*^9, 3.606049479233962*^9}, {
   3.6684401669932613`*^9, 3.6684401677132626`*^9}, {3.669459466337637*^9, 
   3.669459466774438*^9}, 3.73224966548726*^9, {3.763054516932428*^9, 
   3.763054536974545*^9}, {3.7956115205436397`*^9, 3.7956115441145334`*^9}, {
   3.826341592892668*^9, 3.8263416036136312`*^9}, {3.8263431623811255`*^9, 
   3.826343169448725*^9}, {3.8263432285145817`*^9, 3.8263433042860765`*^9}, {
   3.826343455287897*^9, 3.826343455676139*^9}},
 FontSize->14,
 Background->RGBColor[
  0., 1., 0.],ExpressionUUID->"8094ed08-1e66-47c7-ad3a-f0e851550012"],

Cell["Decrittare la stringa.", "Text",
 CellChangeTimes->{{3.6060432292641287`*^9, 3.606043353855303*^9}, {
   3.6060433852913527`*^9, 3.606043710645811*^9}, {3.6060440283202763`*^9, 
   3.6060440353622875`*^9}, {3.6060440955723715`*^9, 3.60604414402244*^9}, {
   3.6060442457425823`*^9, 3.6060442523525915`*^9}, {3.6060447603833027`*^9, 
   3.606044761523304*^9}, {3.606047633289364*^9, 3.6060477241194906`*^9}, {
   3.606047758499539*^9, 3.606047816819621*^9}, 3.6060487133548784`*^9, {
   3.606048992391279*^9, 3.6060490156013117`*^9}, {3.606049060371374*^9, 
   3.606049060371374*^9}, {3.60604909284142*^9, 3.606049479233962*^9}, {
   3.6684401669932613`*^9, 3.6684401677132626`*^9}, {3.669459466337637*^9, 
   3.669459466774438*^9}, 3.73224966548726*^9, {3.763054516932428*^9, 
   3.763054536974545*^9}, {3.7956115205436397`*^9, 3.7956115441145334`*^9}, {
   3.826341592892668*^9, 3.8263416036136312`*^9}, {3.8263431623811255`*^9, 
   3.826343169448725*^9}, {3.8263432285145817`*^9, 3.8263433366212487`*^9}, {
   3.8263475525270796`*^9, 3.82634756350356*^9}},
 FontSize->14,
 Background->RGBColor[
  0., 1., 0.],ExpressionUUID->"61fbb08c-0870-47db-a3d6-a2bba1f789e8"],

Cell[CellGroupData[{

Cell["Suggerimenti ed osservazioni:", "Subsubsection",
 CellChangeTimes->{{3.6673254396597214`*^9, 3.6673254447397285`*^9}},
 FontSize->14,ExpressionUUID->"af37f961-acae-4c4e-9d3f-cb4f4c0f4821"],

Cell[TextData[{
 "1. Se si fanno le cose bene, la determinazione delle possibili \
\[OpenCurlyDoubleQuote]chiavi private\[CloseCurlyDoubleQuote] (= matrici a \
entrate in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Z", "59"], TraditionalForm]],ExpressionUUID->
  "19ee9a84-0a87-4588-a558-e1608eacbf15"],
 " con det =1 mod 59) richiede al pi\[UGrave] qualche minuto di CPU."
}], "Text",
 CellChangeTimes->{{3.668440570203826*^9, 3.6684405727338295`*^9}, {
   3.7322530550631676`*^9, 3.7322530753141565`*^9}, {3.7322531125704756`*^9, 
   3.7322531262785363`*^9}, {3.763051603558707*^9, 3.7630516115818853`*^9}, {
   3.763054553385558*^9, 3.763054555362091*^9}, {3.763092849706126*^9, 
   3.763092889404551*^9}, {3.8262059479362755`*^9, 3.826205970734358*^9}, {
   3.826343587915668*^9, 3.82634392590969*^9}, 3.826344064128765*^9, {
   3.826347574241699*^9, 3.826347588985813*^9}},
 FontSize->14,ExpressionUUID->"04b4b8b2-32d1-4d71-8db1-7091ae2c2105"],

Cell[TextData[{
 "2. Per generare tutte le possibili decodifiche si possono utilizzare,  ",
 StyleBox["invece delle inverse mod 59 delle \[OpenCurlyDoubleQuote]chiavi \
private\[CloseCurlyDoubleQuote] generate, ",
  FontSlant->"Italic"],
 " le stesse \[OpenCurlyDoubleQuote]chiavi private\[CloseCurlyDoubleQuote] \
generate perch\[EAcute] .... (Questo riduce enormemente il tempo di calcolo, \
che scende a circa un minuto)."
}], "Text",
 CellChangeTimes->{{3.668440570203826*^9, 3.6684405727338295`*^9}, {
  3.7322530550631676`*^9, 3.7322530753141565`*^9}, {3.7322531125704756`*^9, 
  3.7322531262785363`*^9}, {3.763051603558707*^9, 3.7630516115818853`*^9}, {
  3.763054553385558*^9, 3.763054555362091*^9}, {3.763092849706126*^9, 
  3.763092889404551*^9}, {3.8262059479362755`*^9, 3.826205970734358*^9}, {
  3.826343587915668*^9, 3.82634392590969*^9}, {3.826344067208185*^9, 
  3.82634407115254*^9}, {3.826344170420726*^9, 3.826344199006692*^9}, {
  3.826344231714613*^9, 3.8263442576317153`*^9}, {3.826344345541381*^9, 
  3.826344352090249*^9}, {3.826344384751539*^9, 3.826344403393917*^9}, {
  3.8263476023491697`*^9, 3.8263476453951197`*^9}},
 FontSize->14,ExpressionUUID->"b380a678-edf5-4801-9953-a23f98b94594"],

Cell[TextData[{
 "3. Per generare tutte le possibili matrici con componenti in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Z", "59"], TraditionalForm]],ExpressionUUID->
  "c27476b3-2a3c-4493-bf2b-2056fa1beba2"],
 " si pu\[OGrave] fare una Table o usare Tuples"
}], "Text",
 CellChangeTimes->{{3.668440570203826*^9, 3.6684405727338295`*^9}, {
  3.7322530550631676`*^9, 3.7322530753141565`*^9}, {3.7322531125704756`*^9, 
  3.7322531262785363`*^9}, {3.763051603558707*^9, 3.7630516115818853`*^9}, {
  3.763054553385558*^9, 3.763054555362091*^9}, {3.763092849706126*^9, 
  3.763092889404551*^9}, {3.8262059479362755`*^9, 3.826205970734358*^9}, {
  3.826343587915668*^9, 3.82634392590969*^9}, {3.8263440742484446`*^9, 
  3.8263440780978117`*^9}},
 FontSize->14,ExpressionUUID->"9dc93538-81b7-442b-bb95-b4ab7c2bd574"],

Cell["\<\
4. Per individuare il messaggio vero fra i circa 200 mila possibili fate un\
\[CloseCurlyQuote]opportuna analisi dei caratteri che li compongono. Nota: la \
stringa corretta potrebbe non essere esattamente quella che massimizza il \
criterio usato.\
\>", "Text",
 CellChangeTimes->{{3.668440570203826*^9, 3.6684405727338295`*^9}, {
   3.7322530550631676`*^9, 3.7322530753141565`*^9}, {3.7322531125704756`*^9, 
   3.7322531262785363`*^9}, {3.763051603558707*^9, 3.7630516115818853`*^9}, {
   3.763054553385558*^9, 3.763054555362091*^9}, {3.763092849706126*^9, 
   3.763092889404551*^9}, {3.8262059479362755`*^9, 3.826205970734358*^9}, {
   3.826343587915668*^9, 3.82634392590969*^9}, 3.8263440853579865`*^9, {
   3.8263442097184515`*^9, 3.826344216720358*^9}},
 FontSize->14,ExpressionUUID->"0105d1a0-c2e0-4527-81f0-ea45b49050e1"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Soluzione", "Section",
 CellChangeTimes->{{3.667324682717662*^9, 3.6673246884576693`*^9}, {
  3.8252351968100967`*^9, 
  3.825235198281411*^9}},ExpressionUUID->"e8348b9e-0bde-42f8-90a8-\
08a9bd9a88c4"],

Cell["\<\
Vogliamo decrittare il messaggio crittato con metodo di Hill : 

\[OpenCurlyDoubleQuote]adEkLCWJAnBAy@AvyuX,nDT\[CloseCurlyQuote];BULnNtgTJI;\
OCBEXj.URwXdYABKt\[CloseCurlyQuote];kczBKimrhBEnNtgTJI;OCBEXj.URwFOFui.I;\
tMZxYARwiyJZ,zFel,yuLNFO \
MUqXEz,ebt\[CloseCurlyQuote];kczRwLCadvmi.ImOCBWImeARwChjaiyohImeAmZu.MX\
\[CloseCurlyQuote]@ztnN@NRwLCUb.zFWxkebBKxkRwLCUbHgRKhMRDJbULhMczT\
\[CloseCurlyQuote]WJxL;kCzSNUbJbuWjH;cjaiyxbxbBKimrhBExL;kCzSN.zFWxkebh.\
eIlFgYLCEkLCUbEkI;ohMxY,jabVBACzI;j@rOu@@F\[CloseCurlyQuote]@\
rOhMRDClRwrOBKDQBARwnRSNp; \
ieIJjjmhMTgT\[CloseCurlyQuote];BULCzI;j@rOBKI;ClBESwu@luqSjmSNj@rOLCohnNtgTJI;\
OCBEBKt\[CloseCurlyQuote];kczT\[CloseCurlyQuote]k sYnN@NXjbwSNh\
\[CloseCurlyQuote]jaRwnRSNp;iOJD;JBE`SXEgikrlugUXvqjiy \
\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.85832667647949*^9, 3.858326699682187*^9}, {
  3.8583267308822455`*^9, 3.858326804539823*^9}, {3.858329824887825*^9, 
  3.858329839168655*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"d87aa82b-215c-4468-acc4-c76c58c439f6"],

Cell["\<\
Innanzitutto fissiamo la codifica/decodifica iniziale definita nell\
\[CloseCurlyQuote]esercizio. Sappiamo che la codifica ASCII converte le \
maiuscole e le minuscule in questi caratteri:\
\>", "Text",
 CellChangeTimes->{{3.8581476854710793`*^9, 3.8581477348518276`*^9}, {
  3.858147771121648*^9, 3.858147819666649*^9}, {3.858326892094451*^9, 
  3.8583269545128007`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"0e2f33e5-02ad-4e4f-a239-e00aa321a61c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ToCharacterCode", "[", "\"\<abcdefghijklmnopqrstuvwxyz\>\"", "]"}],
   "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{3.858147762797679*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"aa8dcf5b-3f19-4cb3-974e-0e648e453cd2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "97", ",", "98", ",", "99", ",", "100", ",", "101", ",", "102", ",", "103", 
   ",", "104", ",", "105", ",", "106", ",", "107", ",", "108", ",", "109", 
   ",", "110", ",", "111", ",", "112", ",", "113", ",", "114", ",", "115", 
   ",", "116", ",", "117", ",", "118", ",", "119", ",", "120", ",", "121", 
   ",", "122"}], "}"}]], "Output",
 CellChangeTimes->{3.858326987689121*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"7a123f46-013b-49d3-820b-a380d275e43b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToCharacterCode", "[", "\"\<ABCDEFGHIJKLMNOPQRSTUVWXYZ\>\"", 
  "]"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"af783879-03ce-4eb6-b4ca-10f2084c19d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "65", ",", "66", ",", "67", ",", "68", ",", "69", ",", "70", ",", "71", ",",
    "72", ",", "73", ",", "74", ",", "75", ",", "76", ",", "77", ",", "78", 
   ",", "79", ",", "80", ",", "81", ",", "82", ",", "83", ",", "84", ",", 
   "85", ",", "86", ",", "87", ",", "88", ",", "89", ",", "90"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8583270163958273`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"fc6f658a-8425-4e92-9068-ab0c7ba0b041"]
}, Open  ]],

Cell["\<\
Osserviamo che se sottraiamo 64 a ogni numero ASCII, otteniamo la codifica \
iniziale della stringa usata nell\[CloseCurlyQuote]esercizio.
Quindi adesso definiamo le seguenti funzioni:
- Tocc1[stringa] che mi definisce la nuova codifica dei caratteri alfabetici \
della stringa
- Fromcc1[lista] che decodifica la stringa di caratteri alfabetici.\
\>", "Text",
 CellChangeTimes->{{3.858147917465036*^9, 3.858147999052541*^9}, {
  3.8581495476903086`*^9, 3.8581495521621923`*^9}, {3.8581637577883043`*^9, 
  3.858163762731001*^9}, {3.8581828555020638`*^9, 3.858182857202224*^9}, {
  3.858327074039236*^9, 3.858327074523593*^9}, {3.8583271098907623`*^9, 
  3.85832715004912*^9}, {3.8583272282471156`*^9, 3.858327233348313*^9}, {
  3.8583273105372863`*^9, 3.858327312334098*^9}, {3.858327568463008*^9, 
  3.8583276186777716`*^9}, {3.8583276691347604`*^9, 3.8583277392051916`*^9}, {
  3.8583288411936865`*^9, 3.8583288416311927`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"faec54a4-411e-4c54-ae72-1a626fc8b4d3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Tocc1", "[", "str_", "]"}], ":=", 
  RowBox[{
   RowBox[{"ToCharacterCode", "[", "str", "]"}], "-", 
   "64"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Fromcc1", "[", "list_", "]"}], ":=", 
  RowBox[{"FromCharacterCode", "[", 
   RowBox[{"list", "+", "64"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Tocc1", "[", 
  "\"\<ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\>\"", 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.85814820166064*^9, 3.858148223111553*^9}, {
   3.858250941805193*^9, 3.858250991927543*^9}, 3.858252367047694*^9, {
   3.8583273035375347`*^9, 3.8583273052093525`*^9}, 3.8583278035510063`*^9, {
   3.8583898904658756`*^9, 3.8583898949909244`*^9}},
 CellLabel->
  "In[303]:=",ExpressionUUID->"628638dc-ba33-4cd1-b82b-1a02381e6081"],

Cell["\<\
Osserviamo che le maiuscole (da 1 a 26) e minuscule (da 33 a 58) si trovano \
nell\[CloseCurlyQuote]intevallo [ 1 , 58 ]. Di seguito facciamo le \
sostituzioni degli altri 6 caratteri: punto, virgola, spazio, apostrofo, \
accento, punto e virgola.\
\>", "Text",
 CellChangeTimes->{{3.8581517048514423`*^9, 3.8581517246864843`*^9}, {
  3.8581518011448927`*^9, 3.858151801585514*^9}, {3.8581637846199384`*^9, 
  3.8581637850571437`*^9}, {3.858251001113579*^9, 3.858251019674644*^9}, {
  3.8583278491649427`*^9, 3.8583281422995253`*^9}, {3.85832817836292*^9, 
  3.858328179628515*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"66012fd9-7b14-421b-84a5-7d93599a07d5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Tocc", "[", "str_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Tocc1", "[", "str", "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "18"}], "\[Rule]", "27"}], ",", 
     RowBox[{
      RowBox[{"-", "20"}], "->", "28"}], ",", 
     RowBox[{
      RowBox[{"-", "32"}], "->", "29"}], ",", " ", 
     RowBox[{"32", "->", "30"}], ",", 
     RowBox[{
      RowBox[{"-", "25"}], "->", "31"}], ",", " ", 
     RowBox[{
      RowBox[{"-", "5"}], "->", "32"}]}], "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Fromcc", "[", "list_", "]"}], ":=", 
  RowBox[{"Fromcc1", "[", 
   RowBox[{"list", "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"27", "->", 
       RowBox[{"-", "18"}]}], ",", 
      RowBox[{"28", "->", 
       RowBox[{"-", "20"}]}], ",", 
      RowBox[{"29", "->", 
       RowBox[{"-", "32"}]}], ",", 
      RowBox[{"30", "->", "32"}], ",", " ", 
      RowBox[{"31", "->", 
       RowBox[{"-", "25"}]}], ",", " ", 
      RowBox[{"32", "->", 
       RowBox[{"-", "5"}]}]}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.858148338027526*^9, 3.8581483398019066`*^9}, {
  3.85814839514147*^9, 3.8581484758756046`*^9}, {3.8581492690874004`*^9, 
  3.8581493479324875`*^9}, {3.858149623173978*^9, 3.8581496238754516`*^9}, {
  3.8581496601306825`*^9, 3.8581496602891*^9}, {3.8581498165135036`*^9, 
  3.8581498939359136`*^9}, {3.8581499781776752`*^9, 3.8581499914747267`*^9}, {
  3.858150213560296*^9, 3.858150226514862*^9}, {3.8581516595008717`*^9, 
  3.8581516629499493`*^9}},
 CellLabel->
  "In[306]:=",ExpressionUUID->"7f3b0b73-2e5c-442f-ba2c-d27c96b4d128"],

Cell["\<\
Esplicitiamo il messaggio da decrittare e otteniamo la codifica della stringa \
con la funzione appena definita Tocc. Chiamamo alla lista dei numeri che \
dobbiamo decrittare \[OpenCurlyDoubleQuote]lista\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.8581359023390603`*^9, 3.858135919656501*^9}, {
  3.8581496306676283`*^9, 3.8581496309626427`*^9}, {3.858163809897764*^9, 
  3.858163836941786*^9}, {3.85816386758381*^9, 3.858163935895533*^9}, {
  3.8581641597798853`*^9, 3.8581641729902763`*^9}, {3.858164456951854*^9, 
  3.8581644787967052`*^9}, {3.858274155021805*^9, 3.858274176410604*^9}, {
  3.8583287396597247`*^9, 3.858328754430293*^9}, {3.8583288733743534`*^9, 
  3.858328919153904*^9}, {3.858328997223733*^9, 3.8583290032725515`*^9}, {
  3.8583899520323477`*^9, 3.858389957916052*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"ef12252c-9f3a-4778-b70d-0cde381b4a96"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"m", "=", "59"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"n", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "messaggio", "=", 
   "\"\<adEkLCWJAnBAy@AvyuX,nDT';BULnNtgTJI;OCBEXj.URwXdYABKt';\
kczBKimrhBEnNtgTJI;OCBEXj.URwFOFui.I;tMZxYARwiyJZ,zFel,yuLNFO \
MUqXEz,ebt';kczRwLCadvmi.ImOCBWImeARwChjaiyohImeAmZu.MX'@ztnN@NRwLCUb.\
zFWxkebBKxkRwLCUbHgRKhMRDJbULhMczT'WJxL;kCzSNUbJbuWjH;cjaiyxbxbBKimrhBExL;\
kCzSN.zFWxkebh.eIlFgYLCEkLCUbEkI;ohMxY,jabVBACzI;j@rOu@@F'@\
rOhMRDClRwrOBKDQBARwnRSNp; \
ieIJjjmhMTgT';BULCzI;j@rOBKI;ClBESwu@luqSjmSNj@rOLCohnNtgTJI;OCBEBKt';kczT'k \
sYnN@NXjbwSNh'jaRwnRSNp;iOJD;JBE`SXEgikrlugUXvqjiy\>\""}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.858135926709567*^9, 3.8581359298988104`*^9}, {
   3.858138571580151*^9, 3.858138589585583*^9}, {3.858142659564784*^9, 
   3.858142663252596*^9}, 3.858142699205314*^9, {3.8581639999559765`*^9, 
   3.858164008846301*^9}, {3.858165655126068*^9, 3.8581656614189606`*^9}, {
   3.8583310312901*^9, 3.8583310322900567`*^9}, {3.858347575423703*^9, 
   3.8583475759080615`*^9}, {3.858348810359448*^9, 3.8583488108750553`*^9}, {
   3.8583492782495556`*^9, 3.858349292061142*^9}},
 CellLabel->
  "In[308]:=",ExpressionUUID->"77d691fa-6a70-4f4a-ada8-6e81cdada4da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lista", "=", 
   RowBox[{"Tocc", "[", "messaggio", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.858163943197294*^9, 3.858163955170195*^9}, {
   3.8581640297189665`*^9, 3.858164083422482*^9}, {3.8581641413863945`*^9, 
   3.858164147214426*^9}, {3.858164449694047*^9, 3.8581644717430477`*^9}, {
   3.8581654819729376`*^9, 3.8581655070291853`*^9}, 3.858165537465448*^9, 
   3.858165597846978*^9, 3.8581656678550053`*^9, {3.858183553116354*^9, 
   3.8581835547878723`*^9}, {3.858274271529353*^9, 3.858274300081698*^9}, {
   3.8583051119218683`*^9, 3.85830514278547*^9}, 3.8583482207057323`*^9, 
   3.8583482593609343`*^9, 3.8583511610753655`*^9},
 CellLabel->
  "In[311]:=",ExpressionUUID->"566f9479-593b-497f-8578-addb9399b30f"],

Cell[TextData[{
 "Il passo seguente \[EGrave] partizionare la precedente lista dei numeri in \
una lista di liste di 2 elementi ciascuna poich\[EGrave] sappiamo dal testo \
dell\[CloseCurlyQuote]esercizio che per crittare il messaggio \[EGrave] stata \
usata una matrice 2\[Times]2. In questa forma potremmo poi fare la decodifica \
di Hill, cio\[EGrave] moltiplicare ogni vettore 2 -dimensionale  per l\
\[CloseCurlyQuote]inversa modulo 59 della matrice \
\[OpenCurlyDoubleQuote]chiave privata\[CloseCurlyDoubleQuote] (intendiamo \
quella usata per crittare il messaggio).\nDefiniamo la funzione partiziona[ \
lista, n ]. All\[CloseCurlyQuote] interno di questa funzione, si trovano vari \
comandi:\n-Length[lista] ci d\[AGrave] la lunghezza della lista.\n-Con \
Ceiling ,  otteniamo il intero pi\[UGrave] piccolo maggiore di \
Length[lista]/n\n-Con PadRigth completa  la \[OpenCurlyDoubleQuote]lista\
\[CloseCurlyDoubleQuote]  aggiungendo  tanti 29 (spazi)",
 StyleBox["   ",
  FontWeight->"Bold"],
 "quanti ne servono per arrivare a lunghezza richiesta, che come abbiamo \
visto in classe \[EGrave] ",
 StyleBox["(Il piu` piccolo intero \[GreaterEqual] ",
  FontWeight->"Bold",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"Length", "[", "lista", "]"}], "n"], TraditionalForm]],
  FontWeight->"Bold",
  FontColor->GrayLevel[0],ExpressionUUID->
  "c26f9593-1a5a-47c9-8aa8-967d0a7a3a62"],
 StyleBox[") n  ",
  FontWeight->"Bold",
  FontColor->GrayLevel[0]],
 StyleBox["( con n lunghezza delle sottoliste che si devono creare )",
  FontColor->GrayLevel[0]],
 StyleBox[" ",
  FontWeight->"Bold",
  FontColor->GrayLevel[0]],
 StyleBox["moltipliamo per n perch\[EAcute] ci serve che la nuova lista (con \
gli spazi aggiunti) abbia una lunghezza che sia multiplo di n.",
  FontColor->GrayLevel[0]],
 StyleBox["\n-",
  FontWeight->"Bold",
  FontColor->GrayLevel[0]],
 StyleBox["Finalmente, con Partition dividiamo la lista appena ottenuta di \
dimensione esatta, in sottoliste di due elementi.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.858164198121134*^9, 3.8581643033428087`*^9}, {
   3.8581643707871304`*^9, 3.858164393110034*^9}, {3.858164530186161*^9, 
   3.8581645475850725`*^9}, {3.8581645935026083`*^9, 3.858164759729862*^9}, {
   3.858164792751378*^9, 3.858165042149809*^9}, {3.858165072895446*^9, 
   3.858165080121809*^9}, {3.858165305510893*^9, 3.8581653160727158`*^9}, {
   3.8581653693214164`*^9, 3.85816543338628*^9}, {3.8582742410844603`*^9, 
   3.8582742479472375`*^9}, {3.858329056801581*^9, 3.858329101383932*^9}, {
   3.8583297209801083`*^9, 3.8583297984585977`*^9}, {3.8583298598694396`*^9, 
   3.8583299536786633`*^9}, {3.8583300579898777`*^9, 3.858330072485734*^9}, {
   3.858330108087638*^9, 3.8583301385124664`*^9}, {3.858330170824005*^9, 
   3.8583302107801075`*^9}, 3.858330288254099*^9, 3.8583303567036023`*^9, {
   3.8583307750709763`*^9, 3.8583308338875003`*^9}, {3.8583308935210958`*^9, 
   3.8583309153555775`*^9}, {3.8583493187266827`*^9, 3.858349320164112*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"4e69844c-d5b2-45ac-9c0c-24690c8a2cd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"partiziona", "[", 
   RowBox[{"ls_", ",", "n_"}], "]"}], ":=", " ", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"PadRight", "[", 
     RowBox[{"ls", ",", 
      RowBox[{"n", " ", 
       RowBox[{"Ceiling", "[", 
        FractionBox[
         RowBox[{"Length", "[", "ls", "]"}], "n"], "]"}]}], ",", "29"}], 
     "]"}], ",", "n"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8583306063341875`*^9, 3.8583307005151978`*^9}},
 CellLabel->
  "In[312]:=",ExpressionUUID->"90c39f4f-e759-4591-a557-e36e865a8d52"],

Cell[BoxData[
 RowBox[{
  RowBox[{"vettori", "=", 
   RowBox[{"partiziona", "[", 
    RowBox[{"lista", ",", "n"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8581654630254803`*^9, 3.8581654733614445`*^9}, {
   3.85816561790888*^9, 3.8581656321087027`*^9}, {3.8581656815002604`*^9, 
   3.858165682105934*^9}, 3.8581663680051107`*^9, {3.8581665162603254`*^9, 
   3.8581665186589975`*^9}, {3.858166951818765*^9, 3.8581669602241135`*^9}, {
   3.8582742684321003`*^9, 3.858274294032812*^9}, {3.8583311032503147`*^9, 
   3.858331103406554*^9}, {3.8583900422759*^9, 3.8583900547682242`*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"e1c97f9f-fd47-400a-b75f-20112563c9f0"],

Cell[TextData[{
 "Definiamo ora la funzione di decodifica. \nPer farlo possiamo usare  le \
stesse \[OpenCurlyDoubleQuote]chiavi private\[CloseCurlyDoubleQuote] che \
genereremo in seguito invece delle inverse mod 59 ",
 "delle",
 StyleBox[" \[OpenCurlyDoubleQuote]chiavi private\[CloseCurlyDoubleQuote] ,",
  FontSlant->"Italic"],
 " poich\[EGrave] le inverse hanno comunque determinante congruo a 1. \
Infatti, sia A una chiave (secondo la consegna \
dell\[CloseCurlyQuote]esercizio ha Det[A]=1 modulo 59), allora Det [ A ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["A", 
      RowBox[{"-", "1"}]], "]"}], "="}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "0197f3f8-d6ad-4659-a4ac-1c1f7d755594"],
 " Det[matrice identit\[AGrave]]= 1 = Det[A] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Det", "[", 
    SuperscriptBox["A", 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4ad5c6ac-e143-4106-93d2-d1855cc4499c"],
 "] \[Implies] ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Det", "[", 
    SuperscriptBox["A", 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "014fc07e-b466-43ff-a622-0c222cccbd6e"],
 "]  \[EGrave] l\[CloseCurlyQuote]inverso di 1 modulo 59 perci\[OGrave] 1, \
quindi l\[CloseCurlyQuote]inversa si trova sempre \
nell\[CloseCurlyQuote]insieme delle matrici con determinante 1. ",
 StyleBox["In questo modo si riduce enormemente il tempo di calcolo.",
  FontWeight->"Normal"],
 "\nQuello che facciamo adesso \[EGrave] mappare   v \[Rule]  ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["f",
     FontSlant->"Plain"], 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "2ad8d71e-cbc1-4859-a70f-348fc14b8421"],
 "(v,A,m) ,  cio\[EGrave] applichiamo la matrice A  2\[Times]2 (una delle \
possibili chiavi) a ogni vettore nella lista \[OpenCurlyDoubleQuote]vettori\
\[CloseCurlyDoubleQuote], dopo facciamo  modulo m=59.\nDopo  usiamo il \
comando Flatten per rimuovere tutte le \[OpenCurlyDoubleQuote]parentesi \
interne\[CloseCurlyDoubleQuote] della lista.\nE infine applichiamo a quest\
\[CloseCurlyQuote]ultima lista  la funzione Fromcc per ottenere il messagio \
decrittato:"
}], "Text",
 CellChangeTimes->{
  3.8581667217312317`*^9, {3.85816697681314*^9, 3.858167066962693*^9}, {
   3.8581671499509115`*^9, 3.8581672807958956`*^9}, {3.8581674479989996`*^9, 
   3.858167448571074*^9}, {3.858183432016879*^9, 3.8581834546098623`*^9}, {
   3.8582743368580365`*^9, 3.858274375885417*^9}, {3.8582744094159117`*^9, 
   3.858274446889702*^9}, {3.8583311590275545`*^9, 3.8583311896499863`*^9}, {
   3.8583312397155466`*^9, 3.858331249531232*^9}, {3.8583315513197575`*^9, 
   3.8583315856734314`*^9}, {3.858331646410776*^9, 3.858332102851366*^9}, {
   3.8583321427044497`*^9, 3.858332212363628*^9}, {3.8583322531507297`*^9, 
   3.858332309294471*^9}, {3.858332350872401*^9, 3.8583324110869875`*^9}, {
   3.8583326331578765`*^9, 3.8583326360171328`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"9a410ea8-ae9d-4ec0-9d0c-6f9088fc195d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HillDecritta", "[", 
   RowBox[{"vettori_", ",", "A_", ",", "m_"}], "]"}], ":=", " ", 
  RowBox[{"Fromcc", "@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{
         RowBox[{"A", ".", "#"}], ",", "m"}], "]"}], "&"}], ",", "vettori"}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8581666518550186`*^9, 3.858166652005113*^9}, {
   3.8581668433746033`*^9, 3.8581669279348316`*^9}, 3.8581669652867126`*^9, {
   3.8581674518273177`*^9, 3.8581674805488577`*^9}, 3.8581832796486235`*^9, {
   3.858183458492487*^9, 3.8581835222960386`*^9}, {3.858255769654791*^9, 
   3.858255772439823*^9}, {3.8583324497075505`*^9, 3.8583325527384663`*^9}, {
   3.8583364188349304`*^9, 3.8583364200067635`*^9}},
 CellLabel->
  "In[318]:=",ExpressionUUID->"4736ab38-5c69-4354-9b68-9dbe517e8148"],

Cell[TextData[{
 "Adesso vorremmo determinare le possibili chiavi private:  matrici con \
entrate in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Z", "59"], TraditionalForm]],ExpressionUUID->
  "f6629b6c-b584-4e3b-8900-b0d1b0feb7fd"],
 " con det =1 mod 59\nPer generare tutte le possibili matrici con componenti \
in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Z", "59"], TraditionalForm]],ExpressionUUID->
  "af5fb149-cdef-42f8-b847-ad6bebbdf175"],
 " si pu\[OGrave] fare una Table. "
}], "Text",
 CellChangeTimes->{{3.8581673076661005`*^9, 3.8581673306805396`*^9}, {
   3.858167387404611*^9, 3.85816739422155*^9}, {3.858167429440339*^9, 
   3.858167446146741*^9}, 3.858247975525196*^9, {3.858332698911886*^9, 
   3.858332699693128*^9}, 3.8583328606283*^9},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"4ef9f4d0-5098-48ae-8a3b-1079b1bfe7ab"],

Cell["\<\
Per prima cosa notiamo che il determinante di una matrice 2\[Times]2 generica \
{{a,b},{c,d}} \[EGrave] pari ad a\[Times]d-b\[Times]c.
Perci\[OGrave] definiamo tutti i possibili valori delle coppie (a\[Times]d, b\
\[Times]c) .
Poich\[EGrave] a\[Times]d = b\[Times]c +1 modulo 59, saranno coppie di numeri \
consecutivi\
\>", "Text",
 CellChangeTimes->{{3.858332867659317*^9, 3.858333143833191*^9}, {
  3.858333189664774*^9, 3.8583332011943903`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"7f1fda2f-efb9-45d7-b88e-1e5a5e974b66"],

Cell[BoxData[
 RowBox[{"prodotticoppie", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"n", "+", "1"}], ",", "n"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", "58"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8582352460505733`*^9, 3.8582352480661254`*^9}, {
  3.8582352785962825`*^9, 3.8582353441564355`*^9}, {3.8582361330048666`*^9, 
  3.8582361382078104`*^9}},
 CellLabel->
  "In[319]:=",ExpressionUUID->"327db2ed-1cf9-4aec-b278-3329f6e18bcd"],

Cell[TextData[{
 "59 \[EGrave] un numero primo quindi tutti gli elementi tranne 0 sono \
invertibili. \nPer tutte le coppie trovate sopra che non contengono lo 0, \
noto che se a\[Times]d = n (diverso da 0, signidifica sia a che d diversi da \
0), se fisso a=n1 (n1 qualsiasi da 1 a 59) allora d= ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Times]", 
    SuperscriptBox["a", 
     RowBox[{"-", "1"}]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "11433142-eb76-4adb-a146-16a355138f18"],
 " (esiste sicuramente poich\[EGrave] ogni elemento tranne 0 \[EGrave] \
invertibile). Lo stesso identico ragionamento viene fatto con b\[Times]c.\n\
Quindi le matrici di decrittazione possibili che non contengono zeri si \
creano fissando a e b e ricavando in funzione di essi c e d, facciamo il \
procedimento mostrato sopra mappandolo sulla lista di tutti i prodotti delle \
coppie tranne il primo e l\[CloseCurlyQuote]ultimo che contengono zeri modulo \
59. Per fare gli inversi utilizziamo PowerMod con potenza -1.\nDove \
necessario aggiungiamo Mod per lasciare le entrate delle matrici modulo 59.\n\
Infine applichiamo un Flatten[lista,2] cos\[IGrave] possiamo ottenere una \
lista di matrici, togliendo i livelli addizionali che si erano creati."
}], "Text",
 CellChangeTimes->{{3.8582359169735813`*^9, 3.858235947466773*^9}, {
   3.858236313337654*^9, 3.858236340039817*^9}, {3.8582373599398994`*^9, 
   3.858237362142949*^9}, 3.8583335391805725`*^9, {3.8583336117926393`*^9, 
   3.858333662574499*^9}, {3.8583336950904465`*^9, 3.858334021089591*^9}, {
   3.858334068990769*^9, 3.8583340699133263`*^9}, {3.8583341298177567`*^9, 
   3.8583342869094486`*^9}, {3.858334326943986*^9, 3.858334411774852*^9}, {
   3.8583344675097694`*^9, 3.858334505121828*^9}, {3.8583357336807137`*^9, 
   3.85833575879722*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"a0a61049-34ae-4c58-8e9b-554d49497da1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"matricipossibili1", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "b"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"PowerMod", "[", 
               RowBox[{"b", ",", 
                RowBox[{"-", "1"}], ",", "59"}], "]"}], "*", 
              RowBox[{
               RowBox[{"prodotticoppie", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", "59"}], "]"}], ",", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"PowerMod", "[", 
               RowBox[{"a", ",", 
                RowBox[{"-", "1"}], ",", "59"}], "]"}], "*", 
              RowBox[{
               RowBox[{"prodotticoppie", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", "59"}], "]"}]}], 
          "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "2", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"a", ",", "1", ",", "58"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"b", ",", "1", ",", "58"}], "}"}]}], "]"}], ",", "2"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8582359668254595`*^9, 3.858236032213743*^9}, {
   3.8582364456922846`*^9, 3.8582367739555845`*^9}, 3.8582375258338895`*^9, {
   3.8582405125034227`*^9, 3.858240521963159*^9}, 3.8583335983733664`*^9, {
   3.858335573863097*^9, 3.858335594797147*^9}, {3.8583356559847794`*^9, 
   3.858335684410986*^9}},
 CellLabel->
  "In[320]:=",ExpressionUUID->"017900af-4ffd-4046-88e7-cc63778fad89"],

Cell["\<\
Aggiungiamo gli ultimi 2 casi, i prodotti che contengono lo 0.
Qui fissiamo uno degli elementi della coppia che d\[AGrave] come prodotto 0 \
in 0 e faccio liberamente variare l\[CloseCurlyQuote]altro parametro in \
Range[0,59], poich\[EGrave] ogni numero motiplicato per 0 d\[AGrave] 0.
Quando fisser\[OGrave] il secondo elemento (della coppia con prodotto 0) in 0 \
non bisogna far assumere al primo il valore 0 poich\[EGrave] lo abbiamo gi\
\[AGrave] valutato.
Per quanto riguarda la coppia con prodotto diverso diverso da 0 si procede \
come si \[EGrave] fatto in precedenza.
Infine unisco tutte le liste delle matrici possibili, con opportuni Flatten.
Notiamo che le matrici ottenute sono poco pi\[UGrave] di 200 000 .\
\>", "Text",
 CellChangeTimes->{{3.858237446202426*^9, 3.8582374568114157`*^9}, {
  3.8583345717502546`*^9, 3.8583345727658405`*^9}, {3.858334672730773*^9, 
  3.8583351657377267`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"d9510971-c03a-44cd-899e-3a1d194c2dd0"],

Cell[BoxData[
 RowBox[{"matricipossibili", "=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"c", ",", 
            RowBox[{"PowerMod", "[", 
             RowBox[{"a", ",", 
              RowBox[{"-", "1"}], ",", "59"}], "]"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"a", ",", "1", ",", "58"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"c", ",", "0", ",", "58"}], "}"}]}], "]"}], ",", "1"}], 
     "]"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", "b"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"PowerMod", "[", 
             RowBox[{"a", ",", 
              RowBox[{"-", "1"}], ",", "59"}], "]"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"a", ",", "1", ",", "58"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"b", ",", "1", ",", "58"}], "}"}]}], "]"}], ",", "1"}], 
     "]"}], ",", "matricipossibili1", ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "b"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Mod", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"PowerMod", "[", 
                RowBox[{"b", ",", 
                 RowBox[{"-", "1"}], ",", "59"}], "]"}], "*", "58"}], ",", 
              "59"}], "]"}], ",", "d"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"b", ",", "1", ",", "58"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"d", ",", "0", ",", "58"}], "}"}]}], "]"}], ",", "1"}], 
     "]"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", "b"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Mod", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"PowerMod", "[", 
                RowBox[{"b", ",", 
                 RowBox[{"-", "1"}], ",", "59"}], "]"}], "*", "58"}], ",", 
              "59"}], "]"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"b", ",", "1", ",", "58"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"a", ",", "0", ",", "58"}], "}"}]}], "]"}], ",", "1"}], 
     "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8582375200059586`*^9, 3.858237540725246*^9}, {
   3.858237664869647*^9, 3.8582376860876374`*^9}, 3.8582377231019535`*^9, {
   3.8582377557882843`*^9, 3.858237901702667*^9}, {3.858241108898652*^9, 
   3.858241146924165*^9}, {3.8582411811221066`*^9, 3.858241285445574*^9}, {
   3.8582413206760683`*^9, 3.85824142385201*^9}, {3.8583357765290203`*^9, 
   3.8583357989069896`*^9}, {3.8583358329852*^9, 3.8583358345782685`*^9}},
 CellLabel->
  "In[321]:=",ExpressionUUID->"aeac8e25-6c5e-46ca-81dd-fbbd3cc6af0a"],

Cell[BoxData[
 RowBox[{"Length", "[", "matricipossibili", "]"}]], "Input",
 CellChangeTimes->{{3.8582401667824144`*^9, 3.858240174822471*^9}, {
   3.858240946420452*^9, 3.8582409628092804`*^9}, 3.858241459882603*^9},
 CellLabel->
  "In[265]:=",ExpressionUUID->"71d92492-bc31-48e0-9775-98f7b7699608"],

Cell[TextData[{
 "Adesso abbiamo tutte la matrici possibili. Mappamo A \[Rule]  ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["f",
     FontSlant->"Plain"], 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "a9c89c36-ed49-4f59-b809-6cc65b704a6f"],
 "(v,A,m)  dove ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["f",
     FontSlant->"Plain"], 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "ff774bae-997e-48b0-931b-5e1d3d35df8d"],
 " \[EGrave] la funzione HillDecritta definita prima, m \[EGrave] il modulo, \
A \[EGrave] una matrice della lista \[OpenCurlyDoubleQuote]matricipossibili\
\[CloseCurlyDoubleQuote] e v \[EGrave] la lista \
\[OpenCurlyDoubleQuote]vettori\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{
  3.858247583055664*^9, {3.858247695718604*^9, 3.8582477054694166`*^9}, {
   3.8582478005852575`*^9, 3.858247833369973*^9}, {3.858247900835782*^9, 
   3.8582479421613445`*^9}, 3.858248117224616*^9, {3.8583365945152373`*^9, 
   3.8583366008327417`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"327ed078-e271-4133-93ae-3841d99c3eb1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"messaggi", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"HillDecritta", "[", 
      RowBox[{"vettori", ",", "#", ",", "m"}], "]"}], " ", "&"}], ",", 
    "matricipossibili"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8582481206952744`*^9, 3.8582481214778786`*^9}, {
  3.8582484575600634`*^9, 3.8582485713988867`*^9}, {3.8582489210559916`*^9, 
  3.8582489234462943`*^9}, {3.858276473931327*^9, 3.8582764954094267`*^9}, {
  3.858336289518362*^9, 3.8583363175052834`*^9}, {3.8583363642368045`*^9, 
  3.8583363867802353`*^9}, {3.858336429340128*^9, 3.858336454577108*^9}},
 CellLabel->
  "In[322]:=",ExpressionUUID->"31970c8a-d294-4525-8346-bc9658c69c5b"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           
           RowBox[{"\<\"adEkLCWJAnBAy@AvyuX,nDT';BULnNtgTJI;OCBEXj.URwXdYABKt'\
;kczBKimrhBEnNtgTJI;OCBEXj.URwFOFui.I;tMZxYARwiyJZ,zFel,yuLNFO \
MUqXEz,ebt';kczRwLCadvmi.ImOCBWImeARwChjaiyohImeAmZu.MX'@ztnN@NRwLCUb.\
zFWxkebBKxkRwLCUbHgRKhMRDJbULh\"\>", 
            "\[Ellipsis]", \
"\<\"ExL;kCzSN.zFWxkebh.eIlFgYLCEkLCUbEkI;ohMxY,jabVBACzI;j@rOu@@F'@\
rOhMRDClRwrOBKDQBARwnRSNp; \
ieIJjjmhMTgT';BULCzI;j@rOBKI;ClBESwu@luqSjmSNj@rOLCohnNtgTJI;OCBEBKt';kczT'k \
sYnN@NXjbwSNh'jaRwnRSNp;iOJD;JBE`SXEgikrlugUXvqjiy\"\>"}], ",", 
           TemplateBox[{"205376"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"\<\"\"\>", "\[Ellipsis]", "\<\"\"\>"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{53.208984375, {2., 7.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{64.08544921875, {0., 7.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 322, 33015846223482588523, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{53.1123046875, {0., 7.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 322, 33015846223482588523, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{102.30029296875, {2., 7.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 322, 33015846223482588523, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{124.74755859375, {0., 7.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[33015846223482588523 === $SessionID, 
   Out[322], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.858336542957688*^9, 3.8583379166131*^9, 
  3.8583386876817217`*^9, 3.8583475929419394`*^9, 3.858347722549637*^9, 
  3.8583484630327644`*^9, 3.8583502928646555`*^9, 3.8583512833657055`*^9, 
  3.8583522004917107`*^9, 3.8583902120905533`*^9},
 CellLabel->
  "Out[322]=",ExpressionUUID->"95c577d5-d571-4d6e-a81c-4e48e59e91ae"]
}, Open  ]],

Cell["\<\
Wolfram Mathematica richiede di aprossimatamente 1 minuto e 38 secondi per \
calcolare tutti i possibli messaggi. Ci manca soltanto determinare il nostro \
messaggio tra questi mille e mille di messaggi. Proviamo a identificare il \
nostro testo seguendo questo criterio:  contamo il numero di carattere vocali \
e quelli spazi in bianco e mettiamo ogni cantit\[AGrave] in uno 2-vettore.
Questo lo facciamo con il comando StringCount , e lo applichiamo ai messaggi.

Chiamamo \[OpenCurlyDoubleQuote]sel\[CloseCurlyDoubleQuote] a la funzione che \
fa questi  azioni:\
\>", "Text",
 CellChangeTimes->{{3.8582489351672487`*^9, 3.8582490540430317`*^9}, {
   3.858249999887307*^9, 3.8582500303029423`*^9}, 3.858250862563309*^9, {
   3.858251046149373*^9, 3.8582510786573133`*^9}, {3.858251135629288*^9, 
   3.8582511739435477`*^9}, {3.8582523852329564`*^9, 3.85825238871101*^9}, {
   3.8582524253705792`*^9, 3.8582524332629147`*^9}, {3.858252498229166*^9, 
   3.858252517473728*^9}, 3.8582525937321477`*^9, {3.8582527453363457`*^9, 
   3.858252813850152*^9}, {3.8582749596966577`*^9, 3.8582749829631944`*^9}, 
   3.8583052436704473`*^9, {3.8583374306952777`*^9, 3.858337554138362*^9}, {
   3.858351632669038*^9, 3.8583516401794395`*^9}, 3.8583516985960426`*^9, {
   3.858351788966566*^9, 3.85835185056929*^9}, {3.8583519346848783`*^9, 
   3.858351944138088*^9}, {3.8583520231621275`*^9, 3.858352052333521*^9}, {
   3.8583534984869995`*^9, 3.8583535649392514`*^9}, {3.858353609208419*^9, 
   3.8583536456656*^9}, {3.8583536766154313`*^9, 3.8583536924583206`*^9}, {
   3.8583537227630606`*^9, 3.858353740844387*^9}, {3.858353788107899*^9, 
   3.858353812512026*^9}, 3.858389487848559*^9},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"7d45d9c2-08fa-48a6-894c-4cb420080bb2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sel", "[", "str_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"StringCount", "[", 
     RowBox[{"str", ",", " ", 
      RowBox[{"{", 
       RowBox[{
       "\"\<a\>\"", ",", " ", "\"\<e\>\"", ",", "\"\<i\>\"", ",", " ", 
        "\"\<o\>\"", ",", " ", "\"\<u\>\""}], " ", "}"}]}], "]"}], ",", 
    RowBox[{"StringCount", "[", 
     RowBox[{"str", ",", " ", 
      RowBox[{"{", "\"\< \>\"", " ", "}"}]}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8583503174194765`*^9, 3.8583503707369227`*^9}, 
   3.858350401255778*^9, {3.8583504377457433`*^9, 3.8583504685469475`*^9}, {
   3.8583506504952836`*^9, 3.8583506587027493`*^9}, {3.858355685870525*^9, 
   3.858355693165408*^9}, {3.8583557419804754`*^9, 3.8583557457495775`*^9}, {
   3.858389726651329*^9, 3.8583897457379923`*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"08e97b8e-bd61-4643-9d94-78516b73a411"],

Cell["\<\
Adesso la mappiamo sulla lista delle stringhe decodificate da \
\[OpenCurlyDoubleQuote]HillDecritta\[CloseCurlyDoubleQuote]. \
\>", "Text",
 CellChangeTimes->{
  3.8582513756481676`*^9, {3.858251644695826*^9, 3.8582516697633295`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"9eb567ff-e36f-48f4-9ea1-a271d3af1535"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numLettere1", "=", 
   RowBox[{"Map", "[", " ", 
    RowBox[{"sel", ",", "messaggi"}], " ", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8582517050607395`*^9, 3.8582517068801384`*^9}, {
   3.858251839945548*^9, 3.8582518643445334`*^9}, 3.8582529600996275`*^9, 
   3.858254380490468*^9, 3.8582545099262304`*^9},
 CellLabel->
  "In[324]:=",ExpressionUUID->"4858e738-ce2f-46da-885e-1efa6ceca105"],

Cell[TextData[{
 "Ordiniamo quest\[CloseCurlyQuote]ultimo output in ordine crescente con ",
 StyleBox["Sort ",
  FontWeight->"Bold"],
 "(per defetto ordina la lista in ordine lexico grafico, e di questa forma \
ordiniamo i messaggi dando preferenza a avere pi\[UGrave] vocali che spazi in \
bianco)"
}], "Text",
 CellChangeTimes->{{3.858337926564971*^9, 3.8583379577695055`*^9}, {
  3.8583513673560953`*^9, 3.8583513865553775`*^9}, {3.8583518624142923`*^9, 
  3.8583519064710283`*^9}, {3.858390196545312*^9, 3.8583901985660086`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"d92030bc-c55b-4b3a-8309-ce548c83fdf3"],

Cell[BoxData[
 RowBox[{"numLettere2", "=", 
  RowBox[{"Sort", "@", "numLettere1"}]}]], "Input",
 CellChangeTimes->{{3.8583098468907766`*^9, 3.8583098595534315`*^9}, {
   3.8583377716512103`*^9, 3.8583377733213067`*^9}, 3.8583378896051702`*^9},
 CellLabel->
  "In[325]:=",ExpressionUUID->"bf36d309-10f8-4e7e-927b-8c78587f0e37"],

Cell["\<\
Dobbiamo ancora scoprire il nostro messaggio. Seguendo il punto 4 di \
Suggerimenti ed osservazioni, dobbiamo scegliere un criterio per \
\[OpenCurlyDoubleQuote]riconoscere\[CloseCurlyDoubleQuote] il nostro \
messaggio. Noi abbiamo scelto di prendere prima i messaggi con pi\[UGrave] \
vocali e pi\[UGrave] spazi.
Il prodedimiento che facciamo per ottenere questo \[EGrave]:
1. Creare una tavola di 2-vettori che hanno la aggiore cantit\[AGrave] di \
vocali e spazi (scegliamo quelli che sono alla fine)
2. Dopo determiniamo la posizione dove si trovano questi messaggi nella lista \
numLettere1
3. Decrittiamo quelli messaggi con pi\[UGrave]  vocali e spazi.\
\>", "Text",
 CellChangeTimes->{
  3.8582532096746335`*^9, {3.858253243753601*^9, 3.858253397681119*^9}, {
   3.858253726458741*^9, 3.858253751160303*^9}, 3.8582553542144394`*^9, {
   3.8582734294173594`*^9, 3.858273509577419*^9}, {3.85827611164144*^9, 
   3.858276158604492*^9}, {3.8583054135558486`*^9, 3.8583054513099303`*^9}, {
   3.8583055648053875`*^9, 3.8583056128290267`*^9}, {3.858338064218704*^9, 
   3.8583380856939335`*^9}, {3.8583381673906837`*^9, 3.858338238403676*^9}, 
   3.858352077446924*^9, {3.8583521322419066`*^9, 3.8583521335778527`*^9}, {
   3.858352187770415*^9, 3.8583522575334845`*^9}, {3.8583522979260454`*^9, 
   3.8583523122878337`*^9}, {3.858352344202709*^9, 3.8583524275315557`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"26c54a09-4973-4ab2-9847-40d48416aef9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"tb", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"numLettere2", "[", 
      RowBox[{"[", "i", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{
        RowBox[{"Length", "[", "numLettere2", "]"}], "-", "5"}], ",", " ", 
       RowBox[{"Length", "[", "numLettere2", "]"}]}], "}"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.858257684473364*^9, 3.8582577676202326`*^9}, 
   3.8582735192495613`*^9, {3.8582763572972817`*^9, 3.858276461775982*^9}, {
   3.858276589948988*^9, 3.858276650268329*^9}, {3.8583057434481764`*^9, 
   3.8583057491530466`*^9}, 3.858306078262787*^9, {3.8583062137923555`*^9, 
   3.8583062327594976`*^9}, {3.8583097289176297`*^9, 
   3.8583098241408777`*^9}, {3.858309881711873*^9, 3.8583099394254875`*^9}, {
   3.858309993974648*^9, 3.8583100538495717`*^9}, {3.8583101158590302`*^9, 
   3.858310117600236*^9}, {3.8583152394041004`*^9, 3.8583152650315104`*^9}, {
   3.8583381092319374`*^9, 3.8583381518119698`*^9}, {3.858338447129902*^9, 
   3.858338455265628*^9}, {3.858338519912505*^9, 3.8583385235470934`*^9}, {
   3.858338612660879*^9, 3.858338617215521*^9}, {3.8583386697457027`*^9, 
   3.858338690075326*^9}, {3.8583396872073116`*^9, 3.858339692447545*^9}, {
   3.8583400133685293`*^9, 3.858340046298458*^9}, {3.8583400811420546`*^9, 
   3.858340136620446*^9}, {3.858340216283983*^9, 3.8583402393056865`*^9}, {
   3.8583404559515457`*^9, 3.858340495705817*^9}, {3.858340536834067*^9, 
   3.8583405865112743`*^9}, {3.8583406484849076`*^9, 3.858340732978386*^9}, {
   3.858340764182706*^9, 3.858340835130275*^9}, 3.858340870663682*^9, {
   3.858345340762232*^9, 3.8583453712789507`*^9}, {3.858345412493947*^9, 
   3.8583454187077017`*^9}, {3.8583454516858077`*^9, 3.858345454394887*^9}, {
   3.8583454913543158`*^9, 3.8583454937291327`*^9}, {3.858345908723154*^9, 
   3.8583459634860506`*^9}, {3.8583471358672523`*^9, 
   3.8583471429938545`*^9}, {3.8583472047887154`*^9, 3.858347277271861*^9}, {
   3.8583475127759914`*^9, 3.8583475330053945`*^9}, {3.8583476671767273`*^9, 
   3.8583476674060802`*^9}, {3.858348727132668*^9, 3.8583487296284733`*^9}, {
   3.8583491853395147`*^9, 3.858349189477228*^9}, {3.8583492558989997`*^9, 
   3.8583492862195425`*^9}, {3.8583494116797876`*^9, 3.858349412903144*^9}, {
   3.8583524591296587`*^9, 3.858352459250537*^9}, {3.8583903009802074`*^9, 
   3.858390312415558*^9}, {3.8583906999649715`*^9, 3.858390701784916*^9}},
 CellLabel->
  "In[339]:=",ExpressionUUID->"da496238-51fc-41c3-835b-73810da18a40"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"115", ",", "46"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"115", ",", "48"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"115", ",", "51"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"115", ",", "52"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"120", ",", "56"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"139", ",", "86"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8583557894130917`*^9, 3.858356192000003*^9, 3.858390257698498*^9, {
   3.858390302900008*^9, 3.858390315590587*^9}, 3.8583907026630845`*^9},
 CellLabel->
  "Out[339]=",ExpressionUUID->"57a68493-c8aa-4bb2-8da3-8442181b2153"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"lb", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"numLettere1", ",", "#"}], "]"}], "&"}], ",", "tb"}], "]"}], 
     "]"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.8582541088931046`*^9, 3.858254109562628*^9}, {
   3.8582557059667063`*^9, 3.858255708872039*^9}, {3.8582558984823446`*^9, 
   3.8582559023157606`*^9}, {3.858255971047887*^9, 3.858255975871428*^9}, 
   3.8582560140430517`*^9, 3.8582564592761855`*^9, {3.858257092831607*^9, 
   3.85825710519143*^9}, {3.858257177771328*^9, 3.858257254585373*^9}, 
   3.8582572901160865`*^9, {3.8582576075606737`*^9, 3.8582576439682827`*^9}, {
   3.8582577839297495`*^9, 3.858257806463349*^9}, {3.858315242657049*^9, 
   3.858315294806384*^9}, {3.8583399237164326`*^9, 3.858339937991503*^9}, 
   3.8583481274001083`*^9},
 CellLabel->
  "In[340]:=",ExpressionUUID->"e07c756e-19bb-4253-a09b-6d2fd1432f76"],

Cell[BoxData[
 RowBox[{"messaggiDecrittatti", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"messaggi", "[", 
      RowBox[{"[", "#", "]"}], "]"}], "&"}], ",", "lb"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.858253542052495*^9, {3.858315304437962*^9, 3.8583153140411587`*^9}, {
   3.858315375779493*^9, 3.8583153976989126`*^9}, {3.8583154757205887`*^9, 
   3.8583154922854514`*^9}},
 CellLabel->
  "In[341]:=",ExpressionUUID->"a9238437-c4db-4c0f-b549-bacfbb004c75"],

Cell["\<\
Notiamo che l\[CloseCurlyQuote]ultimo numero della lista ordinata \[EGrave] \
molto pi\[UGrave] grande degli altri. \[CapitalEGrave] il messaggio da \
decifrare.
Ricaviamo la sua posizione nella lista non ordinata con Position e \
richiamiamolo nella lista dei messaggi\
\>", "Text",
 CellChangeTimes->{{3.8583543421373863`*^9, 3.858354527847929*^9}, {
  3.858390681914192*^9, 3.8583906842912154`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"d3911033-58e0-4917-be20-9a3ae5cf6fba"],

Cell[BoxData[
 RowBox[{"messaggi", "[", 
  RowBox[{"[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Position", "[", 
     RowBox[{"numlett1", ",", 
      RowBox[{"numlett", "[", 
       RowBox[{"[", "205378", "]"}], "]"}]}], "]"}], "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8583517614702783`*^9, 3.85835182975638*^9}},
 CellLabel->
  "In[287]:=",ExpressionUUID->"1ba3babf-3c11-4759-8c70-9ba9e519445e"],

Cell[TextData[{
 "In  quale posizione della lista \[OpenCurlyDoubleQuote]messagi\
\[CloseCurlyDoubleQuote] si trovava il nostro messaggio? E  quale era la \
chiave?  Basta guardare quale \[EGrave] la posizione di    \
\[OpenCurlyDoubleQuote]il messaggio soluzione\[CloseCurlyDoubleQuote]    \
nella lista dei messaggi decrittati e leggere la corrispondente componente di \
\[OpenCurlyDoubleQuote]messaggi\[CloseCurlyDoubleQuote]. La funzione ",
 StyleBox["Position[expr, pattern] ",
  FontWeight->"Bold",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["fornisce una lista delle posizioni in cui gli oggetti \
corrispondenti al pattern appaiono in expr.",
  FontWeight->"Normal",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.858249482988983*^9, 3.858249488313855*^9}, {
   3.8582495500659027`*^9, 3.8582495530339565`*^9}, 3.8582496013960648`*^9, {
   3.858252002600979*^9, 3.858252103652277*^9}, {3.858390585058787*^9, 
   3.858390618912119*^9}},
 Background->RGBColor[
  1, 0.9, 0.8],ExpressionUUID->"d451a547-29cd-4bb5-ab5d-b797d477f38a"],

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
  "messaggi", ",", 
   "\"\<I was asking questions which nobody else had asked before, because \
nobody else had actually looked at certain structures. Therefore, as I will \
tell, the advent of the computer, not as a computer but as a drawing machine, \
was for me a major event .... because for me computer graphics was a way of \
extending my hand, extending it and being able to draw things which my hand \
by itself, and the hands of nobody else before, would not have been able to \
represent. B. Mandelbrot \>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.858390369710156*^9, 3.8583903915922613`*^9}},
 CellLabel->
  "In[333]:=",ExpressionUUID->"39436023-9571-4d4d-8820-499015630a5b"],

Cell[BoxData[
 RowBox[{"MatrixForm", "@", 
  RowBox[{"matricipossibili", "[", 
   RowBox[{"[", "74894", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.858390431287341*^9, 3.858390539790778*^9}},
 CellLabel->
  "In[338]:=",ExpressionUUID->"d327a75b-3e7b-42b4-8b8e-c8a909dc9238"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Esercizio 2.2: RSA", "Chapter",
 CellChangeTimes->{{3.667188822640417*^9, 3.6671888235704184`*^9}, {
  3.6671889229405575`*^9, 3.6671889300105677`*^9}, {3.667320808064062*^9, 
  3.667320808264063*^9}, {3.6673268974717627`*^9, 3.667326897831763*^9}, {
  3.7618105027242365`*^9, 3.7618105039827375`*^9}, {3.8263415264787917`*^9, 
  3.826341529000018*^9}, {3.8263459661977644`*^9, 
  3.8263459689013324`*^9}},ExpressionUUID->"fa6eb5e9-2160-4db4-811e-\
72a9146e2851"],

Cell[CellGroupData[{

Cell["Testo dell\[CloseCurlyQuote]esercizio", "Section",
 CellChangeTimes->{{3.667324682717662*^9, 
  3.6673246884576693`*^9}},ExpressionUUID->"0b6f6c5a-cd8d-473e-bda6-\
6564d7f66bf1"],

Cell["\<\
Questo esercizio, molto semplice, ha come scopo di farvi familiarizzare con l\
\[CloseCurlyQuote]RSA\
\>", "Text",
 CellChangeTimes->{{3.826346471359898*^9, 3.8263464866396146`*^9}, {
  3.8263472876309323`*^9, 
  3.826347301807041*^9}},ExpressionUUID->"84a08d2e-5527-4e20-b138-\
ebd6e97eabbd"],

Cell[CellGroupData[{

Cell["Testo dell\[CloseCurlyQuote]esercizio", "Subsection",
 CellChangeTimes->{{3.667324682717662*^9, 
  3.6673246884576693`*^9}},ExpressionUUID->"be5ce4dc-981c-4fa3-b54d-\
c23756152e36"],

Cell[TextData[{
 "Completare innanzitutto il penultimo esercizio della lezione 9:\n\n1) \
Determinare, usando le capacit\[AGrave] simboliche di ",
 StyleBox["Mathematica,",
  FontSlant->"Italic"],
 " un\[CloseCurlyQuote]espressione della chiave privata b in funzione di ",
 StyleBox["m,p,q",
  FontSlant->"Italic"],
 " e ",
 StyleBox["a",
  FontSlant->"Italic"],
 ". \n\n2) Scrivere una funzione che crei in modo random le chiavi pubbliche \
(",
 StyleBox["m,a",
  FontSlant->"Italic"],
 ") e private (",
 StyleBox["m,b",
  FontSlant->"Italic"],
 ") per RSA. (Nota: ",
 StyleBox["a",
  FontSlant->"Italic"],
 " puo` essere `poco random\[CloseCurlyQuote], per esempio molto piccolo---la \
segretezza del sistema dipende dalla difficolta` di determinare ",
 StyleBox["b",
  FontSlant->"Italic"],
 "). \n\nPoi:\n\n3) Provare a generare delle chiavi RSA che siano \
\[OpenCurlyDoubleQuote]",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "-mente sicure\[CloseCurlyDoubleQuote]: ",
 StyleBox["m",
  FontSlant->"Italic"],
 " \[EGrave] cos\[IGrave] grande che ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " non riesce a fattorizzarlo in un tempo ragionevole. \n\n4) Se non si \
riesce a generare cos\[IGrave] dei primi ",
 StyleBox["p",
  FontSlant->"Italic"],
 " e ",
 StyleBox["q",
  FontSlant->"Italic"],
 " abbastanza grandi, cercateli su libri o in internet; per esempio, si \
possono usare dei \[OpenCurlyDoubleQuote]primorial primes\
\[CloseCurlyDoubleQuote] e/o, perch\[EAcute] no, dei \
\[OpenCurlyDoubleQuote]Padovan primes\[CloseCurlyDoubleQuote].\n\n5) Dopo \
aver creato le vostre chiavi RSA personali",
 StyleBox[" (m,a,b)",
  FontSlant->"Italic"],
 " usatele per inviare in modo sicuro la soluzione \
dell\[CloseCurlyQuote]esercizio 2.1: crittate la stringa decrittata con le \
vostre chiavi private (",
 StyleBox["m,b",
  FontSlant->"Italic"],
 ") e con le chiavi pubbliche ",
 StyleBox["(m\[CloseCurlyQuote],a\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 ") del docente, che sono\n\nm\[CloseCurlyQuote] = \
27606985387162255149739023449107931668458716142620601169954803000803329\n\na\
\[CloseCurlyQuote]= 2305843009213693951\n\nNon dimenticate di indicare nel \
notebook le vostre chiavi pubbliche!\n\nAttenzione: l\[CloseCurlyQuote]ordine \
in cui applicare le crittazioni con le chiavi (",
 StyleBox["m,b",
  FontSlant->"Italic"],
 ") e (",
 StyleBox["m\[CloseCurlyQuote],a\[CloseCurlyQuote]",
  FontSlant->"Italic"],
 ") non \[EGrave] indifferente: dipende da quale sia maggiore fra ",
 StyleBox["m ",
  FontSlant->"Italic"],
 "ed ",
 StyleBox["m",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]: pensateci e fate la cosa giusta."
}], "Text",
 CellChangeTimes->{{3.542206426044322*^9, 3.542206676580762*^9}, {
   3.542206818338211*^9, 3.542207080091071*^9}, {3.5422073070090694`*^9, 
   3.5422073459779377`*^9}, {3.542208976181801*^9, 3.54220907800318*^9}, {
   3.5422092011869965`*^9, 3.542209205461404*^9}, 3.542209418744979*^9, 
   3.542209449165032*^9, {3.5422575296893806`*^9, 3.54225756925105*^9}, {
   3.542257605037513*^9, 3.542257674598035*^9}, {3.542258556146984*^9, 
   3.542258655706359*^9}, {3.542258775264969*^9, 3.5422591882348948`*^9}, {
   3.542260060534027*^9, 3.542260078084058*^9}, 3.732251682333104*^9, 
   3.732251947337145*^9, {3.7322521464573565`*^9, 3.732252177218953*^9}, {
   3.7322524318765116`*^9, 3.732252448840818*^9}, {3.732252482051548*^9, 
   3.7322527041180077`*^9}, {3.79553327881933*^9, 3.7955332971852565`*^9}, {
   3.79561113924121*^9, 3.7956112376361084`*^9}, 3.8263449672560425`*^9, {
   3.826344999354696*^9, 3.826345068623479*^9}, {3.8263456075426407`*^9, 
   3.826345656000058*^9}, {3.826347686389931*^9, 3.8263476987594547`*^9}, {
   3.826348447049952*^9, 3.8263484570207753`*^9}, {3.857539023570538*^9, 
   3.857539066669899*^9}},
 FontSize->14,
 Background->RGBColor[
  0, 1, 0],ExpressionUUID->"e313b6a8-22a5-44a2-af63-23773b932a4d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Soluzione", "Section",
 CellChangeTimes->{{3.667324682717662*^9, 3.6673246884576693`*^9}, {
  3.8252351968100967`*^9, 
  3.825235198281411*^9}},ExpressionUUID->"0a2ed73c-d7c0-4712-b9eb-\
f0c8803d159b"],

Cell["Implementiamo l\[CloseCurlyQuote]algoritmo RSA", "Text",
 CellChangeTimes->{{3.858152177933757*^9, 3.8581521970893216`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"916c25e8-9979-4155-9c19-8981bea4ce2d"],

Cell["\<\
Sappiamo che per costruire un algoritmo di questo tipo si ha bisogno di:
- p, q due numeri primi distinti ( preferibilmente grandi cosicch\[EGrave] \
risulti difficile la fattorizzazione di m= p\[Times]q ), m= p\[Times]q (m sar\
\[AGrave] la chiave pubblica)
- a un intero coprimo con p-1 e q-1 (chiave pubblica)
- b (chiave privata) un\[CloseCurlyQuote]inversa modulo (p-1)\[Times](q-1) di \
a ( esiste poich\[EGrave] a \[EGrave] coprimo con (p-1)\[Times](q-1)\
\>", "Text",
 CellChangeTimes->{{3.8581523088684835`*^9, 3.8581523252428975`*^9}, {
  3.8581524849478807`*^9, 3.8581526772406893`*^9}, {3.8581527368395667`*^9, 
  3.8581528320053797`*^9}, {3.858152896005045*^9, 3.8581529979438047`*^9}, {
  3.8581531808853755`*^9, 3.8581532345176277`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"fe7a65e0-985d-4e5d-aa39-aa38d22de401"],

Cell[TextData[{
 "l\[CloseCurlyQuote]algoritmo RSA funziona in questo modo:\n\[ForAll] x \
intero coprimo con m (m= p\[Times]q)  ho - crittazione f(x) = ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "a"], TraditionalForm]],ExpressionUUID->
  "6c3bed1e-449c-4ff9-8c82-1ff1c1482197"],
 " modulo m;\n                                                                \
                 - decrittazione ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["f", 
      RowBox[{"-", "1"}]], "(", "x", ")"}], "=", " ", 
    SuperscriptBox["x", "b"]}], TraditionalForm]],ExpressionUUID->
  "9dd6574a-1535-4415-8074-f0d651e7957d"],
 " modulo m.\n\nPoich\[EGrave] per ogni intero coprimo con m ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "ab"], TraditionalForm]],ExpressionUUID->
  "b0153ee2-1155-4bef-8ec3-6cdb9880cebf"],
 "= x modulo m, corollario del teorema di Eulero.                            "
}], "Text",
 CellChangeTimes->{{3.8581542341760306`*^9, 3.8581545524436846`*^9}, {
   3.8581545825617585`*^9, 3.858154594686323*^9}, 3.8581678187931175`*^9, {
   3.8581678716037445`*^9, 3.858167898446515*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"7ee8d696-d4db-40d8-8c49-00c75d596483"],

Cell["\<\
Determiniamo usando le capacit\[AGrave] simboliche di Mathematica, un\
\[CloseCurlyQuote]espressione della chiave privata b  in funzione di p, q, m \
ed a.
Sappiamo che  a\[Times]b = 1 + k\[Times] (p-1)\[Times](q-1)    \[Exists] k .
Usiamo Solve[ expr, var]\
\>", "Text",
 CellChangeTimes->{{3.8581550968860345`*^9, 3.8581552042698174`*^9}, {
   3.8581552583247366`*^9, 3.858155291330558*^9}, 3.85815547415909*^9, {
   3.8581555347359705`*^9, 3.858155601545585*^9}, 3.858155745081622*^9, {
   3.8581557830669236`*^9, 3.8581558581016493`*^9}, {3.858156345272107*^9, 
   3.85815635688107*^9}, {3.8582218207109594`*^9, 3.8582218233514795`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"a5ca5c91-1b47-4c8c-8a32-aa985bcb98c0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "a", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "b", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8581561880355473`*^9, 3.858156221516404*^9}},
 CellLabel->
  "In[291]:=",ExpressionUUID->"f6664a4a-226c-4c35-adf1-f5e73674e222"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"a", "*", "b"}], "==", " ", 
    RowBox[{"1", "+", " ", 
     RowBox[{"k", "*", " ", 
      RowBox[{"(", 
       RowBox[{"m", " ", "-", "p", " ", "-", "q", " ", "+", "1"}], " ", 
       ")"}]}]}]}], ",", " ", "b"}], "]"}]], "Input",
 CellChangeTimes->{{3.8581561340717707`*^9, 3.858156169461131*^9}, {
  3.8581562306658278`*^9, 3.8581562816587286`*^9}},
 CellLabel->
  "In[293]:=",ExpressionUUID->"3978f178-993b-4b80-9d0f-236e8710c45d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"b", "\[Rule]", 
    FractionBox[
     RowBox[{"1", "+", 
      RowBox[{"60", " ", "k"}], "-", 
      RowBox[{"k", " ", "p"}], "-", 
      RowBox[{"k", " ", "q"}]}], "a"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8581562540870314`*^9, 3.8581562841773233`*^9, 
  3.8583546144527254`*^9},
 CellLabel->
  "Out[293]=",ExpressionUUID->"7463c1e2-f87b-401a-ab58-897553af9e2a"]
}, Open  ]],

Cell[TextData[{
 "Scrivo una funzione che crei in modo random le chiavi publiche (m, a) e \
private (m, b):\naffinch\[EGrave] b sia sicura devo trovare p e q \
opportunamente grandi per rendere pi\[UGrave] difficile la fattorizzazione di \
m.\nPerci\[OGrave] facciamo in modo che p e q siano distinti e scelti in modo \
Random tra ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["10", "11"], "-", 
    RowBox[{"mo", "  ", "e", "  ", 
     SuperscriptBox["10", "12"]}]}], TraditionalForm]],ExpressionUUID->
  "d5421eaa-3b0e-41c5-bb35-e564f272ae77"],
 " -mo primo.\nScelgo a in modo Random coprimo con (p-1)\[Times](q-1), non \
\[EGrave] necessario generarlo i tutto l\[CloseCurlyQuote]intervallo, a pu\
\[OGrave] anche essere relativamente piccolo. \nCrediamo sia anche \
pi\[UGrave] conveniente diminuire l\[CloseCurlyQuote]intervallo di ricerca di \
a affinch\[EGrave] vi siano meno controlli da fare nelle due fattorizzazioni."
}], "Text",
 CellChangeTimes->{{3.8581566427002993`*^9, 3.8581566641839*^9}, {
   3.858156753696948*^9, 3.858156770352603*^9}, {3.8581568047107663`*^9, 
   3.858156812054234*^9}, 3.8581571567587657`*^9, 3.8581576839148808`*^9, {
   3.8581580637819204`*^9, 3.858158066609957*^9}, {3.8581581263697653`*^9, 
   3.858158126729109*^9}, {3.8581581618059845`*^9, 3.85815825112055*^9}, {
   3.858158306826379*^9, 3.858158436125373*^9}, {3.8581585665113077`*^9, 
   3.8581586177751007`*^9}, {3.858158650111321*^9, 3.8581588042848825`*^9}, {
   3.858158931415606*^9, 3.858158971485896*^9}, {3.858159001781687*^9, 
   3.858159033936785*^9}, {3.858159063945612*^9, 3.858159124193454*^9}, 
   3.8581606798091607`*^9, {3.858221140538021*^9, 3.8582211420692177`*^9}, {
   3.8582211825833955`*^9, 3.858221183114621*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"80215b43-5550-446c-a6ae-a706eda62f9e"],

Cell["\<\
Definisco le variabili in Module cos\[IGrave] non modifico le assegnazioni \
globali\
\>", "Text",
 CellChangeTimes->{{3.8581596179357576`*^9, 3.8581596481846886`*^9}},
 Background->RGBColor[
  1, 1, 0.85],ExpressionUUID->"b268932a-6835-4e80-8e31-827ce43470ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"chiavi", "[", 
   RowBox[{"intmin_", ",", "intmax_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"p", "=", " ", 
       RowBox[{"Prime", "[", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"intmin", ",", "intmax"}], "}"}], "]"}], "]"}]}], ",", 
      RowBox[{"q", "=", " ", 
       RowBox[{"Prime", "[", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"intmin", ",", "intmax"}], "}"}], "]"}], "]"}]}], ",", 
      RowBox[{"a", "=", " ", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"2", ",", " ", 
          SuperscriptBox["10", "5"]}], "}"}], "]"}]}], ",", 
      RowBox[{"b", "=", "0"}]}], "}"}], ",", " ", 
    RowBox[{
     RowBox[{"While", "[", " ", 
      RowBox[{
       RowBox[{"p", "==", "q"}], ",", " ", 
       RowBox[{"q", "=", " ", 
        RowBox[{"Prime", "[", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"intmin", ",", "intmax"}], "}"}], "]"}], "]"}]}]}], "]"}], 
     ";", " ", 
     RowBox[{"While", " ", "[", " ", 
      RowBox[{
       RowBox[{"!", " ", 
        RowBox[{"CoprimeQ", "[", 
         RowBox[{"a", ",", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"p", "-", "1"}], ")"}], "*", 
           RowBox[{"(", 
            RowBox[{"q", "-", "1"}], ")"}]}]}], "]"}]}], ",", " ", 
       RowBox[{"a", "=", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"2", ",", " ", 
           SuperscriptBox["10", "5"]}], "}"}], "]"}]}]}], "]"}], ";", " ", 
     RowBox[{"b", "=", " ", 
      RowBox[{"PowerMod", "[", 
       RowBox[{"a", ",", 
        RowBox[{"-", "1"}], ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"p", "-", "1"}], ")"}], "*", 
         RowBox[{"(", 
          RowBox[{"q", "-", "1"}], ")"}]}]}], "]"}]}], ";", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"p", "*", "q"}], ",", "a", " ", ",", "b"}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8581588413239937`*^9, 3.8581588461363163`*^9}, {
   3.858159175019774*^9, 3.858159176190817*^9}, {3.858159218414357*^9, 
   3.858159227414033*^9}, {3.8581592576089964`*^9, 3.858159258327714*^9}, {
   3.858159318184946*^9, 3.85815937816873*^9}, {3.858159461212637*^9, 
   3.858159582468277*^9}, 3.8581596969017005`*^9, {3.8581607752082295`*^9, 
   3.8581608668455787`*^9}, {3.858160904062992*^9, 3.858161218208868*^9}, {
   3.8581615466549397`*^9, 3.8581616005905075`*^9}, {3.8581621950178523`*^9, 
   3.8581622163764725`*^9}, {3.8581622730873127`*^9, 3.8581622815401535`*^9}, 
   3.858162372771262*^9, {3.858162407035641*^9, 3.858162409535551*^9}},
 CellLabel->
  "In[294]:=",ExpressionUUID->"b07845be-edf0-45e0-a527-f6e9af41e0b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"keys", "=", 
  RowBox[{"chiavi", "[", 
   RowBox[{
    SuperscriptBox["10", "11"], ",", 
    SuperscriptBox["10", "12"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8581612240211554`*^9, 3.8581612372081876`*^9}, 
   3.858162479892403*^9, 3.85816326912539*^9, {3.8581633050459805`*^9, 
   3.8581633075302663`*^9}},
 CellLabel->
  "In[295]:=",ExpressionUUID->"d521c791-b619-4107-a7ba-3d614ea3621a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "344632604028270476204148859", ",", "50981", ",", 
   "245111582539764049002383045"}], "}"}]], "Output",
 CellChangeTimes->{3.8581623992234163`*^9, 3.8581625003135448`*^9, 
  3.8581633431852317`*^9, 3.8583546530102105`*^9},
 CellLabel->
  "Out[295]=",ExpressionUUID->"c66efa99-cf82-4445-8494-400f2bff7bd5"]
}, Open  ]],

Cell["\<\
Implementiamo l\[CloseCurlyQuote]algoritmo che date le chiavi critta o \
decritta un messaggio\
\>", "Text",
 CellChangeTimes->{{3.858164892032243*^9, 3.8581649236092405`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"aee1c7e4-fff4-401e-86b8-8b42f9a99f58"],

Cell[TextData[{
 "Dato m raggruppiamo i codici ASCII del messaggio (una stringa) in gruppi di \
k elementi con k tale che ciascuna lista ",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["n", "0"], ",", "...", ","}]}]}], TraditionalForm]],
  ExpressionUUID->"30dbf45f-dac1-4b44-9d20-6a69931a8748"],
 Cell[BoxData[
  FormBox[
   SubscriptBox["n", 
    RowBox[{"k", "-", "1"}]], TraditionalForm]],ExpressionUUID->
  "9b098b8e-8b7b-4b57-9ccf-f6dece47459b"],
 "} rappresenti la lista delle cifre in base 128 di un numero < m (poich\
\[EGrave] i codici ASCII utilizzati sono 1 <...< 128 ).\nBasta che sia ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["128", "k"], "<", "m"}], TraditionalForm]],ExpressionUUID->
  "bd5ce71e-0be2-470e-880f-1cfc499ba40a"],
 " ( il numero successivo a quelli possibili in base 128 ) , ovvero  ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"Log", "[", "m", "]"}], 
    RowBox[{"Log", "[", "128", "]"}]], TraditionalForm]],ExpressionUUID->
  "d39c55d9-e81f-462b-99ac-b0a12a7b0c53"],
 "<m .\nNel caso in cui la suddivisione della codifica ASCII della stringa \
non sia divisibile per k aggiungo alla lista un numero opportuno di 32 (che \
corrispondono allo spazio non modificando cos\[IGrave] il messaggio)"
}], "Text",
 CellChangeTimes->{{3.8581683032434525`*^9, 3.8581683480856147`*^9}, {
   3.8581683822718925`*^9, 3.8581684028805103`*^9}, {3.8581684343950233`*^9, 
   3.8581684497850804`*^9}, {3.858168763413886*^9, 3.858168943391819*^9}, {
   3.858168985374691*^9, 3.8581690552628136`*^9}, 3.8581691144950686`*^9, {
   3.8581691459314423`*^9, 3.8581692260324717`*^9}, {3.858169279249324*^9, 
   3.858169326169531*^9}, {3.858169456977327*^9, 3.858169463086483*^9}, {
   3.8581694983352404`*^9, 3.8581695591299143`*^9}, {3.8581696093156214`*^9, 
   3.858169707124617*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"09f10352-722b-4a16-885e-318050dfc40d"],

Cell[TextData[{
 "Poniamo ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["128", "k"], "<", 
    SuperscriptBox["10", "11"]}], TraditionalForm]],ExpressionUUID->
  "a77d51e5-04ec-4cb7-a856-72501b6385e9"],
 "   ( p, q > ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "11"], TraditionalForm]],ExpressionUUID->
  "5a32967f-bca6-420e-8221-45f5de04000b"],
 " ):"
}], "Text",
 CellChangeTimes->{{3.8581702657408223`*^9, 3.858170305741982*^9}, {
  3.858171569121708*^9, 3.858171705196169*^9}},
 Background->RGBColor[
  1, 1, 0.85],ExpressionUUID->"b1353e89-f4aa-41f5-b0ce-430e62789cec"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"keys", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"keys", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"keys", "[", 
    RowBox[{"[", "3", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"k", "=", 
  RowBox[{"IntegerPart", "[", 
   FractionBox["11", 
    RowBox[{"Log", "[", 
     RowBox[{"10", ",", "128"}], "]"}]], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8581696433925223`*^9, 3.8581696509703755`*^9}, {
  3.858169716608655*^9, 3.8581698129645796`*^9}, {3.8581698462290154`*^9, 
  3.8581699125235195`*^9}, {3.858170014847994*^9, 3.8581700572472315`*^9}, {
  3.858170117723769*^9, 3.858170236632473*^9}, {3.858171713211507*^9, 
  3.8581717158989105`*^9}, {3.858171757866178*^9, 3.858171760069205*^9}, {
  3.858171840708807*^9, 3.8581718465211177`*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"71143f39-8f53-4b65-ac00-3ee6731b37ba"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.858169652126584*^9, 3.858170321928898*^9, 
  3.858171724132987*^9, 3.8581717617253895`*^9, 3.8581718475991797`*^9, 
  3.858354673775959*^9},
 CellLabel->
  "Out[299]=",ExpressionUUID->"b02b56b5-3005-42ad-9bd5-53a4dc994cfc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prime", "[", 
  SuperscriptBox["10", "12"], "]"}]], "Input",
 CellChangeTimes->{{3.858355523789288*^9, 3.8583555295438786`*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"be66a6ec-e98c-419b-a5d5-10f07c6846b8"],

Cell[BoxData["29996224275833"], "Output",
 CellChangeTimes->{3.8583555496024604`*^9},
 CellLabel->
  "Out[309]=",ExpressionUUID->"dce9483f-75ce-4a8a-98bc-bea8f89c4f87"]
}, Open  ]],

Cell[BoxData[
 SuperscriptBox["29996224275833", "2"]], "Input",
 CellChangeTimes->{{3.8583555712580633`*^9, 3.858355571883021*^9}},
 CellLabel->
  "In[310]:=",ExpressionUUID->"2596d734-9356-43ce-ae31-b24fabeca76c"],

Cell[BoxData[
 RowBox[{"27606985387162255149739023449107931668458716142620601169954803000803\
329", ">", "899773470806072985267843889"}]], "Input",
 CellChangeTimes->{{3.858355604945924*^9, 3.8583556092484503`*^9}},
 CellLabel->
  "In[311]:=",ExpressionUUID->"e7c8b02c-22db-4e50-bc09-dfd5cf57528a"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8583556140451508`*^9},
 CellLabel->
  "Out[311]=",ExpressionUUID->"242da2a2-3226-412a-80c0-d424fd445296"],

Cell[BoxData["899773470806072985267843889"], "Input",ExpressionUUID->"00ab5ff7-fddc-43f4-bff3-8953f7062102"],

Cell["Suddividiamo il messaggio", "Text",
 CellChangeTimes->{{3.85817036703666*^9, 3.8581703733958273`*^9}},
 Background->RGBColor[
  1, 1, 0.85],ExpressionUUID->"c7044f79-1296-47f5-ae26-a26ab7d0adf8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"msg", "[", 
   RowBox[{"messaggio_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "messaggio", "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{"32", ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", " ", 
          RowBox[{"k", " ", "-", " ", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"ToCharacterCode", "[", "messaggio", "]"}], "]"}], ",", 
             "k"}], "]"}]}]}], "}"}]}], "]"}]}], "]"}], ",", "k"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.858169935147709*^9, 3.8581699394600444`*^9}, {
  3.8581702275204973`*^9, 3.8581702303198657`*^9}, {3.8581703339909687`*^9, 
  3.858170344646837*^9}},
 CellLabel->
  "In[300]:=",ExpressionUUID->"9c979956-ad8f-4932-a828-5f7787419cc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "message", "=", " ", 
   "\"\<I was asking questions which nobody else had asked before, because \
nobody else had actually looked at certain structures. Therefore, as I will \
tell, the advent of the computer, not as a computer but as a drawing machine, \
was for me a major event .... because for me computer graphics was a way of \
extending my hand, extending it and being able to draw things which my hand \
by itself, and the hands of nobody else before, would not have been able to \
represent. B. Mandelbrot\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.8581721228901424`*^9, 3.8581721553264804`*^9}, {
  3.8583546904020367`*^9, 3.8583546934075785`*^9}, {3.8583547322913046`*^9, 
  3.8583547485861936`*^9}},
 CellLabel->
  "In[302]:=",ExpressionUUID->"027b0f74-e162-46df-b1d1-f2ab82908573"],

Cell[TextData[{
 "Ogni suddivisione in k parti trovata sopra sar\[AGrave] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],ExpressionUUID->
  "6c1cda59-fd4f-4133-a64f-79429abae26b"],
 " ( considerando ogni ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["n", 
     RowBox[{"i", "  "}]], " ", "come", " "}], TraditionalForm]],
  ExpressionUUID->"ac30e571-df8b-4e0f-8695-3bf2080f9414"],
 "una cifra di un numero in base 128, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],ExpressionUUID->
  "fdc516e3-a6aa-45f9-988c-08734a3ef759"],
 " \[EGrave] la conversione di tale numero in base decimale , abbiamo usato \
FromDigits[n, base] ), che verr\[AGrave] crittato con ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "a"], TraditionalForm]],ExpressionUUID->
  "928671ef-2f24-4d6e-98b1-638afde5f252"],
 " modulo m.\nOgni ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],ExpressionUUID->
  "7d0afec2-9c59-47af-a3bb-5683ebb306fb"],
 " \[EGrave] coprimo con m= p\[Times]q  poich\[EGrave] ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],ExpressionUUID->
  "3e7bfdc0-2292-4ac8-ae80-06273b70e21a"],
 "< ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "11"], TraditionalForm]],ExpressionUUID->
  "a221821f-6f56-41c6-9895-e815cb8d237f"],
 " perci\[OGrave] diverso da p e da q."
}], "Text",
 CellChangeTimes->{{3.8581708289732485`*^9, 3.8581709728126574`*^9}, {
  3.8581710077957983`*^9, 3.858171092074012*^9}, {3.8581711254165688`*^9, 
  3.858171229507819*^9}, {3.8581713195514913`*^9, 3.8581713320510225`*^9}, {
  3.8581718732976007`*^9, 3.858171923343735*^9}, {3.8582196925347157`*^9, 
  3.8582197556574388`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"805aa66b-0c4f-4bef-b27a-606b28165a8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"critta", "[", 
   RowBox[{"m_", ",", "a_", ",", "mes_"}], "]"}], ":=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"PowerMod", "[", 
      RowBox[{"#", ",", "a", ",", "m"}], "]"}], "&"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"FromDigits", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"msg", "[", 
          RowBox[{"mes", ",", "k"}], "]"}], "[", 
         RowBox[{"[", "s", "]"}], "]"}], ",", "128"}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"s", ",", "1", ",", " ", 
        RowBox[{"Length", "[", 
         RowBox[{"msg", "[", 
          RowBox[{"mes", ",", "k"}], "]"}], "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8581719582018404`*^9, 3.858171960951744*^9}, {
   3.858171995169284*^9, 3.8581720946500816`*^9}, {3.858172161045046*^9, 
   3.85817218759095*^9}, {3.8581812974174733`*^9, 3.858181299046826*^9}, {
   3.858181343372902*^9, 3.858181372780878*^9}, {3.8581814369320517`*^9, 
   3.8581814513798833`*^9}, {3.858181492427496*^9, 3.858181581088535*^9}, {
   3.8581816186899877`*^9, 3.858181760992716*^9}, 3.858181798216277*^9, {
   3.8581819983106885`*^9, 3.858182012092493*^9}, {3.8581852911807203`*^9, 
   3.8581854144476185`*^9}, {3.8581854723456087`*^9, 3.858185487183937*^9}},
 CellLabel->
  "In[303]:=",ExpressionUUID->"e6036d08-2d3b-40e2-8d7c-be36228bc412"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mess", "=", 
   RowBox[{"critta", "[", 
    RowBox[{"m", ",", "a", ",", "message"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8583551038774123`*^9, 3.858355149850852*^9}, {
  3.8583556870343237`*^9, 3.858355689049884*^9}},
 CellLabel->
  "In[312]:=",ExpressionUUID->"1f58eb86-815d-4afe-bcf7-86cafce81ed5"],

Cell[TextData[{
 "Decrittiamo il messaggio.\nFacciamo l\[CloseCurlyQuote]operazione inversa:\n\
- mappiamo sulla lista  ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],ExpressionUUID->
  "5e6a2391-2ec2-4275-b5ee-99d4d77e1880"],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["", "b"], TraditionalForm]],ExpressionUUID->
  "9d81ab35-3f3d-4860-9d38-3cc9c7fb20d8"],
 " ( ritrovo ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],ExpressionUUID->
  "ba40259a-abc8-43be-a499-d9c736cf5495"],
 " mod m iniziale ) IntegerDigits[n,128] che mi crea per ognuno di essi la \
lista delle cifre in base 128\n- con Flatten[....] trasformiamo la precedente \
lista in una di un solo livello\n- infine applicando FromCharacterCode[....] \
ottengo nuovamente la stringa iniziale del messaggio"
}], "Text",
 CellChangeTimes->{{3.858181886531119*^9, 3.8581818925960913`*^9}, {
  3.858219797077858*^9, 3.8582198078118377`*^9}, {3.8582213657109985`*^9, 
  3.8582216772792454`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"c885a11e-05bf-44f9-a224-b9ed90bc2db5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"decritta", "[", 
   RowBox[{"m_", ",", "b_", ",", "crit_"}], "]"}], ":=", 
  RowBox[{"FromCharacterCode", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"IntegerDigits", "[", 
        RowBox[{"#", ",", "128"}], "]"}], " ", "&"}], ",", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"PowerMod", "[", 
          RowBox[{"#", ",", "b", ",", "m"}], "]"}], "&"}], ",", "crit"}], 
       "]"}]}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.858181904490834*^9, 3.8581819262121615`*^9}, {
  3.8581819844599605`*^9, 3.858181988661567*^9}, {3.8581820290279083`*^9, 
  3.8581820437948065`*^9}, {3.858185055901224*^9, 3.8581850677581334`*^9}, {
  3.858185126788333*^9, 3.8581851542430363`*^9}, {3.8581851905572724`*^9, 
  3.858185263659017*^9}, {3.8581853945298777`*^9, 3.858185394968854*^9}},
 CellLabel->
  "In[304]:=",ExpressionUUID->"78e1f3c9-4f7d-4ed8-8baf-b53f7a7816f3"],

Cell[TextData[{
 "Ora che abbiamo le nostre chiavi usiamole per inviare in modo sicuro il \
messaggio sopra.\nCrittiamo la stringa, prima decrittata con le nostre chiavi \
private, con le chiavi pubbliche del docente.\nAttenzione: \[EGrave] \
necessario che la chiave m del docente sia > della nostra chiave m perch\
\[EGrave] altrimenti la decrittazione del docente non distingue tutti i \
codici.\nNel nostro caso non c\[CloseCurlyQuote]\[EGrave] alcun problema \
visto che p,q sono scelti in modo Random tra il ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["10", "11"], "-", 
    RowBox[{"mo", " ", "e", " ", 
     SuperscriptBox["10", "12"]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "55c5b5a2-7922-4f03-b2dd-f14cea71abd3"],
 "-mo primo.\nInfatti ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Prime", "[", 
    SuperscriptBox["10", "12"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "d13651d7-f120-48d5-97fb-4d78d87d38a0"],
 "]=29996224275833, che elevato alla seconda \[EGrave] comunque pi\[UGrave] \
piccolo della chiave m del docente"
}], "Text",
 CellChangeTimes->{{3.8583548708371696`*^9, 3.858354979482771*^9}, {
  3.8583550450355177`*^9, 3.858355065912631*^9}, {3.8583551587354355`*^9, 
  3.8583552065794783`*^9}, {3.8583552406267242`*^9, 3.8583552415030766`*^9}, {
  3.8583553413764997`*^9, 3.858355476639119*^9}, {3.858355638072459*^9, 
  3.858355658108658*^9}, {3.8583557119390335`*^9, 3.8583558619016013`*^9}, {
  3.8583559947091956`*^9, 3.8583560050595193`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"50741370-e3cc-4f0e-9579-4dcf7bbde6b9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "mdocente", "=", 
   "27606985387162255149739023449107931668458716142620601169954803000803329"}]\
, ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"adocente", "=", "2305843009213693951"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8583562057826014`*^9, 3.858356261182935*^9}},
 CellLabel->
  "In[314]:=",ExpressionUUID->"18dbd859-59f6-4e0c-8db5-399b32e7b773"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newmex", "=", " ", 
   RowBox[{"critta", "[", 
    RowBox[{"mdocente", ",", "adocente", ",", 
     RowBox[{"decritta", "[", 
      RowBox[{"m", ",", "b", ",", "mess"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.858356038071325*^9, 3.8583560445615034`*^9}, {
   3.8583561707987432`*^9, 3.858356196348604*^9}, {3.8583562693884954`*^9, 
   3.8583563058385077`*^9}, 3.858356363684772*^9},
 CellLabel->
  "In[317]:=",ExpressionUUID->"c0301be2-b3b2-4111-b5d3-c9b5a3319844"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Esercizio 2.3: Hashing", "Chapter",
 CellChangeTimes->{{3.667188822640417*^9, 3.6671888235704184`*^9}, {
  3.6671889229405575`*^9, 3.6671889300105677`*^9}, {3.667320808064062*^9, 
  3.667320808264063*^9}, {3.6673268974717627`*^9, 3.667326897831763*^9}, {
  3.7618105027242365`*^9, 3.7618105039827375`*^9}, {3.8263415264787917`*^9, 
  3.826341529000018*^9}, {3.8263459661977644`*^9, 3.8263459978740673`*^9}, {
  3.826347816404359*^9, 
  3.826347847776957*^9}},ExpressionUUID->"da567f9b-25f6-4c62-abc6-\
a8d9204a11b8"],

Cell[CellGroupData[{

Cell["Testo dell\[CloseCurlyQuote]esercizio", "Section",
 CellChangeTimes->{{3.667324682717662*^9, 
  3.6673246884576693`*^9}},ExpressionUUID->"385d326d-9718-4b08-82b5-\
d9557421067f"],

Cell[CellGroupData[{

Cell["Premessa: hashing", "Subsubsection",
 CellChangeTimes->{{3.826346128445563*^9, 3.826346146857442*^9}, {
  3.826346195734091*^9, 
  3.8263462294922495`*^9}},ExpressionUUID->"cf68e0c1-2095-4de8-9ac9-\
5d5b19b18cf9"],

Cell[TextData[{
 StyleBox["In informatica una ",
  FontColor->GrayLevel[0]],
 StyleBox["hash function",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" \[EGrave] una funzione che mappa una sequenza di dati di \
dimensione qualunque in una di dimensione prefissata. Il risultato dell\
\[CloseCurlyQuote]operazione di hashing \[EGrave] spesso denominato \
semplicemente ",
  FontColor->GrayLevel[0]],
 StyleBox["hash.",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.447653275972875*^9, 3.447653401926*^9}, {
   3.447653558972875*^9, 3.447653615504125*^9}, {3.4476536867385*^9, 
   3.4476537334885*^9}, {3.6693804062743254`*^9, 3.669380618803481*^9}, {
   3.669380668480323*^9, 3.6693807693900948`*^9}, {3.669380951194493*^9, 
   3.6693810517692456`*^9}, {3.669382066050259*^9, 3.6693820847413282`*^9}, {
   3.6693821917414484`*^9, 3.669382194812624*^9}, {3.669382277545356*^9, 
   3.669382309297172*^9}, {3.66938255053897*^9, 3.669382560073516*^9}, {
   3.7319025290165553`*^9, 3.731902529375801*^9}, {3.7322528328944254`*^9, 
   3.732252841688071*^9}, {3.732252881085707*^9, 3.7322528886495605`*^9}, {
   3.7322531644877043`*^9, 3.73225322273486*^9}, {3.7628660053616667`*^9, 
   3.762866017728889*^9}, {3.7629726478260736`*^9, 3.762972650828989*^9}, {
   3.762972726019966*^9, 3.762972897989395*^9}, {3.762972929963641*^9, 
   3.762972977442993*^9}, {3.762973070904097*^9, 3.762973071107675*^9}, {
   3.762973105950935*^9, 3.7629731205108433`*^9}, {3.763462949421115*^9, 
   3.763462949499009*^9}, {3.7635259984357367`*^9, 3.7635260176944513`*^9}, 
   3.7635295647095475`*^9, {3.7953755045435038`*^9, 3.7953755047287807`*^9}, {
   3.7956115922545977`*^9, 3.795611618155345*^9}, {3.825697822583799*^9, 
   3.825697826304249*^9}, {3.826346013800625*^9, 3.826346060756957*^9}},
 FontSize->14,ExpressionUUID->"6ad77b18-071d-4bb3-a53b-3c4e215f4b59"],

Cell[TextData[{
 StyleBox["Le applicazioni di tale procedura sono molteplici. Una \[EGrave] \
il controllo dell\[CloseCurlyQuote]integrit\[AGrave] di dati trasmessi, che \
si fa inviando i dati seguiti da un ",
  FontColor->GrayLevel[0]],
 StyleBox["hash",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" calcolato su di essi con un qualche algoritmo: chi riceve i dati \
pu\[OGrave] ri-applicare l\[CloseCurlyQuote]algoritmo e confrontare l\
\[CloseCurlyQuote]",
  FontColor->GrayLevel[0]],
 StyleBox["hash",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" ottenuto con quello ricevuto; se i due coincidono, i dati \
trasmessi sono considerati corretti, altrimenti viene richiesta una nuova \
trasmissione.\n\nAltre applicazioni dell\[CloseCurlyQuote]hashing includono \
la crittazione di password per la loro memorizzazione nel sistema (in modo \
che i gestori del sistema o altri non possano venire a conoscenza dell\
\[CloseCurlyQuote]originale) e la sintetizzazione di dati per accelerare le \
ricerche in grandi database.\n\nL\[CloseCurlyQuote]hashing \[EGrave] anche \
usato nei blockchain.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->CompressedData["
1:eJwlzGkog3EAx/FZD2ZvJFNrc807mmKu9gL9teYobwiZOaKhvFgxazki1+SY
tcQLRrxY5Mq1kGgvXCPlCEU8rwiPyAtDOZ7f9uLXp34vvpJybY6Gy+FwwtjB
Q0lLHb3wSA4nktvdSu6GPL5ZPf+lzePCLFTu7dsO8p9JqL3QAY9LBvbgVKP0
HGbK75/gtNXggusjRO9k/VgbNsD3dVcnpLxUXdBUt2iG2rbpQZiSerLkVsVd
gePGcB7/+JmYfaRuI8aDBausc1RiEAzZihDBuAOBGCpHBpLhV/ulAu5aZp6E
fgzxz01ioOqqQJbNWk3Z3G5WNsjhLz2aCwP6XMWwI5CqgpPdyzVQ1yjVwtvA
HR3ctnbo4WfPdhO0P1Q0Q2GaIr6Iz5DacGkClN3kySGtNxIYRVpe1KxHmgkX
5BnK7KJ0tjPfuwbrJSYHXPKOdEJnFX0KzRbfMyh+Kf3pZ6VeRX/wIqMyxsTK
932PhalZ351vrQxRbhRZIFc9dh3dxpCwimwa/gOy3PkY
  "],
 FontSize->14,ExpressionUUID->"03adc754-d60b-48e7-8eb7-29661c04a86d"],

Cell[TextData[{
 StyleBox["Tipicamente, l\[CloseCurlyQuote]hash \[EGrave] una sequenza di 256 \
bit. Vi sono quindi ",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{
     SuperscriptBox["2", "256"], "  ", "possibili", " ", 
     StyleBox["hash",
      FontSlant->"Italic"], " "}]}], TraditionalForm]],
  FontColor->GrayLevel[0],ExpressionUUID->
  "763d0b30-022e-47ce-b2f4-426ac1ee569f"],
 StyleBox["diversi, mentre i dati in input possono avere dimensioni \
qualunque, e molto maggiori. Quindi le funzioni di hashing ",
  FontColor->GrayLevel[0]],
 StyleBox["non sono iniettive.",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\n\nSe due input producono lo stesso output si dice che c\
\[CloseCurlyQuote]\[EGrave] un ",
  FontColor->GrayLevel[0]],
 StyleBox["conflitto. ",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["Nelle applicazioni, \[EGrave] essenziale che la \
probabilit\[AGrave] dei conflitti sia molto molto bassa. \n\nN",
  FontColor->GrayLevel[0]],
 StyleBox["egli ultimi decenni sono stati sviluppati molti algoritmi di \
hashing, di complessit\[AGrave] crescente, per limitare \
l\[CloseCurlyQuote]occorrenza di conflitti nonostante \
l\[CloseCurlyQuote]aumento della mole di dati trasmessi.",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGCQAWIQfVqxvvjB+peOpxfaNoNpxfvTIPSHuRDx68sg9Po1
INrt+IllJ8NeO8ptizwIos/F9R8H0Suqda6AaE/LZ69A9Mq5Fd9B9M7ZjmWn
gPS3HdMrQPSnnd9bQTQLY1QbiO4r3jgBROc3rZwCou3sL24C01FMW0D0/HYF
Dq5zrx0nsOmAaaX5MiJbgfRaFjNREC27T0kKRBufFJEG0W6z+21B9M/m6y4g
+tik1a8kON848gebvwHRPmukGnyBdNIG1hUgelWd+xoQ3Xpv1wEQvWPtp/Mg
+k+3xWUQfe/93XZ9rjeOE5Y+ANNKc/bl2ADpCNYDYPraWz3naCCdFvjAC0R/
mRYTCaLfhy0C00ky4nnxQFpAEUKfPnN6t5T7G8eeCRJ7QPSuuTtOgWh+PovT
IFrurfV5EL2K2/QHiN4m1s3YB6TF9ivwgWizN4J1HxreOFYHTW8E0QDO5eR8

  "],
 FontSize->14,ExpressionUUID->"fbdaa05e-2092-4abd-a872-2e526775142f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Descrizione di un possibile algoritmo di hashing", "Subsubsection",
 CellChangeTimes->{{3.826346128445563*^9, 3.826346146857442*^9}, {
  3.826346195734091*^9, 3.826346197860501*^9}, {3.826346388416504*^9, 
  3.8263464018230534`*^9}},ExpressionUUID->"4814d683-4418-4b6d-bae8-\
486e9193e399"],

Cell[TextData[{
 StyleBox["In questo esercizio si chiede  di costruire un algoritmo di \
hashing (troppo semplice per impieghi reali) di un tipo che ora descriviamo. \
L\[CloseCurlyQuote]algoritmo lavora su una  stringa di caratteri ASCII in \
input e produce come output un intero minore di ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "256"], TraditionalForm]],
  FontColor->GrayLevel[0],ExpressionUUID->
  "aca792f1-bcff-44d1-a945-85416dc53895"],
 StyleBox[" (che qunidi avr\[AGrave] al pi\[UGrave] 64 cifre) in  \
rappresentazione esadecimale (base 16 con cifre 0, .., 9, a, b, c, d, e, f).",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.762976052501152*^9, 3.762976068159288*^9}, {
   3.762976116268572*^9, 3.762976116580736*^9}, {3.762976241974222*^9, 
   3.762976246443776*^9}, {3.762976310657403*^9, 3.762976311725575*^9}, {
   3.762976515424527*^9, 3.762976573115882*^9}, 3.76336638126711*^9, {
   3.7635264740845423`*^9, 3.763526551747364*^9}, {3.7635268347577243`*^9, 
   3.763526864896122*^9}, {3.7635297398060536`*^9, 3.763529751924121*^9}, {
   3.763529791228197*^9, 3.7635298531751537`*^9}, {3.763530958899871*^9, 
   3.763530964075757*^9}, 3.7635326551181803`*^9, {3.76353340814931*^9, 
   3.763533431804438*^9}, {3.763533500415633*^9, 3.7635335008216457`*^9}, {
   3.7635344665413218`*^9, 3.7635345065156393`*^9}, {3.79537608338414*^9, 
   3.7953760863191147`*^9}, {3.7956117762376432`*^9, 
   3.795611779100028*^9}},ExpressionUUID->"0f678a91-a1d6-4cd5-a8c9-\
3411ac22fa70"],

Cell[TextData[{
 StyleBox["Passo 1: preparazione dei dati\n\n",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["Si trasforma la stringa di caratteri ASCII in input in una lista \
di interi dispari ciascuno minore di ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox["256", TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "a41ec612-f16c-40ea-92e0-fd2fc5bd8cee"],
 StyleBox[". (Che siano dispari non \[EGrave] indispensabile, ma serve ad \
ottenere numeri coprimi con ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "256"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "ce69fbd9-0a59-404c-aeb7-a7fbb4d73384"],
 StyleBox[", nel caso dopo si eseguano operazioni modulo ",
  FontSize->14,
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "256"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "89df9733-3bef-4d5c-ad5c-b966faecea62"],
 StyleBox[")",
  FontColor->GrayLevel[0]],
 StyleBox[". Scegliete voi come farlo.\n\nSi aggiunge poi in testa (posizione \
1) alla lista un numero dispari dipendente dalla stringa e < ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "256"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "b0b5bc7b-fea4-473a-b3ef-d00633736a7d"],
 StyleBox[". ",
  FontColor->GrayLevel[0]],
 StyleBox["Scegliete voi come farlo.\n\nInfine si partiziona la lista in \
sottoliste di lunghezza 32, aggiungendo numeri 1 in coda se necessario.  Ogni \
tale sottolista \[EGrave] chiamata un \[OpenCurlyDoubleQuote]blocco\
\[CloseCurlyDoubleQuote] e la lista di input ha allora la struttura  {",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "1"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "a39f099e-a26c-4122-b90b-ba4b38239cc8"],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox[", ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "2"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "4348a10f-f399-4921-86cf-2b55ddabb255"],
 StyleBox[", ...... , ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "N"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "0f65a6db-4f04-4069-a1d8-f0da00f1c5ba"],
 StyleBox["}.",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.762976052501152*^9, 3.762976068159288*^9}, {
   3.762976116268572*^9, 3.762976116580736*^9}, {3.762976241974222*^9, 
   3.762976246443776*^9}, {3.762976310657403*^9, 3.762976311725575*^9}, {
   3.762976515424527*^9, 3.762976573115882*^9}, {3.763366424409842*^9, 
   3.763366517420416*^9}, {3.76336656641142*^9, 3.763366626074*^9}, {
   3.763366664427289*^9, 3.763366668726654*^9}, {3.7633667192400017`*^9, 
   3.763366825778886*^9}, {3.763366861739036*^9, 3.763366951763302*^9}, {
   3.763367289854869*^9, 3.7633673432521963`*^9}, {3.763400080584531*^9, 
   3.763400081774249*^9}, {3.76343602204778*^9, 3.7634360864257936`*^9}, {
   3.763436201809415*^9, 3.763436237791317*^9}, {3.763463193299735*^9, 
   3.7634633219719553`*^9}, {3.763463364818364*^9, 3.763463373687392*^9}, {
   3.763463416244369*^9, 3.76346356678645*^9}, {3.7634636059288883`*^9, 
   3.763463643922089*^9}, {3.763465211257465*^9, 3.7634652256819897`*^9}, {
   3.763465769371207*^9, 3.763465846134432*^9}, {3.7635265679799433`*^9, 
   3.7635267977414036`*^9}, {3.7635271322826996`*^9, 3.763527173307739*^9}, {
   3.7635275513407116`*^9, 3.7635276007471232`*^9}, {3.763527947757984*^9, 
   3.7635279499545975`*^9}, {3.7635280025711684`*^9, 
   3.7635280244653535`*^9}, {3.763528165156117*^9, 3.7635281734421625`*^9}, {
   3.7635282086198545`*^9, 3.763528211912838*^9}, {3.763528263040723*^9, 
   3.7635283918899794`*^9}, {3.7635287920208955`*^9, 3.763528792691532*^9}, {
   3.7635299469948797`*^9, 3.763529985059701*^9}, {3.7635300217824526`*^9, 
   3.763530024013035*^9}, {3.7635304599474697`*^9, 3.7635304695723686`*^9}, {
   3.763531029129058*^9, 3.763531063653367*^9}, {3.763531106236516*^9, 
   3.763531106787631*^9}, {3.7635312562561517`*^9, 3.763531299077339*^9}, 
   3.7635317992581353`*^9, {3.763533511741387*^9, 3.763533512879098*^9}, {
   3.763533744089913*^9, 3.7635337850750923`*^9}, {3.7956117961005287`*^9, 
   3.795611813199805*^9}, {3.826346246636073*^9, 3.826346267653866*^9}, 
   3.8263463139558315`*^9},ExpressionUUID->"d1569d38-91a1-45a7-a69f-\
f1d57ace71b6"],

Cell[TextData[{
 StyleBox["Passo 2: ",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox["algoritmo di hashing\n\n",
  FontSize->14,
  FontWeight->"Bold",
  FontColor->GrayLevel[0]],
 StyleBox["Si sceglie (decidete voi come) una funzione di due variabili \n    \
     ",
  FontSize->14,
  FontColor->GrayLevel[0]],
 StyleBox["f: (m,b) \[Rule]  f(m,b)",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\nche ad ogni intero ",
  FontSize->14,
  FontColor->GrayLevel[0]],
 StyleBox["m",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" (\[OpenCurlyDoubleQuote]chiave\[CloseCurlyDoubleQuote]) e a ogni \
\[OpenCurlyDoubleQuote]blocco\[CloseCurlyDoubleQuote] ",
  FontSize->14,
  FontColor->GrayLevel[0]],
 StyleBox["b",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" associ un intero eseguendo delle operazioni modulo ",
  FontSize->14,
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "256"], TraditionalForm]],
  FontSize->16,
  FontColor->GrayLevel[0],ExpressionUUID->
  "21c61c7f-fc12-4809-a2d1-b2e4cbe75054"],
 StyleBox[" ",
  FontColor->GrayLevel[0]],
 StyleBox["su ",
  FontSize->14,
  FontColor->GrayLevel[0]],
 StyleBox["m",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" e sugli elementi di ",
  FontSize->14,
  FontColor->GrayLevel[0]],
 StyleBox["b",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". ",
  FontColor->GrayLevel[0]],
 StyleBox["\n\nSi sceglie poi un valore iniziale ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "1"], TraditionalForm]],ExpressionUUID->
  "b84e9855-9307-4f2e-942f-b381f5388286"],
 StyleBox[" della chiave coprimo con ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "256"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "e7c564ed-1cc2-4f71-8930-08074ff0c89e"],
 StyleBox[" e si calcolano iterativamente\n       ",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]],
 StyleBox[" f(",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "1"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "05b64773-103a-48bc-8095-3c9a1014ac5b"],
 StyleBox[",",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "1"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "ba3bb7b1-3cdd-4ec1-9c25-af4607db6f91"],
 StyleBox[") ,      f( f(",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "1"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "533d4c6f-9e73-41c6-b876-7186e5c22303"],
 StyleBox[",",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "1"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "237e0f82-b6ed-4e1c-99f8-c216956a446c"],
 StyleBox["),",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "2"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "5ed6a3f9-f17d-4086-b2e1-3ee6dd2a5ecb"],
 StyleBox[") ,     f(  f( f(",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "1"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "d4d3cc9e-969e-41b3-a866-3821333b5a51"],
 StyleBox[",",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "1"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "a19cc6ad-1ce1-4a53-b25c-67361c7a62ce"],
 StyleBox["),",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "2"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "7f1535f1-39b0-4220-ad20-6b4925b79e3c"],
 StyleBox[") , ",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "3"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "e4b2802c-5039-4069-a4fb-469af833eae4"],
 StyleBox[")  ,   ........ ,      f(  ........ , ",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["b", "N"], TraditionalForm]],
  FontSize->14,
  FontColor->GrayLevel[0],ExpressionUUID->
  "592fa0c9-e6bc-4c56-96bc-06b27700049d"],
 StyleBox[")",
  FontSize->14,
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\nInfine, si scrive l\[CloseCurlyQuote]ultimo di questi numeri in \
rappresentazione esadecimale. Questo \[EGrave] l\[CloseCurlyQuote]hash della \
stringa in input.",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.762976052501152*^9, 3.762976068159288*^9}, {
   3.762976116268572*^9, 3.762976116580736*^9}, {3.762976241974222*^9, 
   3.762976246443776*^9}, {3.762976310657403*^9, 3.762976311725575*^9}, {
   3.762976515424527*^9, 3.762976573115882*^9}, {3.763366424409842*^9, 
   3.763366517420416*^9}, {3.76336656641142*^9, 3.763366626074*^9}, {
   3.763366664427289*^9, 3.763366668726654*^9}, {3.7633667192400017`*^9, 
   3.763366825778886*^9}, {3.763366861739036*^9, 3.763366951763302*^9}, {
   3.763367289854869*^9, 3.7633673597057543`*^9}, {3.763367400328086*^9, 
   3.763367441964551*^9}, {3.763367477062099*^9, 3.763367564819803*^9}, {
   3.7633675968128347`*^9, 3.763367759150756*^9}, {3.7633677929462957`*^9, 
   3.763367832350561*^9}, {3.763400092995261*^9, 3.7634001017107153`*^9}, {
   3.763463574514703*^9, 3.763463585268509*^9}, {3.763463676119541*^9, 
   3.763464167588827*^9}, {3.763464227472022*^9, 3.7634644656394167`*^9}, {
   3.763465243434351*^9, 3.763465245152042*^9}, {3.7634653946203527`*^9, 
   3.763465394892962*^9}, {3.7634655796119823`*^9, 3.76346563242667*^9}, {
   3.7635268035418353`*^9, 3.763526815818035*^9}, {3.763526910949505*^9, 
   3.7635270830422745`*^9}, {3.763527186664135*^9, 3.7635273491314397`*^9}, {
   3.7635273801711807`*^9, 3.763527486505896*^9}, {3.7635280302334538`*^9, 
   3.763528048932832*^9}, 3.763528360990526*^9, {3.7635284410916815`*^9, 
   3.7635284413778343`*^9}, {3.763528490671179*^9, 3.7635289508279347`*^9}, 
   3.76352995617459*^9, {3.7635300519122143`*^9, 3.763530061842*^9}, {
   3.7635300919675245`*^9, 3.763530159441712*^9}, {3.7635303876637435`*^9, 
   3.7635303925474052`*^9}, 3.7635304666530857`*^9, {3.763531128253516*^9, 
   3.7635311553590336`*^9}, {3.7635312504513144`*^9, 
   3.7635312511327896`*^9}, {3.7635313113411055`*^9, 
   3.7635313206018095`*^9}, {3.763531385366561*^9, 3.7635314658871355`*^9}, 
   3.7635317573041534`*^9, {3.763533529963821*^9, 3.763533536271834*^9}, 
   3.7953761370115414`*^9, {3.7956118290394526`*^9, 3.7956118517776947`*^9}, {
   3.8263463218647337`*^9, 3.8263463523242483`*^9}, {3.8263473142028522`*^9, 
   3.8263473213995852`*^9}},ExpressionUUID->"62a22101-7fed-49f2-93be-\
0790b252a43b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testo dell\[CloseCurlyQuote]esercizio", "Subsection",
 CellChangeTimes->{{3.667324682717662*^9, 
  3.6673246884576693`*^9}},ExpressionUUID->"ed713aea-f683-433a-ade1-\
e4f2ed102814"],

Cell[TextData[{
 StyleBox["1. Si completino i dettagli di un algoritmo del tipo appena \
descritto, spiegando tutte le scelte fatte.\n\n2. Lo si implementi in ",
  FontColor->GrayLevel[0]],
 StyleBox["Mathematica.",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["\n\n3. Si illustri con alcuni esempi il fatto che piccole \
variazioni nel dato in ingresso producono grandi variazioni dell\
\[CloseCurlyQuote]",
  FontColor->GrayLevel[0]],
 StyleBox["hash",
  FontWeight->"Regular",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[". Se questo non avviene, provare a modificare la funzione \
\[OpenCurlyDoubleQuote]f\[CloseCurlyDoubleQuote] scelta al passo 2. (Se \
volete, potete anche confrontare funzioni costruite con diverse scelte---ma \
non \[EGrave] obbligatorio).",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.4467820871875*^9, 3.446782105375*^9}, {
   3.447482576109375*^9, 3.447482616640625*^9}, {3.447482740578125*^9, 
   3.447482741796875*^9}, {3.44759730090625*^9, 3.447597323953125*^9}, {
   3.447597519765625*^9, 3.447597539328125*^9}, {3.447597820640625*^9, 
   3.447597867890625*^9}, {3.447598025546875*^9, 3.4475980771875*^9}, {
   3.4475986745625*^9, 3.447598787875*^9}, {3.44759889221875*^9, 
   3.447598896828125*^9}, {3.44764035925*^9, 3.447640369640625*^9}, {
   3.44764923189475*^9, 3.4476492588635*^9}, {3.447649742066625*^9, 
   3.447649753410375*^9}, {3.447649897301*^9, 3.447649995535375*^9}, {
   3.447650480785375*^9, 3.447650512910375*^9}, {3.4476505569885*^9, 
   3.447650558191625*^9}, {3.447650606379125*^9, 3.447650609879125*^9}, {
   3.44765081789475*^9, 3.447650823551*^9}, {3.447654973816625*^9, 
   3.447654978426*^9}, 3.447655046472875*^9, {3.44765512383225*^9, 
   3.447655124347875*^9}, {3.447656010910375*^9, 3.44765601101975*^9}, {
   3.449228978390625*^9, 3.449228980359375*^9}, {3.449229052953125*^9, 
   3.449229055734375*^9}, {3.449906652921875*^9, 3.4499066530625*^9}, {
   3.480910094890625*^9, 3.48091009621875*^9}, {3.513417196107136*^9, 
   3.51341726222399*^9}, {3.513419766251843*^9, 3.513419778598723*^9}, {
   3.66935568704338*^9, 3.669355694054781*^9}, {3.669356048221038*^9, 
   3.669356100337019*^9}, 3.669380257689827*^9, {3.669382463663001*^9, 
   3.669382533789012*^9}, {3.7322451332062674`*^9, 3.7322451332687397`*^9}, {
   3.732252849954892*^9, 3.7322528655059175`*^9}, {3.762865895827566*^9, 
   3.762865910994934*^9}, {3.762979830552809*^9, 3.7629799056993113`*^9}, {
   3.7629799524213552`*^9, 3.762980004613133*^9}, {3.7629800687821703`*^9, 
   3.762980195546301*^9}, {3.762980227177474*^9, 3.762980261077598*^9}, {
   3.763368097852532*^9, 3.763368171913046*^9}, 3.763435919058167*^9, {
   3.763465144658504*^9, 3.763465153957473*^9}, {3.763528973092169*^9, 
   3.763529003347492*^9}, {3.7635290865585566`*^9, 3.7635291888125577`*^9}, {
   3.7635302661296062`*^9, 3.7635302962759457`*^9}, {3.7635303465819473`*^9, 
   3.763530414913694*^9}, {3.7635318256834145`*^9, 3.7635318878640165`*^9}, {
   3.76353355510242*^9, 3.763533555972414*^9}, {3.763533601796842*^9, 
   3.763533639505486*^9}, {3.825698202425918*^9, 3.8256982030312505`*^9}, {
   3.8263473265818615`*^9, 3.8263473278972793`*^9}},
 FontSize->14,
 Background->RGBColor[
  0, 1, 0],ExpressionUUID->"2f3fa494-21e7-4bc9-833e-40387f28e680"]
}, Closed]],

Cell[CellGroupData[{

Cell["Suggerimenti ed osservazioni:", "Subsection",
 CellChangeTimes->{{3.667324682717662*^9, 3.6673246884576693`*^9}, 
   3.82634644019192*^9},ExpressionUUID->"186d4331-959b-4a69-a846-\
e6d28398f1c9"],

Cell[TextData[{
 StyleBox["Se si desiderano moltiplicare tra",
  FontColor->GrayLevel[0]],
 " loro tutti gli elementi di una lista basta \
\[OpenCurlyDoubleQuote]applicare\[CloseCurlyDoubleQuote] la funzione Times \
alla lista con ",
 StyleBox["Apply",
  FontWeight->"Bold"],
 "[",
 StyleBox["Times",
  FontWeight->"Bold"],
 ",",
 StyleBox["lista",
  FontSlant->"Italic"],
 "]."
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGCQAmIQfVqxvvjB+peOpxfaNoNpxfvTIPSHuRDx68sg9Po1
INrt+IllJ8NeO8ptizwIos/F9R8H0Suqda6AaE/LZ69A9Mq5Fd9B9M7ZjmWn
gPS3HdMrQPSnnd9bQTQLY1QbiO4r3jgBROc3rZwCou3sL24C01FMW0D0/HYF
Dq5zrx0nsOmAaaX5MiJbgfRaFjNREC27T0kKRBufFJEG0W6z+21B9M/m6y4g
+qhV81sJzjeOOgwNH0C0WgHn1AAgfWSB8zQQfeu9wywQvUW5H0yfMFmgxMf1
xnETf6UuiI5TVlblB9J3HhxWB9HXfr8x1QfSMau6zED0OTkDdVsgzXzngjGI
nnj5fTCIbrlaHw6iLVfkxIBoNmuVeBBdMyMiGUQHFR/LB9FRhf4lIJrp5Cow
3a7ivj8GSJsFbTwMogHGX80r
  "],
 FontSize->14,ExpressionUUID->"9782e8f0-5f82-455f-948e-72f865c08726"],

Cell[TextData[{
 StyleBox["L\[CloseCurlyQuote]applicazione iterativa della funzione ",
  FontColor->GrayLevel[0]],
 StyleBox["f",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox["  si pu\[OGrave] fare in varii modi funzionali. Il pi\[UGrave] \
semplice usa probabilmente la funzione  ",
  FontColor->GrayLevel[0]],
 StyleBox["Fold",
  FontWeight->"Bold",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->CompressedData["
1:eJwlyEsowwEAx/GZJZPsQol57MEuW4StRsM/DCea8lhranKj0aSJmsyjHIxi
RGtzYZ6LWHZhmNmoxTyGFCeFiRwsufj//jt8+9SXo9Eq2uk0Gi2LDJ5zDLpn
xytxvigzUnKezFG/LNEfWorqWIfyU9+Sv/GdyHS2HMKA2nQK7f3Ca1grfXmD
KxZ9BLoWiN4z0p+9WT38dkVGICNGOQondFuTUDu0Mg1Lyy63KZX0HWgdy45P
CLwTk3FCSq6VnbxLusGQpMCMfW4aLPQnp0P5gkkGf42hSnhSbPxIZYYJIW3w
C+Z2MWfqST22CjN8+Cyfhzs8E6WvyMZNSggT26w+EVTzeDks0sfnYwG8/QuL
80hVq+MSGMjMF8hIYx8vCuHU1WcDHL4xNEGpvUMF40r4rXBgrrkNKnReLVR2
1/VAun+VcoxffaAiNYjZbsiYqPJAXlauDwbvl4Nwc417BfXfmhCsOSp9go1u
0QtMdHZSFtRK4tOrw8Sd10f5D5Gq8OY=
  "],
 FontSize->14,ExpressionUUID->"394fb584-da3e-4efc-bbf6-236a6472b617"],

Cell[TextData[{
 StyleBox["Per rappresentare un numero in esadecimale si usa la funzione ",
  FontColor->GrayLevel[0]],
 StyleBox["BaseForm",
  FontWeight->"Bold",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->CompressedData["
1:eJwlyEsowwEAx/G/Wct2sAsl5rGNuUzUTI2Gf145EXmtRU1uajRpoibDymGb
YkRrXOZtWSO7eOS1UYt5LFptOSg2bTmQXPx//x2+ferLV6lb+hgEQWRTwRu+
ThN2vJM3q3I9LT9kSRi3Jn7AntCxDeuvPHZve4TMOeg6hb5u0xVcHxU/wEbZ
2wfcsGp/oHuZHL6m/D5c0MIv988UZCYppqFRs2eG6omNOVhZdeekVTBc0GbI
S+H4IqSZJaYV2Hhp+5Q7zLJ0mH0kyIQSb1oWrF82yeGvPlALL8r1nxnsKCkm
xuNQNMCeb6Y8X6mxwJdY9RJ0CU20ntIVQSonSjq5I0WwWygs4FIGw2eF8Okv
Ki2mVG7OlEFfTkmhnDI5eCuBs/exVjj5qOuAsvV+JWRV5PfAscXOXtiiuVRD
xWDTEGR4N2kN+Q3HSkqdlHcCmca6cyjMFXmg/3nND3e3BPdQ+6UKwDZH6BX+
A0Qe49k=
  "],
 FontSize->14,ExpressionUUID->"5e841029-22d5-4d2b-9985-59bf20c3d42f"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Soluzione", "Section",
 CellChangeTimes->{{3.667324682717662*^9, 3.6673246884576693`*^9}, {
  3.8252351968100967`*^9, 
  3.825235198281411*^9}},ExpressionUUID->"8ebfa61c-0666-4de9-80aa-\
bff0fe54eff0"],

Cell["\<\
Vogliamo implementare con Mathematica un algoritmo di Hashing\
\>", "Text",
 CellChangeTimes->{{3.857900580399433*^9, 3.8579006125389075`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"795fcc88-2244-44f2-a1b1-d32421b36ef5"],

Cell[TextData[{
 "L\[CloseCurlyQuote]Hashing consiste nel trasformare una sequenza di dati di \
dimensione qualunque in una di dimensione prefissata ( di solito l\
\[CloseCurlyQuote]hash \[EGrave] una sequenza di ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["256", " "], "bit"}], TraditionalForm]],ExpressionUUID->
  "5dfbacc6-b959-4aea-be11-022f17eeaa97"],
 " ) tramite un algoritmo. \nUna funzione di Hash deve possedere queste \
propriet\[AGrave] : a) deve essere deterministica, ossia uno stesso messaggio \
si deve sempre tradurre nello stesso valore di hash; b) deve essere semplice \
e veloce da calcolare qualunque sia il dato in input; c) deve essere molto \
difficile risalire al messaggio di partenza ( funzione unidirezionale ) dato \
il suo valore di hash se non provando tutti i messaggi possibili; d) ed \
infine la probabilit\[AGrave] che due stessi messaggi producano lo stesso \
valore di hash deve essere bassa (non pu\[OGrave] essere nulla dato che i \
valori in entrata hanno dimensione arbitraria).\n\
Quest\[CloseCurlyQuote]operazione pu\[OGrave] avere vari utilizzi come:\n- il \
controllo dell\[CloseCurlyQuote]integrit\[AGrave] di un messaggio, per \
controllare che i dati siano stati spediti correttamente o non vi siano state \
corruzioni del messaggio si controlla che coincidano i rispettivi valori di \
hash.\n- crittazione di password per la loro memorizzazione nel sistema: per \
determinate applicazioni che devono autenticare gli utenti, sarebbe rischioso \
salvare le password esplicitamente, perci\[OGrave] ne viene      memorizzato \
solo l\[CloseCurlyQuote]hash e viene confrontato con l\[CloseCurlyQuote]hash \
calcolato sulla password in input inserita dall\[CloseCurlyQuote]utente.\n- \
\[EGrave] usato nei blockchain.\n- sintetizzazione di dati per accelerarne le \
ricerche "
}], "Text",
 CellChangeTimes->{{3.8579008771690693`*^9, 3.8579008841287746`*^9}, {
   3.8579010928223176`*^9, 3.8579011369487123`*^9}, {3.857901337138136*^9, 
   3.857901364354721*^9}, {3.8579014083136187`*^9, 3.8579014603375616`*^9}, {
   3.857902511995907*^9, 3.857902629689422*^9}, {3.857902688304706*^9, 
   3.8579028084389353`*^9}, {3.857902838863763*^9, 3.857902969357795*^9}, {
   3.8579030315960026`*^9, 3.8579031486344624`*^9}, {3.8579835370695934`*^9, 
   3.857983541116324*^9}, 3.858068015392645*^9, {3.858068208262287*^9, 
   3.8580682204649763`*^9}, {3.8580685455863066`*^9, 
   3.8580685751770287`*^9}, {3.858068620198927*^9, 3.858068825949501*^9}, {
   3.8580688584214115`*^9, 3.858068919439062*^9}, {3.8580690709752927`*^9, 
   3.8580691033364687`*^9}, {3.858069239410801*^9, 3.858069318122672*^9}, {
   3.8580696590416517`*^9, 3.858069682180173*^9}, {3.858069739136448*^9, 
   3.858069778056923*^9}, {3.8580698266020794`*^9, 3.8580698698294067`*^9}, {
   3.858069900797046*^9, 3.8580699051718645`*^9}, {3.8580700347385187`*^9, 
   3.8580700913837123`*^9}, {3.8580705635125055`*^9, 
   3.8580707449905977`*^9}, {3.858071178233715*^9, 3.8580712193739147`*^9}, 
   3.8580713098862963`*^9, {3.8580725476972513`*^9, 3.858072562931076*^9}, {
   3.858072687412305*^9, 3.8580727216298285`*^9}, {3.8581795624819098`*^9, 
   3.858179671066983*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"cd55f64e-2846-4a3c-94fa-25fdf52fb36a"],

Cell[TextData[{
 "In questo esercizio costruiremo un algoritmo che prende in input una \
stringa di caratteri ASCII e la trasforma tramite \
l\[CloseCurlyQuote]appliazione in un numero intero in base 16 ( con cifre \
0,1,....,9,a,b,c,d,e,f ) < ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "29f82826-423e-4b52-9890-5a641e7dfbd1"],
 " ( numeri possibili dati dalla sequenza binaria di 256 bit )."
}], "Text",
 CellChangeTimes->{{3.8579037699867887`*^9, 3.8579037789083443`*^9}, {
   3.8579038316013*^9, 3.857904105911481*^9}, 3.8579041926427517`*^9, {
   3.8579043727613077`*^9, 3.8579044307904916`*^9}, {3.858072809220442*^9, 
   3.858072813251567*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"039cefb6-3b39-4fcb-98cc-326661489a1f"],

Cell[TextData[{
 "Innanzitutto trasformiamo una stringa di caratteri ASCII in numeri dispari \
minori di 256. \nQuesta operazione ci serve per ottenere numeri coprimi con ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "bb3231a0-f26e-499c-aa0e-a03d1bd8bcd8"],
 "(utile se si desiderano eseguire operazioni modulo  ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "da8062ba-8759-41e6-bbc4-69560ce494c0"],
 " ).\nPer fare ci\[OGrave] mi basta sostituire i numeri pari nella lista \
associati al codice ASCII con ToCharacterCode[#] + 127.\nQuest\
\[CloseCurlyQuote]ultima \[EGrave] una funzione iniettiva e suriettiva f: \
Range[128] \[Rule] Range[1, 256, 2] (numeri dispari da 1 a 256)"
}], "Text",
 CellChangeTimes->{{3.857904645728875*^9, 3.8579047229604845`*^9}, {
   3.8579048068012524`*^9, 3.8579048549645996`*^9}, {3.8579048901531787`*^9, 
   3.8579049276206017`*^9}, {3.857904976040734*^9, 3.8579050663812437`*^9}, {
   3.857905113442058*^9, 3.8579051668149285`*^9}, 3.8579052021730375`*^9, {
   3.8579052325782146`*^9, 3.857905388617937*^9}, {3.8579075168888702`*^9, 
   3.8579075199356375`*^9}, {3.858072914241658*^9, 3.8580729568338995`*^9}, {
   3.858137042540717*^9, 3.858137046087487*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"8f502057-01b2-4e66-a782-1281aae96167"],

Cell["\<\
La funzione Mod \[EGrave] Listable perci\[OGrave] possiamo applicarla \
direttamente ad una lista di numeri.
Costruiamo una funzione Tocc[stringa] che restituisce la codifica ASCII \
predefinita se il carattere \[EGrave] associato ad un numero dispari, \
altrimenti aggiunge a tale numero 127.
Mod[...] \[EGrave] 1 se e solo se il numero associato al carattere \[EGrave] \
pari.\
\>", "Text",
 CellChangeTimes->{{3.857907987408901*^9, 3.857908288819993*^9}},
 Background->RGBColor[
  1, 1, 0.85],ExpressionUUID->"24359df8-b5b3-4aaf-a491-ed6bc129b983"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Attributes", "[", "Mod", "]"}]], "Input",
 CellChangeTimes->{{3.8579077380272226`*^9, 3.8579077707291594`*^9}, 
   3.857966218997053*^9},ExpressionUUID->"f8e856e7-0a38-4084-95aa-\
23bed38f9213"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Listable", ",", "NumericFunction", ",", "Protected"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8579077480580935`*^9, 3.857907782525608*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"c5cf0e92-b0be-4e42-b57a-69ee22bd9a15"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Tocc", "[", "stringa_", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"ToCharacterCode", "[", "stringa", "]"}], "+", " ", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ToCharacterCode", "[", "stringa", "]"}], "+", "1"}], ",", 
      "2"}], "]"}], "*", " ", "127", " "}]}]}]], "Input",
 CellChangeTimes->{{3.8579054345381474`*^9, 3.8579054785990868`*^9}, {
   3.8579055161602445`*^9, 3.8579055624554596`*^9}, {3.857905624812584*^9, 
   3.8579056377496223`*^9}, {3.8579056858139772`*^9, 
   3.8579057078756733`*^9}, {3.857905739077696*^9, 3.857905748764841*^9}, {
   3.857905816762394*^9, 3.857905841339636*^9}, {3.8579059077903843`*^9, 
   3.857905913024572*^9}, {3.8579060906129894`*^9, 3.857906095065935*^9}, {
   3.857906280543677*^9, 3.857906308886423*^9}, {3.8579064511000814`*^9, 
   3.8579065698627005`*^9}, {3.85790692423575*^9, 3.8579069371103106`*^9}, 
   3.8579070889173546`*^9, {3.8579071271601353`*^9, 3.857907165971266*^9}, {
   3.8579072245003996`*^9, 3.8579072283752613`*^9}, {3.8579072602491198`*^9, 
   3.8579072653739557`*^9}, {3.857907305169387*^9, 3.857907319746984*^9}, {
   3.857908833509908*^9, 3.857908851634243*^9}, {3.857908998063583*^9, 
   3.8579090021884356`*^9}, {3.857966666215392*^9, 3.8579666697933936`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"cf9c79da-575c-4afa-95a8-871c3ceea793"],

Cell[TextData[{
 "Aggiungiamo in testa alla lista di numeri Tocc[stringa] un numero dispari \
dipendente dalla stringa (applico Join[...] nell\[CloseCurlyQuote]ordine \
desiderato).\nDecidiamo di assegnare la somma di tutti i numeri (sono tutti \
dispari) di Tocc[stringa] ( facendo un prodotto scalare con il vettore che ha \
1 in tutte le entrate )modulo ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "8b9fffff-4a6b-4b92-9077-be67889351dc"],
 ".\nVorremmo che tale numero sia dispari quindi applico un if che mi \
permette di aggiungere 1 se il risultato \[EGrave] pari.\nIn caso volessi \
assegnare il prodotto di tutti i numeri otterei ancora un numero dispari ma \
se la stringa \[EGrave] molto lunga potrebbe esservi un overflow (meno \
probabile con la somma)."
}], "Text",
 CellChangeTimes->{{3.8579708539155345`*^9, 3.857970909679178*^9}, {
  3.8579719705086207`*^9, 3.857972057083661*^9}, {3.857972302178479*^9, 
  3.8579723158967457`*^9}, {3.8579819613339033`*^9, 3.8579819697967205`*^9}, {
  3.858073061455135*^9, 3.8580730767202125`*^9}, {3.8581324293188877`*^9, 
  3.85813250247252*^9}, {3.858132557220558*^9, 3.858132644230451*^9}, {
  3.85813511809023*^9, 3.85813515127654*^9}, {3.8581352185241313`*^9, 
  3.8581352387421584`*^9}, {3.8581371233347034`*^9, 3.8581371400684743`*^9}, {
  3.858137210324152*^9, 3.8581372355576296`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"c7bac036-ca82-4299-9889-8f5ab15ae8c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lst", "[", "stringa_", "]"}], ":=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"n", ",", "1", ",", 
                 RowBox[{"Length", "[", 
                  RowBox[{"Tocc", "[", "stringa", "]"}], "]"}]}], "}"}]}], 
              "]"}], ".", 
             RowBox[{"Tocc", "[", "stringa", "]"}]}], ",", "2"}], "]"}], "==",
           "0"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"n", ",", "1", ",", 
               RowBox[{"Length", "[", 
                RowBox[{"Tocc", "[", "stringa", "]"}], "]"}]}], "}"}]}], 
            "]"}], ".", 
           RowBox[{"Tocc", "[", "stringa", "]"}]}], " ", "+", " ", "1"}], ",", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{"1", ",", 
            RowBox[{"{", 
             RowBox[{"n", ",", "1", ",", 
              RowBox[{"Length", "[", 
               RowBox[{"Tocc", "[", "stringa", "]"}], "]"}]}], "}"}]}], "]"}],
           ".", 
          RowBox[{"Tocc", "[", "stringa", "]"}]}]}], "]"}], ",", 
       SuperscriptBox["2", "256"]}], "]"}], "}"}], ",", 
    RowBox[{"Tocc", "[", "stringa", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8579721561278095`*^9, 3.857972251936391*^9}, {
   3.857972291434952*^9, 3.8579722931380205`*^9}, {3.857981977709985*^9, 
   3.857981982442003*^9}, {3.8579820284808464`*^9, 3.8579820644951854`*^9}, {
   3.8579821075234475`*^9, 3.8579821859962664`*^9}, {3.857982231424489*^9, 
   3.8579822769410253`*^9}, 3.858132550127062*^9, 3.8581326601986284`*^9, {
   3.8581326926646767`*^9, 3.85813273742266*^9}, {3.8581328939233694`*^9, 
   3.8581329302780275`*^9}, {3.858135256054038*^9, 3.8581353351293383`*^9}, {
   3.8581354097028894`*^9, 3.858135419780634*^9}, {3.8581354802292104`*^9, 
   3.858135554570298*^9}, 3.8581355886628275`*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"2c2c1419-290e-43cc-9ec6-ff65d6b68432"],

Cell["\<\
Dividiamo la lista ottenuta in sottoliste di lunghezza 32 su cui applicare l\
\[CloseCurlyQuote]algoritmo.
In caso la divisione non risulti compatibile con la lunghezza della lista \
aggiungiamo tanti 1 quanti necesssari alla fine di \
quest\[CloseCurlyQuote]ultima (con la funzione Join[...]) e poi usiamo \
Partition[...].\
\>", "Text",
 CellChangeTimes->{{3.857983943815317*^9, 3.857983956267996*^9}, {
   3.857983999985181*^9, 3.857984057623762*^9}, {3.8579842172451963`*^9, 
   3.8579843894184637`*^9}, {3.8579848015231256`*^9, 3.857984827590838*^9}, 
   3.85807312149988*^9, {3.858073168076316*^9, 3.858073168638818*^9}, {
   3.858081500216342*^9, 3.8580815091682615`*^9}, {3.8581372980761213`*^9, 
   3.858137300560398*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"ed48d176-19db-4005-b63f-d9ade31b6478"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nuovalst", "[", "stringa_", "]"}], ":=", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"lst", "[", "stringa", "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{"1", ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", " ", 
          RowBox[{"32", "-", " ", 
           RowBox[{"Mod", "[", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"lst", "[", "stringa", "]"}], "]"}], ",", "32"}], 
            "]"}]}]}], "}"}]}], "]"}]}], "]"}], ",", "32"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.857984402614484*^9, 3.857984473507107*^9}, 
   3.8579845141462765`*^9, {3.857984548646988*^9, 3.857984549162595*^9}, {
   3.8579845825676484`*^9, 3.8579845834269924`*^9}, {3.8579846258987026`*^9, 
   3.857984652647755*^9}, {3.85798469969479*^9, 3.8579847015853415`*^9}, {
   3.8580805517421274`*^9, 3.8580805795251756`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"3224d9f9-40ef-4d17-b545-ef3ed74cba38"],

Cell[TextData[{
 "Costruiamo ora l\[CloseCurlyQuote]algoritmo di hashing.\nScegliamo una \
funzione di due variabili m (un intero chaive) e b (blocco di divisione della \
lista che abbiamo costruito sopra): f :  (m, b) \[Rule] f [m, b].\nQuesta \
funzione associa un intero eseguendo su m e sugli elementi del blocco \
operazioni modulo ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "f7643551-8969-4b19-aae2-89d130e1e1aa"],
 ".\nSi procede in questo modo: si sceglie m1 l\[CloseCurlyQuote]intero \
chiave coprimo con ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "256"], TraditionalForm]],ExpressionUUID->
  "b0dea3df-9561-496a-b4a4-986f03e3e725"],
 " e si applica f al primo blocco in cui \[EGrave] stata suddivisa la lista, \
questo risultato sar\[AGrave] m2 (la seconda chiave ) da utilizzare per \
applicare f al secondo blocco e cos\[IGrave] via.\nAlla fine verr\[AGrave] \
restituito solo il risultato relativo all\[CloseCurlyQuote]ultima valutazione \
di f  in rappresentazione esadecimale."
}], "Text",
 CellChangeTimes->{{3.857984865541005*^9, 3.8579848763218575`*^9}, {
   3.857985045816578*^9, 3.857985046254058*^9}, {3.8579852829707937`*^9, 
   3.8579853352657967`*^9}, 3.857985399916354*^9, {3.8579854300760098`*^9, 
   3.8579854737203274`*^9}, {3.8579855045454035`*^9, 3.857985555922482*^9}, {
   3.857985612529832*^9, 3.8579856180140085`*^9}, {3.857985654965807*^9, 
   3.8579856920582395`*^9}, {3.857986046883916*^9, 3.8579861703204913`*^9}, {
   3.8579862010618205`*^9, 3.8579862311701274`*^9}, {3.8579862706374483`*^9, 
   3.8579862763716373`*^9}, {3.8579863630683365`*^9, 
   3.8579864205662775`*^9}, {3.8579864791579294`*^9, 
   3.8579864847358556`*^9}, {3.8579865594546485`*^9, 3.857986602980075*^9}, {
   3.8579870278406186`*^9, 3.857987042183854*^9}, {3.85807318934118*^9, 
   3.858073208965477*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"274ba678-3fe1-43d3-9d11-9855b52eb376"],

Cell[TextData[{
 "Per la scelta di f abbiamo cercato di far dipendere f oltre che dai \
caratteri contenuti nella stringa, anche dall\[CloseCurlyQuote]ordine in cui \
sono disposti in essa.\nScegliamo m coprimo con ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "19372a38-ab5a-4ca9-8b87-d0683049962e"],
 ", in questo caso m1=37.\nLa funzione calcola il prodotto scalare tra un \
vettore costituito da m elevato i primi 33 numeri primi, tolto 2, e un \
vettore composto dalle componenti inverse del blocco modulo ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "2180f0ac-d157-4194-8b12-bfbda0a2a55e"],
 ".\nIl primo vettore \[EGrave] stato costruito con la funzione ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Map", "[", 
    SuperscriptBox["m", 
     RowBox[{"#", " "}]]}], TraditionalForm]],ExpressionUUID->
  "806d3be8-3c65-44ef-a688-8a62aadc03a8"],
 " &, Table[ Prime[n], {n, 2, 33}] ] (Prime[n] trova \
l\[CloseCurlyQuote]n-esimo primo); escludendo 2, l\[CloseCurlyQuote]unico \
primo pari, siamo sicuri che tale vettore sia costituito solo da componenti \
dispari ( poich\[EGrave] elevamento a potenza di un numero dispari ). La \
scelta dei primi 33 numeri primi \[EGrave] solamente motivata dal fatto che \
non volevamo utilizzare tutti interi dispari consecutivi.\nPer il secondo \
vettore \[EGrave] possibile eseguire le inverse ( con PowerMod[ #, -1, ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "b713f52d-5e8d-4d20-a4d1-581b8e948fea"],
 "], mi d\[AGrave] l\[CloseCurlyQuote]inversa modulo ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "c6e148f8-d317-4407-8120-bd58a4e59f50"],
 ") di ogni componente del vettore poich\[EGrave] ogni numero \[EGrave] \
dispari (per come abbiamo costruito i blocchi nei punti precedenti) e perci\
\[OGrave] coprimo con ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "0f60155c-f7bb-436e-8bc3-097a24d2d432"],
 ".\nAvendo scelto il primo vettore con entrate diverse, quando eseguiamo il \
prodotto scalare con  .  non rischiamo di avere una semplice somma delle \
componenti del secondo vettore, in questo caso avrei avuto il medesimo output \
per un blocco relativo ad un anagramma della sottostringa di lunghezza 32.\n\
Ora eseguiamo nuovamente l\[CloseCurlyQuote]inverso del risultato del \
prodotto scalare + 1 modulo ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "c3e0fe04-93dd-4342-8a96-32edadef882c"],
 "per avere la certezza che il risultato finale sia < ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "a849d4df-51f2-45f4-be7a-57017c611406"],
 ".\nAbbiamo aggiunto 1 sopra poich\[EGrave] il prodotto scalare mi \
d\[AGrave] la somma di 32 numeri dispari ( prodotto di due numeri dispari \
poich\[EGrave] il primo vettore ha solo componenti dispari, come mostrato \
sopra, ed il secondo anche, avendo come componenti inverse di dispari che \
sono dispari: ci \[Times] bi = h \[Times] ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", 
    RowBox[{"256", " "}]], TraditionalForm]],ExpressionUUID->
  "1a357322-09f2-4257-9f49-ebfa0693da61"],
 " + 1 con ci inversa i-esima relativa a bi) che \[EGrave] pari .\nIn questo \
modo il risultato finale sar\[AGrave] nuovamente dispari e iterando f ottengo \
come futuro argomento mi, un numero dispari."
}], "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQ/abjEsfWfW8cIzSuc4LoE/8TjEB0Jd8tKxD9aLeP
I4jWu/jCGUQrvFkTBqIPqB7NBdEPfJOLQfScryKtIHr2a7kuEJ3qunsTiK57
f3sniLbLm3ccRMed7r0AovX1wl+D6BKXeMZtQJpvp4YAiM74fUAbRL+r9kwB
0emHwjJAtK3D91IQzbZ6ahWIlln3rRZEf10q3gyir5UotoLoDX01XSD62+yS
XhC9xCm29hyQ7rcubgDRPKHTVS8A6ZxASXUQzXxolS6IZnlz3RpEl1y55Aqi
Od07vEH0L9aJi64A6Rn/vZaCaAACXbEU
  "],
 Background->RGBColor[
  1, 1, 0.85],ExpressionUUID->"d6a8cb3e-a829-44e0-afcf-b6932bca11a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"m1", "=", "37"}], ";"}]], "Input",
 CellChangeTimes->{{3.8580850805172467`*^9, 3.8580850988120146`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"56f92f6e-6d36-4c31-926d-5a92ee75c6d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"m_", ",", "b_"}], "]"}], ":=", " ", 
  RowBox[{"PowerMod", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          SuperscriptBox["m", "#"], " ", "&"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Prime", "[", "n", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "2", ",", "33"}], "}"}]}], "]"}]}], "]"}], ".", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"PowerMod", "[", 
           RowBox[{"#", " ", ",", 
            RowBox[{"-", "1"}], ",", 
            SuperscriptBox["2", "256"]}], "]"}], " ", "&"}], ",", "b"}], 
        "]"}]}], " ", ")"}], " ", "+", "1"}], ",", 
    RowBox[{"-", "1"}], ",", 
    SuperscriptBox["2", "256"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8580796680870686`*^9, 3.858079696500336*^9}, {
  3.858079944557026*^9, 3.858080013524131*^9}, {3.858080057739911*^9, 
  3.8580801959707656`*^9}, {3.858080230634328*^9, 3.858080298000947*^9}, {
  3.858080354489215*^9, 3.8580803786889057`*^9}, {3.858080410967492*^9, 
  3.8580804244486723`*^9}, {3.8580806569733872`*^9, 3.8580806616462154`*^9}, {
  3.858080745413616*^9, 3.858080818579236*^9}, {3.858080874291544*^9, 
  3.858080886658536*^9}, {3.8580809328252296`*^9, 3.8580809404337463`*^9}, {
  3.8580810712569714`*^9, 3.8580811383261185`*^9}, {3.8580812234070096`*^9, 
  3.8580812443644433`*^9}, {3.8580860777363124`*^9, 3.858086160206323*^9}, {
  3.858086197773247*^9, 3.8580862221250067`*^9}, {3.85813147961654*^9, 
  3.858131483928871*^9}, {3.8581316910933437`*^9, 3.858131725076485*^9}, {
  3.858133489073717*^9, 3.858133497495303*^9}, {3.8581336580774193`*^9, 
  3.858133661592903*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"8fa1a3cf-a965-4fc7-b965-ad1a22984da2"],

Cell["\<\
Costruiamo anche la funzione che mappa nello stesso risultato tutti gli \
anagrammi. Non sar\[AGrave] una buona funzione per \
l\[CloseCurlyQuote]algoritmo di hashing.
Definiamola come la prima funzione ma il primo vettore ha componente costante \
m.\
\>", "Text",
 CellChangeTimes->{{3.858085870007065*^9, 3.85808596424585*^9}, {
  3.858086285360595*^9, 3.858086317910747*^9}, {3.858137712039216*^9, 
  3.8581377477423625`*^9}},
 Background->RGBColor[
  1, 1, 0.85],ExpressionUUID->"70018d36-7ec0-46f6-9f7a-bbfc7d4831df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f2", "[", 
   RowBox[{"m_", ",", "b_"}], "]"}], ":=", " ", 
  RowBox[{"PowerMod", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{"m", ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", "32"}], "}"}]}], "]"}], ".", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"PowerMod", "[", 
          RowBox[{"#", ",", 
           RowBox[{"-", "1"}], ",", 
           SuperscriptBox["2", "256"]}], "]"}], " ", "&"}], ",", "b"}], 
       "]"}]}], "  ", "+", "1"}], ",", 
    RowBox[{"-", "1"}], ",", 
    SuperscriptBox["2", "256"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.858085979668956*^9, 3.8580860637185373`*^9}, 
   3.8580862481321883`*^9, {3.858131770246742*^9, 3.8581317755590515`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"21a9c8e6-c8c6-46a0-b536-dad9447772e5"],

Cell["\<\
Iteriamo ora f, con Fold[...], come descritto in precedenza e riportiamo il \
risultato finale in base esadecimale (Con BaseForm[ n, base] ).\
\>", "Text",
 CellChangeTimes->{{3.8580851484163136`*^9, 3.858085178920854*^9}, {
   3.858085210328431*^9, 3.8580852191054564`*^9}, 3.8580852590794563`*^9, {
   3.858085463012313*^9, 3.8580854844771748`*^9}, {3.8580855253662095`*^9, 
   3.8580855493963003`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"b3db1cdc-3be1-4702-8a8c-9bc06d62a534"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hash", "[", 
   RowBox[{"f_", ",", "stringa_"}], "]"}], ":=", 
  RowBox[{"BaseForm", "[", 
   RowBox[{
    RowBox[{"Fold", "[", 
     RowBox[{"f", ",", "m1", ",", 
      RowBox[{"nuovalst", "[", "stringa", "]"}]}], "]"}], ",", "16"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8580852251502824`*^9, 3.8580853286554985`*^9}, {
  3.8580853855113153`*^9, 3.858085452630769*^9}, {3.85813429513864*^9, 
  3.8581343009978204`*^9}, {3.8581356607852454`*^9, 3.858135673566037*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"8cf4aa2f-a069-46ec-ad12-bf14aa01a6f7"],

Cell["\<\
Verifichiamo che f sia una buona funzione di hash, ossia che anche piccole \
variazione dei dati in input mi diano grandi variazioni negli hash finali. \
\>", "Text",
 CellChangeTimes->{{3.858086691460493*^9, 3.858086760955574*^9}, {
  3.8581377934907207`*^9, 3.8581377948969207`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"a90d647b-22e8-4f1f-877b-d36ea894fd92"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "mex", "=", " ", 
   "\"\<Quel ramo del lago di Como, che volge a mezzogiorno, tra due catene \
non interrotte di monti, tutte a seni e a golfi, a seconda dello sporgere e \
del rientrare di quelli, vien, quasi a un tratto, a ristringersi, e a prender \
corso e figura di fiume, tra un promontorio a destra, e \
un\[CloseCurlyQuote]ampia costiera dall\[CloseCurlyQuote]altra parte; e il \
ponte, che ivi congiunge le due rive, par che renda ancor pi\[UGrave] \
sensibile all\[CloseCurlyQuote]occhio questa trasformazione, e segni il punto \
in cui il lago cessa, e l\[CloseCurlyQuote]Adda rincomincia, per ripigliar \
poi nome di lago dove le rive, allontanandosi di nuovo, lascian l\
\[CloseCurlyQuote]acqua distendersi e rallentarsi in nuovi golfi e in nuovi \
seni.\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.858134881208085*^9, 3.858134933253117*^9}, 
   3.8581350087191443`*^9, {3.8581356468169956`*^9, 3.858135649785639*^9}, {
   3.858135693002841*^9, 3.8581357095796785`*^9}, 3.8581357786240625`*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"72ee5600-73bc-4a6f-935f-c11aa836f0ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "abbiamo", " ", "tolto", " ", "la", " ", "parola", " ", "finale", " ", 
    "del", " ", "messaggio"}], " ", "*)"}], 
  RowBox[{
   RowBox[{
   "mex2", "=", 
    "\"\<Quel ramo del lago di Como, che volge a mezzogiorno, tra due catene \
non interrotte di monti, tutte a seni e a golfi, a seconda dello sporgere e \
del rientrare di quelli, vien, quasi a un tratto, a ristringersi, e a prender \
corso e figura di fiume, tra un promontorio a destra, e \
un\[CloseCurlyQuote]ampia costiera dall\[CloseCurlyQuote]altra parte; e il \
ponte, che ivi congiunge le due rive, par che renda ancor pi\[UGrave] \
sensibile all\[CloseCurlyQuote]occhio questa trasformazione, e segni il punto \
in cui il lago cessa, e l\[CloseCurlyQuote]Adda rincomincia, per ripigliar \
poi nome di lago dove le rive, allontanandosi di nuovo, lascian l\
\[CloseCurlyQuote]acqua distendersi e rallentarsi in nuovi golfi e in nuovi\>\
\""}], ";"}]}]], "Input",
 CellChangeTimes->{{3.858135728438363*^9, 3.858135781920822*^9}, {
  3.8581378239740086`*^9, 3.8581378503637047`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"069c363e-8abf-434c-b178-9d9f60c6e149"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "togliamo", " ", "una", " ", "sola", " ", "lettera", " ", "al", " ", 
    RowBox[{"centro", " ", ":", " ", "e"}]}], " ", "*)"}], " ", 
  RowBox[{
   RowBox[{
   "mex3", "=", " ", 
    "\"\<Quel ramo del lago di Como, che volge a mezzogiorno, tra due catene \
non interrotte di monti, tutte a seni e a golfi, a seconda dello sporgere e \
del rientrare di quelli, vien, quasi a un tratto, a ristringersi, e a prender \
corso figura di fiume, tra un promontorio a destra, e \
un\[CloseCurlyQuote]ampia costiera dall\[CloseCurlyQuote]altra parte; e il \
ponte, che ivi congiunge le due rive, par che renda ancor pi\[UGrave] \
sensibile all\[CloseCurlyQuote]occhio questa trasformazione, e segni il punto \
in cui il lago cessa, e l\[CloseCurlyQuote]Adda rincomincia, per ripigliar \
poi nome di lago dove le rive, allontanandosi di nuovo, lascian l\
\[CloseCurlyQuote]acqua distendersi e rallentarsi in nuovi golfi e in nuovi \
seni.\>\""}], ";"}]}]], "Input",
 CellChangeTimes->{{3.8581379848901367`*^9, 3.8581380761056013`*^9}, {
  3.8583332455797296`*^9, 3.8583332469546804`*^9}, {3.8583333017788224`*^9, 
  3.8583333024018736`*^9}, {3.8583333885746193`*^9, 3.8583334607354684`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"fff592c8-fb8a-4ba6-aea9-58a19e335b76"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hash", "[", 
  RowBox[{"f", ",", "mex"}], "]"}]], "Input",
 CellChangeTimes->{{3.858131062509885*^9, 3.8581310741500936`*^9}, {
  3.8581311462906065`*^9, 3.8581311554309063`*^9}, {3.858131222616*^9, 
  3.858131223803454*^9}, {3.8581317870586405`*^9, 3.8581317876523685`*^9}, {
  3.858132975025657*^9, 3.8581329769318376`*^9}, {3.8581334094047155`*^9, 
  3.858133411310878*^9}, {3.8581335660553417`*^9, 3.858133567774025*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"048d22b2-95e8-4ba0-bffd-6585dd2311c6"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   StyleBox[
    SubscriptBox["\<\"\
3583904b0b322e5b518c7895a4e6e45ddb4184ac1756d3c7cd80873c12c2f5af\"\>", \
"\<\"16\"\>"],
    ShowStringCharacters->False],
   242050338150481033161314743034724348320084829527614229350520348851284645615\
83,
   Editable->False],
  BaseForm[#, 16]& ]], "Output",
 CellChangeTimes->{
  3.858133199066739*^9, 3.8581334127326984`*^9, {3.858133550805879*^9, 
   3.858133571023904*^9}, 3.858133707080941*^9, 3.8581343124661465`*^9, 
   3.858134491541393*^9, {3.8581349163786974`*^9, 3.8581349372841997`*^9}, 
   3.8581350124533825`*^9, {3.858135641426561*^9, 3.858135679972056*^9}, 
   3.8581357165325365`*^9, 3.858137867722435*^9},
 CellLabel->
  "Out[63]//BaseForm=",ExpressionUUID->"22e696f5-36ac-49ec-a1d6-100222908d58"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hash", "[", 
  RowBox[{"f", ",", "mex2"}], "]"}]], "Input",
 CellChangeTimes->{{3.858135760687208*^9, 3.858135767796344*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"f38dde15-cc9f-44e5-b1fc-382aa69b4a3d"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   StyleBox[
    SubscriptBox["\<\"\
d53365c7b4511e08e81ecbf0dd8e1632d41c79a00eb0436af259fdf573c3887b\"\>", \
"\<\"16\"\>"],
    ShowStringCharacters->False],
   964334484089394331659224072030820778059337675668593892809369859832482451641\
55,
   Editable->False],
  BaseForm[#, 16]& ]], "Output",
 CellChangeTimes->{3.8581357686087966`*^9, 3.858137870784827*^9},
 CellLabel->
  "Out[64]//BaseForm=",ExpressionUUID->"0414d448-c46f-4bf4-9733-932f7c721229"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hash", "[", 
  RowBox[{"f", ",", "mex3"}], "]"}]], "Input",
 CellChangeTimes->{{3.858138083027229*^9, 3.8581380910269556`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"01d4c188-aed8-4bbe-8833-b2af6b329ad2"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   StyleBox[
    SubscriptBox["\<\"\
c40be84ef86498ff4f60dde4bfa2c567ec2f8768e0e0bd33bc31e0b7fb1cc04f\"\>", \
"\<\"16\"\>"],
    ShowStringCharacters->False],
   886743569742199016022707752165678318119059739035456223560470539620456656241\
43,
   Editable->False],
  BaseForm[#, 16]& ]], "Output",
 CellChangeTimes->{
  3.8581380920269036`*^9, 3.858333289363849*^9, {3.8583334034956255`*^9, 
   3.858333428443547*^9}, 3.858333464782176*^9},
 CellLabel->
  "Out[43]//BaseForm=",ExpressionUUID->"22740a30-d6f6-4149-a97e-7644373ea33f"]
}, Open  ]],

Cell["\<\
Notiamo che anche piccole variazioni del messaggio producono ampi cambiamenti \
nell\[CloseCurlyQuote]output finale.\
\>", "Text",
 CellChangeTimes->{{3.8581381146042433`*^9, 3.858138183899685*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"4965abf6-5068-4b77-8929-d10b10798c8f"],

Cell["Verifichiamo che f2 non \[EGrave] una buona funzione di hash:", "Text",
 CellChangeTimes->{{3.858138209664368*^9, 3.858138242303824*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"e7f908cf-79be-4bb0-b3e6-7b29be77a561"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"alcuni", " ", "anagrammi", " ", "di", " ", "ciao"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"mess1", "=", "\"\<ciao\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mess2", "=", "\"\<icoa\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"mess3", "=", " ", "\"\<coai\>\""}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.8581383114149027`*^9, 3.858138411145711*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"810d4269-ab32-40fb-9e0f-6d7443628bbd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"hash", "[", 
    RowBox[{"f2", ",", "mess1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"hash", "[", 
    RowBox[{"f2", ",", "mess2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c", "=", 
   RowBox[{"hash", "[", 
    RowBox[{"f2", ",", "mess3"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.858138332320409*^9, 3.858138332617293*^9}, {
  3.858138419786027*^9, 3.858138434691763*^9}, {3.8581386007689257`*^9, 
  3.85813863889254*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"af5d5665-bcd1-42a6-b7a2-6c88c8ff99c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hash", "[", 
  RowBox[{"f2", ",", "mess2"}], "]"}]], "Input",
 CellChangeTimes->{{3.858138459909585*^9, 3.8581384673518267`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"35735e62-98e8-453e-bc26-5d95d3e2f9bf"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   StyleBox[
    SubscriptBox["\<\"\
90c6720fb2770707dc42c6f9acf3f57cf4abb93b2b8107124cd869083ab2c51d\"\>", \
"\<\"16\"\>"],
    ShowStringCharacters->False],
   654836731370937671300378238207800734971131258457293598020413512181429873390\
37,
   Editable->False],
  BaseForm[#, 16]& ]], "Output",
 CellChangeTimes->{3.858138468554887*^9},
 CellLabel->
  "Out[72]//BaseForm=",ExpressionUUID->"b51071e7-511c-4d04-a8cc-e8ba1e437cab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"a", "==", "b"}], "\[IndentingNewLine]", 
 RowBox[{"b", "==", "c"}]}], "Input",
 CellChangeTimes->{{3.858138652673297*^9, 3.8581386603136683`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"46acd5d2-1728-461f-ae1b-64e95cef2ddf"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8581386611886225`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"316a635d-39d9-4da0-89fd-4a03a3d3b5ec"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.858138661204239*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"f7e89ba4-d439-4e11-9765-a75c4685467d"]
}, Open  ]],

Cell["Tutti e tre i messaggi avrebbero medesima codifica hash", "Text",
 CellChangeTimes->{{3.858138516287555*^9, 3.8581385326463585`*^9}},
 Background->RGBColor[
  1, 0.9, 1],ExpressionUUID->"8d840752-8aa4-415f-9dd1-6789867c89bd"],

Cell["verifichiamo che con f avrebbero output diversi:", "Text",
 CellChangeTimes->{{3.8581387153043795`*^9, 3.858138730571973*^9}},
 Background->RGBColor[
  1, 1, 0.85],ExpressionUUID->"0aa11aa3-9f8c-4b1e-aedd-5428d4f90f53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hash", "[", 
  RowBox[{"f", ",", "mess1"}], "]"}]], "Input",
 CellChangeTimes->{{3.858138769821101*^9, 3.8581387802738485`*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"05fed57e-3489-42d4-8e83-73a723319b9a"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   StyleBox[
    SubscriptBox["\<\"\
1fa2c3413b45dc1c555b29fc4b874019ae92bd2f5d62520097f0e4b1c216d685\"\>", \
"\<\"16\"\>"],
    ShowStringCharacters->False],
   143092751297516776919758556924743684033411009548784215052960672189701815558\
45,
   Editable->False],
  BaseForm[#, 16]& ]], "Output",
 CellChangeTimes->{3.858138781133191*^9},
 CellLabel->
  "Out[79]//BaseForm=",ExpressionUUID->"9338d984-ac0d-456c-8097-692a81463497"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hash", "[", 
  RowBox[{"f", ",", "mess2"}], "]"}]], "Input",
 CellChangeTimes->{{3.8581387831174965`*^9, 3.8581387882735653`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"d7197215-6b27-41bf-9762-4551c16e08e1"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   StyleBox[
    SubscriptBox["\<\"\
1d2a91f94cecd9ddc19815ad7de803828656cbf351209fa896264d0521105925\"\>", \
"\<\"16\"\>"],
    ShowStringCharacters->False],
   131922876599835911901616841675320453878964198122499833833495896675275862408\
05,
   Editable->False],
  BaseForm[#, 16]& ]], "Output",
 CellChangeTimes->{3.8581387905547295`*^9},
 CellLabel->
  "Out[80]//BaseForm=",ExpressionUUID->"e3ffc1fe-2e6a-429d-b93f-39d1205a23d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hash", "[", 
  RowBox[{"f", ",", "mess3"}], "]"}]], "Input",
 CellChangeTimes->{{3.858138808100981*^9, 3.8581388172256536`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"6fee5b5d-4bef-4576-94d9-2b70c61acef2"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   StyleBox[
    SubscriptBox["\<\"\
e5f4de600ca85c87632cc881ef04de517ec1bb6f35833e5d78bfb2bc69c08675\"\>", \
"\<\"16\"\>"],
    ShowStringCharacters->False],
   104012287786550803645102533394272828127265356890470707608951289400225490306\
677,
   Editable->False],
  BaseForm[#, 16]& ]], "Output",
 CellChangeTimes->{3.8581388181006174`*^9},
 CellLabel->
  "Out[81]//BaseForm=",ExpressionUUID->"c470f56b-6e3d-4fb5-9df4-0e9449854c27"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]]
},
WindowSize->{1012.5, 507.75},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
ShowGroupOpener->{"InsideFrame", "Inline"},
TaggingRules->{
 "PresenterSettings" -> {"SlideBreakStyles" -> {}, "ShowSlideBreaks" -> True},
   "TryRealOnly" -> False},
Background->RGBColor[0.9, 1, 1],
FrontEndVersion->"13.0 para Microsoft Windows (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"97e1f15e-2322-4f57-bcee-454eab3dea8b"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1029, 18, 58, "Text",ExpressionUUID->"5d4dcf10-34f9-4c33-8fc6-a92503dd0718"],
Cell[CellGroupData[{
Cell[1612, 42, 631, 9, 98, "Title",ExpressionUUID->"7b2098f2-09d9-417a-a241-25aa2d0aa38c"],
Cell[2246, 53, 253, 3, 33, "Text",ExpressionUUID->"05de0121-3d84-41a7-9b60-c7b0c4d67c73"],
Cell[2502, 58, 326, 6, 33, "Text",ExpressionUUID->"cd5afc3f-80ce-428c-89f4-a8b7c4e29249"],
Cell[2831, 66, 327, 7, 75, "Text",ExpressionUUID->"983a8daa-e68a-4ac6-b3f3-d5bad2fbe222"],
Cell[3161, 75, 448, 6, 33, "Text",ExpressionUUID->"1a7e8a7e-cc5e-4d34-8c16-a590db3bfd14"],
Cell[3612, 83, 247, 5, 43, "Input",ExpressionUUID->"743eb0ff-8420-45f5-864f-668802c187e9"],
Cell[CellGroupData[{
Cell[3884, 92, 446, 6, 69, "Chapter",ExpressionUUID->"5a75014c-3adc-4182-82c3-f3cd577408b0"],
Cell[CellGroupData[{
Cell[4355, 102, 184, 3, 67, "Section",ExpressionUUID->"7971920d-dc7e-4236-9ffb-877ec956e631"],
Cell[CellGroupData[{
Cell[4564, 109, 187, 3, 54, "Subsection",ExpressionUUID->"ae908165-ab5c-4107-98f6-3972c44f7fd1"],
Cell[4754, 114, 263, 5, 49, "Text",ExpressionUUID->"84277386-c2c4-4856-ba8c-0de68d9d4957"],
Cell[5020, 121, 733, 11, 102, "Input",ExpressionUUID->"d44c021d-6ff5-4c8c-bfc2-97bde9d50f7f"],
Cell[5756, 134, 480, 10, 49, "Text",ExpressionUUID->"239a9b25-2c42-4185-8a96-45a5b7a72494"],
Cell[6239, 146, 25872, 431, 439, "Text",ExpressionUUID->"a30828a6-7578-4626-bb72-58cb0bda777f"],
Cell[32114, 579, 2119, 42, 70, "Text",ExpressionUUID->"8094ed08-1e66-47c7-ad3a-f0e851550012"],
Cell[34236, 623, 1172, 17, 49, "Text",ExpressionUUID->"61fbb08c-0870-47db-a3d6-a2bba1f789e8"],
Cell[CellGroupData[{
Cell[35433, 644, 194, 2, 38, "Subsubsection",ExpressionUUID->"af37f961-acae-4c4e-9d3f-cb4f4c0f4821"],
Cell[35630, 648, 950, 17, 33, "Text",ExpressionUUID->"04b4b8b2-32d1-4d71-8db1-7091ae2c2105"],
Cell[36583, 667, 1216, 19, 54, "Text",ExpressionUUID->"b380a678-edf5-4801-9953-a23f98b94594"],
Cell[37802, 688, 813, 15, 33, "Text",ExpressionUUID->"9dc93538-81b7-442b-bb95-b4ab7c2bd574"],
Cell[38618, 705, 839, 13, 33, "Text",ExpressionUUID->"0105d1a0-c2e0-4527-81f0-ea45b49050e1"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[39518, 725, 207, 4, 53, "Section",ExpressionUUID->"e8348b9e-0bde-42f8-90a8-08a9bd9a88c4"],
Cell[39728, 731, 1060, 20, 189, "Text",ExpressionUUID->"d87aa82b-215c-4468-acc4-c76c58c439f6"],
Cell[40791, 753, 474, 9, 74, "Text",ExpressionUUID->"0e2f33e5-02ad-4e4f-a239-e00aa321a61c"],
Cell[CellGroupData[{
Cell[41290, 766, 260, 5, 64, "Input",ExpressionUUID->"aa8dcf5b-3f19-4cb3-974e-0e648e453cd2"],
Cell[41553, 773, 501, 9, 32, "Output",ExpressionUUID->"7a123f46-013b-49d3-820b-a380d275e43b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42091, 787, 182, 3, 43, "Input",ExpressionUUID->"af783879-03ce-4eb6-b4ca-10f2084c19d8"],
Cell[42276, 792, 479, 9, 32, "Output",ExpressionUUID->"fc6f658a-8425-4e92-9068-ab0c7ba0b041"]
}, Open  ]],
Cell[42770, 804, 1031, 17, 120, "Text",ExpressionUUID->"faec54a4-411e-4c54-ae72-1a626fc8b4d3"],
Cell[43804, 823, 820, 18, 118, "Input",ExpressionUUID->"628638dc-ba33-4cd1-b82b-1a02381e6081"],
Cell[44627, 843, 684, 12, 74, "Text",ExpressionUUID->"66012fd9-7b14-421b-84a5-7d93599a07d5"],
Cell[45314, 857, 1633, 43, 48, "Input",ExpressionUUID->"7f3b0b73-2e5c-442f-ba2c-d27c96b4d128"],
Cell[46950, 902, 910, 14, 74, "Text",ExpressionUUID->"ef12252c-9f3a-4778-b70d-0cde381b4a96"],
Cell[47863, 918, 1317, 25, 181, "Input",ExpressionUUID->"77d691fa-6a70-4f4a-ada8-6e81cdada4da"],
Cell[49183, 945, 763, 13, 28, "Input",ExpressionUUID->"566f9479-593b-497f-8578-addb9399b30f"],
Cell[49949, 960, 3139, 60, 288, "Text",ExpressionUUID->"4e69844c-d5b2-45ac-9c0c-24690c8a2cd9"],
Cell[53091, 1022, 547, 15, 59, "Input",ExpressionUUID->"90c39f4f-e759-4591-a557-e36e865a8d52"],
Cell[53641, 1039, 672, 12, 28, "Input",ExpressionUUID->"e1c97f9f-fd47-400a-b75f-20112563c9f0"],
Cell[54316, 1053, 3122, 67, 236, "Text",ExpressionUUID->"9a410ea8-ae9d-4ec0-9d0c-6f9088fc195d"],
Cell[57441, 1122, 894, 20, 43, "Input",ExpressionUUID->"4736ab38-5c69-4354-9b68-9dbe517e8148"],
Cell[58338, 1144, 853, 20, 74, "Text",ExpressionUUID->"4ef9f4d0-5098-48ae-8a3b-1079b1bfe7ab"],
Cell[59194, 1166, 551, 11, 97, "Text",ExpressionUUID->"7f1fda2f-efb9-45d7-b88e-1e5a5e974b66"],
Cell[59748, 1179, 517, 13, 43, "Input",ExpressionUUID->"327db2ed-1cf9-4aec-b278-3329f6e18bcd"],
Cell[60268, 1194, 1924, 32, 235, "Text",ExpressionUUID->"a0a61049-34ae-4c58-8e9b-554d49497da1"],
Cell[62195, 1228, 1836, 47, 118, "Input",ExpressionUUID->"017900af-4ffd-4046-88e7-cc63778fad89"],
Cell[64034, 1277, 1010, 17, 212, "Text",ExpressionUUID->"d9510971-c03a-44cd-899e-3a1d194c2dd0"],
Cell[65047, 1296, 3311, 91, 149, "Input",ExpressionUUID->"aeac8e25-6c5e-46ca-81dd-fbbd3cc6af0a"],
Cell[68361, 1389, 299, 5, 43, "Input",ExpressionUUID->"71d92492-bc31-48e0-9775-98f7b7699608"],
Cell[68663, 1396, 1127, 28, 74, "Text",ExpressionUUID->"327ed078-e271-4133-93ae-3841d99c3eb1"],
Cell[CellGroupData[{
Cell[69815, 1428, 697, 14, 43, "Input",ExpressionUUID->"31970c8a-d294-4525-8346-bc9658c69c5b"],
Cell[70515, 1444, 9631, 243, 174, "Output",ExpressionUUID->"95c577d5-d571-4d6e-a81c-4e48e59e91ae"]
}, Open  ]],
Cell[80161, 1690, 1783, 27, 166, "Text",ExpressionUUID->"7d45d9c2-08fa-48a6-894c-4cb420080bb2"],
Cell[81947, 1719, 913, 20, 43, "Input",ExpressionUUID->"08e97b8e-bd61-4643-9d94-78516b73a411"],
Cell[82863, 1741, 336, 7, 51, "Text",ExpressionUUID->"9eb567ff-e36f-48f4-9ea1-a271d3af1535"],
Cell[83202, 1750, 431, 9, 43, "Input",ExpressionUUID->"4858e738-ce2f-46da-885e-1efa6ceca105"],
Cell[83636, 1761, 625, 12, 74, "Text",ExpressionUUID->"d92030bc-c55b-4b3a-8309-ce548c83fdf3"],
Cell[84264, 1775, 326, 6, 43, "Input",ExpressionUUID->"bf36d309-10f8-4e7e-927b-8c78587f0e37"],
Cell[84593, 1783, 1477, 24, 166, "Text",ExpressionUUID->"26c54a09-4973-4ab2-9847-40d48416aef9"],
Cell[CellGroupData[{
Cell[86095, 1811, 2573, 42, 62, "Input",ExpressionUUID->"da496238-51fc-41c3-835b-73810da18a40"],
Cell[88671, 1855, 673, 19, 32, "Output",ExpressionUUID->"57a68493-c8aa-4bb2-8da3-8442181b2153"]
}, Open  ]],
Cell[89359, 1877, 1018, 21, 62, "Input",ExpressionUUID->"e07c756e-19bb-4253-a09b-6d2fd1432f76"],
Cell[90380, 1900, 489, 12, 43, "Input",ExpressionUUID->"a9238437-c4db-4c0f-b549-bacfbb004c75"],
Cell[90872, 1914, 504, 10, 74, "Text",ExpressionUUID->"d3911033-58e0-4917-be20-9a3ae5cf6fba"],
Cell[91379, 1926, 413, 11, 43, "Input",ExpressionUUID->"1ba3babf-3c11-4759-8c70-9ba9e519445e"],
Cell[91795, 1939, 1051, 20, 97, "Text",ExpressionUUID->"d451a547-29cd-4bb5-ab5d-b797d477f38a"],
Cell[92849, 1961, 742, 13, 140, "Input",ExpressionUUID->"39436023-9571-4d4d-8820-499015630a5b"],
Cell[93594, 1976, 278, 6, 43, "Input",ExpressionUUID->"d327a75b-3e7b-42b4-8b8e-c8a909dc9238"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[93921, 1988, 469, 7, 69, "Chapter",ExpressionUUID->"fa6eb5e9-2160-4db4-811e-72a9146e2851"],
Cell[CellGroupData[{
Cell[94415, 1999, 184, 3, 67, "Section",ExpressionUUID->"0b6f6c5a-cd8d-473e-bda6-6564d7f66bf1"],
Cell[94602, 2004, 303, 7, 35, "Text",ExpressionUUID->"84a08d2e-5527-4e20-b138-ebd6e97eabbd"],
Cell[CellGroupData[{
Cell[94930, 2015, 187, 3, 54, "Subsection",ExpressionUUID->"be5ce4dc-981c-4fa3-b54d-c23756152e36"],
Cell[95120, 2020, 3904, 93, 511, "Text",ExpressionUUID->"e313b6a8-22a5-44a2-af63-23773b932a4d"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[99073, 2119, 207, 4, 53, "Section",ExpressionUUID->"0a2ed73c-d7c0-4712-b9eb-f0c8803d159b"],
Cell[99283, 2125, 222, 3, 51, "Text",ExpressionUUID->"916c25e8-9979-4155-9c19-8981bea4ce2d"],
Cell[99508, 2130, 854, 14, 120, "Text",ExpressionUUID->"fe7a65e0-985d-4e5d-aa39-aa38d22de401"],
Cell[100365, 2146, 1225, 28, 143, "Text",ExpressionUUID->"7ee8d696-d4db-40d8-8c49-00c75d596483"],
Cell[101593, 2176, 743, 13, 97, "Text",ExpressionUUID->"a5ca5c91-1b47-4c8c-8a32-aa985bcb98c0"],
Cell[102339, 2191, 306, 7, 48, "Input",ExpressionUUID->"f6664a4a-226c-4c35-adf1-f5e73674e222"],
Cell[CellGroupData[{
Cell[102670, 2202, 509, 13, 28, "Input",ExpressionUUID->"3978f178-993b-4b80-9d0f-236e8710c45d"],
Cell[103182, 2217, 432, 12, 48, "Output",ExpressionUUID->"7463c1e2-f87b-401a-ab58-897553af9e2a"]
}, Open  ]],
Cell[103629, 2232, 1838, 31, 143, "Text",ExpressionUUID->"80215b43-5550-446c-a6ae-a706eda62f9e"],
Cell[105470, 2265, 271, 6, 51, "Text",ExpressionUUID->"b268932a-6835-4e80-8e31-827ce43470ce"],
Cell[105744, 2273, 2841, 72, 74, "Input",ExpressionUUID->"b07845be-edf0-45e0-a527-f6e9af41e0b8"],
Cell[CellGroupData[{
Cell[108610, 2349, 419, 10, 31, "Input",ExpressionUUID->"d521c791-b619-4107-a7ba-3d614ea3621a"],
Cell[109032, 2361, 348, 8, 32, "Output",ExpressionUUID->"c66efa99-cf82-4445-8494-400f2bff7bd5"]
}, Open  ]],
Cell[109395, 2372, 278, 6, 51, "Text",ExpressionUUID->"aee1c7e4-fff4-401e-86b8-8b42f9a99f58"],
Cell[109676, 2380, 1962, 42, 127, "Text",ExpressionUUID->"09f10352-722b-4a16-885e-318050dfc40d"],
Cell[111641, 2424, 597, 18, 51, "Text",ExpressionUUID->"b1353e89-f4aa-41f5-b0ce-430e62789cec"],
Cell[CellGroupData[{
Cell[112263, 2446, 1050, 25, 107, "Input",ExpressionUUID->"71143f39-8f53-4b65-ac00-3ee6731b37ba"],
Cell[113316, 2473, 273, 5, 32, "Output",ExpressionUUID->"b02b56b5-3005-42ad-9bd5-53a4dc994cfc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113626, 2483, 235, 5, 31, "Input",ExpressionUUID->"be66a6ec-e98c-419b-a5d5-10f07c6846b8"],
Cell[113864, 2490, 168, 3, 32, "Output",ExpressionUUID->"dce9483f-75ce-4a8a-98bc-bea8f89c4f87"]
}, Open  ]],
Cell[114047, 2496, 214, 4, 28, "Input",ExpressionUUID->"2596d734-9356-43ce-ae31-b24fabeca76c"],
Cell[114264, 2502, 298, 5, 28, InheritFromParent,ExpressionUUID->"e7c8b02c-22db-4e50-bc09-dfd5cf57528a"],
Cell[114565, 2509, 158, 3, 32, "Output",ExpressionUUID->"242da2a2-3226-412a-80c0-d424fd445296"],
Cell[114726, 2514, 108, 0, 28, "Input",ExpressionUUID->"00ab5ff7-fddc-43f4-bff3-8953f7062102"],
Cell[114837, 2516, 201, 3, 51, "Text",ExpressionUUID->"c7044f79-1296-47f5-ae26-a26ab7d0adf8"],
Cell[115041, 2521, 918, 24, 28, "Input",ExpressionUUID->"9c979956-ad8f-4932-a828-5f7787419cc9"],
Cell[115962, 2547, 836, 15, 86, "Input",ExpressionUUID->"027b0f74-e162-46df-b1d1-f2ab82908573"],
Cell[116801, 2564, 1813, 47, 97, "Text",ExpressionUUID->"805aa66b-0c4f-4bef-b27a-606b28165a8e"],
Cell[118617, 2613, 1407, 32, 28, "Input",ExpressionUUID->"e6036d08-2d3b-40e2-8d7c-be36228bc412"],
Cell[120027, 2647, 347, 8, 28, "Input",ExpressionUUID->"1f58eb86-815d-4afe-bcf7-86cafce81ed5"],
Cell[120377, 2657, 1098, 25, 143, "Text",ExpressionUUID->"c885a11e-05bf-44f9-a224-b9ed90bc2db5"],
Cell[121478, 2684, 1008, 23, 28, "Input",ExpressionUUID->"78e1f3c9-4f7d-4ed8-8baf-b53f7a7816f3"],
Cell[122489, 2709, 1635, 33, 144, "Text",ExpressionUUID->"50741370-e3cc-4f0e-9579-4dcf7bbde6b9"],
Cell[124127, 2744, 399, 10, 48, "Input",ExpressionUUID->"18dbd859-59f6-4e0c-8db5-399b32e7b773"],
Cell[124529, 2756, 517, 11, 84, "Input",ExpressionUUID->"c0301be2-b3b2-4111-b5d3-c9b5a3319844"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[125095, 2773, 522, 8, 58, "Chapter",ExpressionUUID->"da567f9b-25f6-4c62-abc6-a8d9204a11b8"],
Cell[CellGroupData[{
Cell[125642, 2785, 184, 3, 67, "Section",ExpressionUUID->"385d326d-9718-4b08-82b5-d9557421067f"],
Cell[CellGroupData[{
Cell[125851, 2792, 219, 4, 70, "Subsubsection",ExpressionUUID->"cf68e0c1-2095-4de8-9ac9-5d5b19b18cf9"],
Cell[126073, 2798, 1897, 33, 70, "Text",ExpressionUUID->"6ad77b18-071d-4bb3-a53b-3c4e215f4b59"],
Cell[127973, 2833, 1814, 36, 70, "Text",ExpressionUUID->"03adc754-d60b-48e7-8eb7-29661c04a86d"],
Cell[129790, 2871, 1959, 47, 70, "Text",ExpressionUUID->"fbdaa05e-2092-4abd-a872-2e526775142f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131786, 2923, 296, 4, 70, "Subsubsection",ExpressionUUID->"4814d683-4418-4b6d-bae8-486e9193e399"],
Cell[132085, 2929, 1624, 31, 70, "Text",ExpressionUUID->"0f678a91-a1d6-4cd5-a8c9-3411ac22fa70"],
Cell[133712, 2962, 4833, 117, 70, "Text",ExpressionUUID->"d1569d38-91a1-45a7-a69f-f1d57ace71b6"],
Cell[138548, 3081, 7358, 221, 70, "Text",ExpressionUUID->"62a22101-7fed-49f2-93be-0790b252a43b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145943, 3307, 187, 3, 70, "Subsection",ExpressionUUID->"ed713aea-f683-433a-ade1-e4f2ed102814"],
Cell[146133, 3312, 3311, 56, 70, "Text",ExpressionUUID->"2f3fa494-21e7-4bc9-833e-40387f28e680"]
}, Closed]],
Cell[CellGroupData[{
Cell[149481, 3373, 201, 3, 70, "Subsection",ExpressionUUID->"186d4331-959b-4a69-a846-e6d28398f1c9"],
Cell[149685, 3378, 955, 26, 70, "Text",ExpressionUUID->"9782e8f0-5f82-455f-948e-72f865c08726"],
Cell[150643, 3406, 1040, 24, 70, "Text",ExpressionUUID->"394fb584-da3e-4efc-bbf6-236a6472b617"],
Cell[151686, 3432, 812, 18, 70, "Text",ExpressionUUID->"5e841029-22d5-4d2b-9985-59bf20c3d42f"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[152547, 3456, 207, 4, 53, "Section",ExpressionUUID->"8ebfa61c-0666-4de9-80aa-bff0fe54eff0"],
Cell[152757, 3462, 245, 5, 51, "Text",ExpressionUUID->"795fcc88-2244-44f2-a1b1-d32421b36ef5"],
Cell[153005, 3469, 3283, 50, 258, "Text",ExpressionUUID->"cd55f64e-2846-4a3c-94fa-25fdf52fb36a"],
Cell[156291, 3521, 816, 17, 74, "Text",ExpressionUUID->"039cefb6-3b39-4fcb-98cc-326661489a1f"],
Cell[157110, 3540, 1429, 27, 120, "Text",ExpressionUUID->"8f502057-01b2-4e66-a782-1281aae96167"],
Cell[158542, 3569, 561, 11, 97, "Text",ExpressionUUID->"24359df8-b5b3-4aaf-a491-ed6bc129b983"],
Cell[CellGroupData[{
Cell[159128, 3584, 218, 4, 28, "Input",ExpressionUUID->"f8e856e7-0a38-4084-95aa-23bed38f9213"],
Cell[159349, 3590, 259, 5, 32, "Output",ExpressionUUID->"c5cf0e92-b0be-4e42-b57a-69ee22bd9a15"]
}, Open  ]],
Cell[159623, 3598, 1387, 24, 28, "Input",ExpressionUUID->"cf9c79da-575c-4afa-95a8-871c3ceea793"],
Cell[161013, 3624, 1511, 26, 120, "Text",ExpressionUUID->"c7bac036-ca82-4299-9889-8f5ab15ae8c4"],
Cell[162527, 3652, 2282, 53, 94, "Input",ExpressionUUID->"2c2c1419-290e-43cc-9ec6-ff65d6b68432"],
Cell[164812, 3707, 833, 15, 74, "Text",ExpressionUUID->"ed48d176-19db-4005-b63f-d9ade31b6478"],
Cell[165648, 3724, 1031, 23, 28, "Input",ExpressionUUID->"3224d9f9-40ef-4d17-b545-ef3ed74cba38"],
Cell[166682, 3749, 1992, 36, 166, "Text",ExpressionUUID->"274ba678-3fe1-43d3-9d11-9855b52eb376"],
Cell[168677, 3787, 4167, 90, 328, "Text",ExpressionUUID->"d6a8cb3e-a829-44e0-afcf-b6932bca11a6"],
Cell[172847, 3879, 218, 4, 28, "Input",ExpressionUUID->"56f92f6e-6d36-4c31-926d-5a92ee75c6d5"],
Cell[173068, 3885, 1878, 41, 31, "Input",ExpressionUUID->"8fa1a3cf-a965-4fc7-b965-ad1a22984da2"],
Cell[174949, 3928, 532, 11, 74, "Text",ExpressionUUID->"70018d36-7ec0-46f6-9f7a-bbfc7d4831df"],
Cell[175484, 3941, 885, 24, 31, "Input",ExpressionUUID->"21a9c8e6-c8c6-46a0-b536-dad9447772e5"],
Cell[176372, 3967, 507, 9, 51, "Text",ExpressionUUID->"b3db1cdc-3be1-4702-8a8c-9bc06d62a534"],
Cell[176882, 3978, 590, 13, 28, "Input",ExpressionUUID->"8cf4aa2f-a069-46ec-ad12-bf14aa01a6f7"],
Cell[177475, 3993, 387, 7, 51, "Text",ExpressionUUID->"a90d647b-22e8-4f1f-877b-d36ea894fd92"],
Cell[177865, 4002, 1127, 18, 105, "Input",ExpressionUUID->"72ee5600-73bc-4a6f-935f-c11aa836f0ff"],
Cell[178995, 4022, 1183, 22, 124, "Input",ExpressionUUID->"069c363e-8abf-434c-b178-9d9f60c6e149"],
Cell[180181, 4046, 1322, 23, 124, "Input",ExpressionUUID->"fff592c8-fb8a-4ba6-aea9-58a19e335b76"],
Cell[CellGroupData[{
Cell[181528, 4073, 528, 8, 28, "Input",ExpressionUUID->"048d22b2-95e8-4ba0-bffd-6585dd2311c6"],
Cell[182059, 4083, 797, 19, 44, "Output",ExpressionUUID->"22e696f5-36ac-49ec-a1d6-100222908d58"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182893, 4107, 228, 4, 28, "Input",ExpressionUUID->"f38dde15-cc9f-44e5-b1fc-382aa69b4a3d"],
Cell[183124, 4113, 498, 14, 44, "Output",ExpressionUUID->"0414d448-c46f-4bf4-9733-932f7c721229"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183659, 4132, 230, 4, 28, "Input",ExpressionUUID->"01d4c188-aed8-4bbe-8833-b2af6b329ad2"],
Cell[183892, 4138, 575, 16, 44, "Output",ExpressionUUID->"22740a30-d6f6-4149-a97e-7644373ea33f"]
}, Open  ]],
Cell[184482, 4157, 300, 6, 51, "Text",ExpressionUUID->"4965abf6-5068-4b77-8929-d10b10798c8f"],
Cell[184785, 4165, 235, 3, 51, "Text",ExpressionUUID->"e7f908cf-79be-4bb0-b3e6-7b29be77a561"],
Cell[185023, 4170, 559, 13, 86, "Input",ExpressionUUID->"810d4269-ab32-40fb-9e0f-6d7443628bbd"],
Cell[185585, 4185, 635, 16, 67, "Input",ExpressionUUID->"af5d5665-bcd1-42a6-b7a2-6c88c8ff99c7"],
Cell[CellGroupData[{
Cell[186245, 4205, 232, 4, 28, "Input",ExpressionUUID->"35735e62-98e8-453e-bc26-5d95d3e2f9bf"],
Cell[186480, 4211, 474, 14, 44, "Output",ExpressionUUID->"b51071e7-511c-4d04-a8cc-e8ba1e437cab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186991, 4230, 250, 4, 48, "Input",ExpressionUUID->"46acd5d2-1728-461f-ae1b-64e95cef2ddf"],
Cell[187244, 4236, 154, 2, 32, "Output",ExpressionUUID->"316a635d-39d9-4da0-89fd-4a03a3d3b5ec"],
Cell[187401, 4240, 152, 2, 32, "Output",ExpressionUUID->"f7e89ba4-d439-4e11-9765-a75c4685467d"]
}, Open  ]],
Cell[187568, 4245, 231, 3, 51, "Text",ExpressionUUID->"8d840752-8aa4-415f-9dd1-6789867c89bd"],
Cell[187802, 4250, 225, 3, 51, "Text",ExpressionUUID->"0aa11aa3-9f8c-4b1e-aedd-5428d4f90f53"],
Cell[CellGroupData[{
Cell[188052, 4257, 231, 4, 28, "Input",ExpressionUUID->"05fed57e-3489-42d4-8e83-73a723319b9a"],
Cell[188286, 4263, 474, 14, 44, "Output",ExpressionUUID->"9338d984-ac0d-456c-8097-692a81463497"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188797, 4282, 233, 4, 28, "Input",ExpressionUUID->"d7197215-6b27-41bf-9762-4551c16e08e1"],
Cell[189033, 4288, 476, 14, 44, "Output",ExpressionUUID->"e3ffc1fe-2e6a-429d-b93f-39d1205a23d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189546, 4307, 231, 4, 28, "Input",ExpressionUUID->"6fee5b5d-4bef-4576-94d9-2b70c61acef2"],
Cell[189780, 4313, 477, 14, 44, "Output",ExpressionUUID->"c470f56b-6e3d-4fb5-9df4-0e9449854c27"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]]
}
]
*)

